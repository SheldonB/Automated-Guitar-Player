
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00802000  000020dc  00002170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000204  00802038  00802038  000021a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00002204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bacd  00000000  00000000  000025d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002262  00000000  00000000  0000e0a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008aa0  00000000  00000000  00010307  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a60  00000000  00000000  00018da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002ee10  00000000  00000000  00019808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004f92  00000000  00000000  00048618  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a8  00000000  00000000  0004d5aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c8ad  00000000  00000000  0004da52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c2       	rjmp	.+1228   	; 0x4ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c2       	rjmp	.+1290   	; 0x510 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c2       	rjmp	.+1286   	; 0x510 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c2       	rjmp	.+1282   	; 0x510 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c2       	rjmp	.+1278   	; 0x510 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c2       	rjmp	.+1274   	; 0x510 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c2       	rjmp	.+1270   	; 0x510 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c2       	rjmp	.+1266   	; 0x510 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c2       	rjmp	.+1262   	; 0x510 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c2       	rjmp	.+1258   	; 0x510 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c2       	rjmp	.+1254   	; 0x510 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c2       	rjmp	.+1250   	; 0x510 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6f c2       	rjmp	.+1246   	; 0x510 <__bad_interrupt>
      32:	00 00       	nop
      34:	6d c2       	rjmp	.+1242   	; 0x510 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c2       	rjmp	.+1238   	; 0x510 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c2       	rjmp	.+1234   	; 0x510 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c2       	rjmp	.+1230   	; 0x510 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c2       	rjmp	.+1226   	; 0x510 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c2       	rjmp	.+1222   	; 0x510 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c2       	rjmp	.+1218   	; 0x510 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c2       	rjmp	.+1214   	; 0x510 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c2       	rjmp	.+1210   	; 0x510 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c2       	rjmp	.+1206   	; 0x510 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c2       	rjmp	.+1202   	; 0x510 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c2       	rjmp	.+1198   	; 0x510 <__bad_interrupt>
      62:	00 00       	nop
      64:	55 c2       	rjmp	.+1194   	; 0x510 <__bad_interrupt>
      66:	00 00       	nop
      68:	53 c2       	rjmp	.+1190   	; 0x510 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	51 c2       	rjmp	.+1186   	; 0x510 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c2       	rjmp	.+1182   	; 0x510 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c2       	rjmp	.+1178   	; 0x510 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c2       	rjmp	.+1174   	; 0x510 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c2       	rjmp	.+1170   	; 0x510 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c2       	rjmp	.+1166   	; 0x510 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c2       	rjmp	.+1162   	; 0x510 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c2       	rjmp	.+1158   	; 0x510 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c2       	rjmp	.+1154   	; 0x510 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3f c2       	rjmp	.+1150   	; 0x510 <__bad_interrupt>
      92:	00 00       	nop
      94:	3d c2       	rjmp	.+1146   	; 0x510 <__bad_interrupt>
      96:	00 00       	nop
      98:	3b c2       	rjmp	.+1142   	; 0x510 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	39 c2       	rjmp	.+1138   	; 0x510 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	37 c2       	rjmp	.+1134   	; 0x510 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c2       	rjmp	.+1130   	; 0x510 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c2       	rjmp	.+1126   	; 0x510 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c2       	rjmp	.+1122   	; 0x510 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c2       	rjmp	.+1118   	; 0x510 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c2       	rjmp	.+1114   	; 0x510 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c2       	rjmp	.+1110   	; 0x510 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c2       	rjmp	.+1106   	; 0x510 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c2       	rjmp	.+1102   	; 0x510 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c2       	rjmp	.+1098   	; 0x510 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c2       	rjmp	.+1094   	; 0x510 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	21 c2       	rjmp	.+1090   	; 0x510 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	1f c2       	rjmp	.+1086   	; 0x510 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	1d c2       	rjmp	.+1082   	; 0x510 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	1b c2       	rjmp	.+1078   	; 0x510 <__bad_interrupt>
      da:	00 00       	nop
      dc:	19 c2       	rjmp	.+1074   	; 0x510 <__bad_interrupt>
      de:	00 00       	nop
      e0:	17 c2       	rjmp	.+1070   	; 0x510 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	15 c2       	rjmp	.+1066   	; 0x510 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	13 c2       	rjmp	.+1062   	; 0x510 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	11 c2       	rjmp	.+1058   	; 0x510 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	0f c2       	rjmp	.+1054   	; 0x510 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	0d c2       	rjmp	.+1050   	; 0x510 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	0b c2       	rjmp	.+1046   	; 0x510 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	09 c2       	rjmp	.+1042   	; 0x510 <__bad_interrupt>
      fe:	00 00       	nop
     100:	07 c2       	rjmp	.+1038   	; 0x510 <__bad_interrupt>
     102:	00 00       	nop
     104:	05 c2       	rjmp	.+1034   	; 0x510 <__bad_interrupt>
     106:	00 00       	nop
     108:	03 c2       	rjmp	.+1030   	; 0x510 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	01 c2       	rjmp	.+1026   	; 0x510 <__bad_interrupt>
     10e:	00 00       	nop
     110:	ff c1       	rjmp	.+1022   	; 0x510 <__bad_interrupt>
     112:	00 00       	nop
     114:	fd c1       	rjmp	.+1018   	; 0x510 <__bad_interrupt>
     116:	00 00       	nop
     118:	fb c1       	rjmp	.+1014   	; 0x510 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	f9 c1       	rjmp	.+1010   	; 0x510 <__bad_interrupt>
     11e:	00 00       	nop
     120:	f7 c1       	rjmp	.+1006   	; 0x510 <__bad_interrupt>
     122:	00 00       	nop
     124:	f5 c1       	rjmp	.+1002   	; 0x510 <__bad_interrupt>
     126:	00 00       	nop
     128:	f3 c1       	rjmp	.+998    	; 0x510 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	f1 c1       	rjmp	.+994    	; 0x510 <__bad_interrupt>
     12e:	00 00       	nop
     130:	ef c1       	rjmp	.+990    	; 0x510 <__bad_interrupt>
     132:	00 00       	nop
     134:	ed c1       	rjmp	.+986    	; 0x510 <__bad_interrupt>
     136:	00 00       	nop
     138:	eb c1       	rjmp	.+982    	; 0x510 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	e9 c1       	rjmp	.+978    	; 0x510 <__bad_interrupt>
     13e:	00 00       	nop
     140:	e7 c1       	rjmp	.+974    	; 0x510 <__bad_interrupt>
     142:	00 00       	nop
     144:	e5 c1       	rjmp	.+970    	; 0x510 <__bad_interrupt>
     146:	00 00       	nop
     148:	e3 c1       	rjmp	.+966    	; 0x510 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	e1 c1       	rjmp	.+962    	; 0x510 <__bad_interrupt>
     14e:	00 00       	nop
     150:	df c1       	rjmp	.+958    	; 0x510 <__bad_interrupt>
     152:	00 00       	nop
     154:	dd c1       	rjmp	.+954    	; 0x510 <__bad_interrupt>
     156:	00 00       	nop
     158:	db c1       	rjmp	.+950    	; 0x510 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	d9 c1       	rjmp	.+946    	; 0x510 <__bad_interrupt>
     15e:	00 00       	nop
     160:	d7 c1       	rjmp	.+942    	; 0x510 <__bad_interrupt>
     162:	00 00       	nop
     164:	d5 c1       	rjmp	.+938    	; 0x510 <__bad_interrupt>
     166:	00 00       	nop
     168:	d3 c1       	rjmp	.+934    	; 0x510 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	d1 c1       	rjmp	.+930    	; 0x510 <__bad_interrupt>
     16e:	00 00       	nop
     170:	cf c1       	rjmp	.+926    	; 0x510 <__bad_interrupt>
     172:	00 00       	nop
     174:	cd c1       	rjmp	.+922    	; 0x510 <__bad_interrupt>
     176:	00 00       	nop
     178:	cb c1       	rjmp	.+918    	; 0x510 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	c9 c1       	rjmp	.+914    	; 0x510 <__bad_interrupt>
     17e:	00 00       	nop
     180:	c7 c1       	rjmp	.+910    	; 0x510 <__bad_interrupt>
     182:	00 00       	nop
     184:	c5 c1       	rjmp	.+906    	; 0x510 <__bad_interrupt>
     186:	00 00       	nop
     188:	c3 c1       	rjmp	.+902    	; 0x510 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	c1 c1       	rjmp	.+898    	; 0x510 <__bad_interrupt>
     18e:	00 00       	nop
     190:	bf c1       	rjmp	.+894    	; 0x510 <__bad_interrupt>
     192:	00 00       	nop
     194:	bd c1       	rjmp	.+890    	; 0x510 <__bad_interrupt>
     196:	00 00       	nop
     198:	bb c1       	rjmp	.+886    	; 0x510 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	b9 c1       	rjmp	.+882    	; 0x510 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	b7 c1       	rjmp	.+878    	; 0x510 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	b5 c1       	rjmp	.+874    	; 0x510 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	b3 c1       	rjmp	.+870    	; 0x510 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	b1 c1       	rjmp	.+866    	; 0x510 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	af c1       	rjmp	.+862    	; 0x510 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	ad c1       	rjmp	.+858    	; 0x510 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	ab c1       	rjmp	.+854    	; 0x510 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	a9 c1       	rjmp	.+850    	; 0x510 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	a7 c1       	rjmp	.+846    	; 0x510 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	a5 c1       	rjmp	.+842    	; 0x510 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	a3 c1       	rjmp	.+838    	; 0x510 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	a1 c1       	rjmp	.+834    	; 0x510 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	9f c1       	rjmp	.+830    	; 0x510 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	9d c1       	rjmp	.+826    	; 0x510 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	9b c1       	rjmp	.+822    	; 0x510 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	99 c1       	rjmp	.+818    	; 0x510 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	97 c1       	rjmp	.+814    	; 0x510 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	95 c1       	rjmp	.+810    	; 0x510 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	93 c1       	rjmp	.+806    	; 0x510 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	91 c1       	rjmp	.+802    	; 0x510 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	8f c1       	rjmp	.+798    	; 0x510 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	8d c1       	rjmp	.+794    	; 0x510 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	8b c1       	rjmp	.+790    	; 0x510 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	ff 7e       	andi	r31, 0xEF	; 239
     1fe:	3c 18       	sub	r3, r12

00000200 <sysfont_glyphs>:
     200:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     210:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     220:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     230:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     240:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     250:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     260:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     270:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     280:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     290:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     2a0:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     2b0:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     2c0:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     2d0:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     2e0:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     2f0:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     300:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     310:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     320:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     330:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     340:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     350:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     360:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     370:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     380:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     390:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     3a0:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     3b0:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     3c0:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     3d0:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     3e0:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     3f0:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     400:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     410:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     420:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     430:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     440:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     450:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     460:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     470:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     480:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     490:	20 40                                                @

00000492 <option_three>:
     492:	50 6c 61 79 20 59 6f 75 72 20 4f 77 6e 00           Play Your Own.

000004a0 <option_two>:
     4a0:	53 74 61 69 72 77 61 79 20 74 6f 20 48 65 61 76     Stairway to Heav
     4b0:	65 6e 00                                            en.

000004b3 <option_one>:
     4b3:	53 69 6d 70 6c 65 20 42 65 61 74 00                 Simple Beat.

000004bf <main_menu_title>:
     4bf:	53 65 6c 65 63 74 20 61 20 53 6f 6e 67 00 00        Select a Song..

000004ce <__ctors_end>:
     4ce:	11 24       	eor	r1, r1
     4d0:	1f be       	out	0x3f, r1	; 63
     4d2:	cf ef       	ldi	r28, 0xFF	; 255
     4d4:	cd bf       	out	0x3d, r28	; 61
     4d6:	df e5       	ldi	r29, 0x5F	; 95
     4d8:	de bf       	out	0x3e, r29	; 62
     4da:	00 e0       	ldi	r16, 0x00	; 0
     4dc:	0c bf       	out	0x3c, r16	; 60

000004de <__do_copy_data>:
     4de:	10 e2       	ldi	r17, 0x20	; 32
     4e0:	a0 e0       	ldi	r26, 0x00	; 0
     4e2:	b0 e2       	ldi	r27, 0x20	; 32
     4e4:	ec ed       	ldi	r30, 0xDC	; 220
     4e6:	f0 e2       	ldi	r31, 0x20	; 32
     4e8:	00 e0       	ldi	r16, 0x00	; 0
     4ea:	0b bf       	out	0x3b, r16	; 59
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <__do_copy_data+0x14>
     4ee:	07 90       	elpm	r0, Z+
     4f0:	0d 92       	st	X+, r0
     4f2:	a8 33       	cpi	r26, 0x38	; 56
     4f4:	b1 07       	cpc	r27, r17
     4f6:	d9 f7       	brne	.-10     	; 0x4ee <__do_copy_data+0x10>

000004f8 <__do_clear_bss>:
     4f8:	22 e2       	ldi	r18, 0x22	; 34
     4fa:	a8 e3       	ldi	r26, 0x38	; 56
     4fc:	b0 e2       	ldi	r27, 0x20	; 32
     4fe:	01 c0       	rjmp	.+2      	; 0x502 <.do_clear_bss_start>

00000500 <.do_clear_bss_loop>:
     500:	1d 92       	st	X+, r1

00000502 <.do_clear_bss_start>:
     502:	ac 33       	cpi	r26, 0x3C	; 60
     504:	b2 07       	cpc	r27, r18
     506:	e1 f7       	brne	.-8      	; 0x500 <.do_clear_bss_loop>
     508:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <main>
     50c:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <_exit>

00000510 <__bad_interrupt>:
     510:	77 cd       	rjmp	.-1298   	; 0x0 <__vectors>

00000512 <jets_delay_ms>:
#include "jets_util.h"

void jets_delay_ms(unsigned int delay)
{
	unsigned int i;
	for (i = 0; i < delay/10; i++)
     512:	9c 01       	movw	r18, r24
     514:	ad ec       	ldi	r26, 0xCD	; 205
     516:	bc ec       	ldi	r27, 0xCC	; 204
     518:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__umulhisi3>
     51c:	96 95       	lsr	r25
     51e:	87 95       	ror	r24
     520:	96 95       	lsr	r25
     522:	87 95       	ror	r24
     524:	96 95       	lsr	r25
     526:	87 95       	ror	r24
     528:	00 97       	sbiw	r24, 0x00	; 0
     52a:	69 f0       	breq	.+26     	; 0x546 <jets_delay_ms+0x34>
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     530:	e3 ec       	ldi	r30, 0xC3	; 195
     532:	f9 e0       	ldi	r31, 0x09	; 9
     534:	31 97       	sbiw	r30, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <jets_delay_ms+0x22>
     538:	00 c0       	rjmp	.+0      	; 0x53a <jets_delay_ms+0x28>
     53a:	00 00       	nop
     53c:	2f 5f       	subi	r18, 0xFF	; 255
     53e:	3f 4f       	sbci	r19, 0xFF	; 255
     540:	28 17       	cp	r18, r24
     542:	39 07       	cpc	r19, r25
     544:	a9 f7       	brne	.-22     	; 0x530 <jets_delay_ms+0x1e>
     546:	08 95       	ret

00000548 <solenoid_init>:
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     548:	e0 e4       	ldi	r30, 0x40	; 64
     54a:	f6 e0       	ldi	r31, 0x06	; 6
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	81 83       	std	Z+1, r24	; 0x01
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	81 83       	std	Z+1, r24	; 0x01
     554:	84 e0       	ldi	r24, 0x04	; 4
     556:	81 83       	std	Z+1, r24	; 0x01
     558:	88 e0       	ldi	r24, 0x08	; 8
     55a:	81 83       	std	Z+1, r24	; 0x01
     55c:	80 e1       	ldi	r24, 0x10	; 16
     55e:	81 83       	std	Z+1, r24	; 0x01
     560:	08 95       	ret

00000562 <solenoid_high_low>:
	ioport_set_pin_dir(J1_PIN3, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(J1_PIN4, IOPORT_DIR_OUTPUT);
}

void solenoid_high_low(port_pin_t pin) 
{
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     56a:	c8 2f       	mov	r28, r24
     56c:	c6 95       	lsr	r28
     56e:	c6 95       	lsr	r28
     570:	c6 95       	lsr	r28
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     572:	90 e2       	ldi	r25, 0x20	; 32
     574:	c9 9f       	mul	r28, r25
     576:	e0 01       	movw	r28, r0
     578:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     57a:	da 5f       	subi	r29, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     57c:	87 70       	andi	r24, 0x07	; 7
     57e:	01 e0       	ldi	r16, 0x01	; 1
     580:	10 e0       	ldi	r17, 0x00	; 0
     582:	02 c0       	rjmp	.+4      	; 0x588 <solenoid_high_low+0x26>
     584:	00 0f       	add	r16, r16
     586:	11 1f       	adc	r17, r17
     588:	8a 95       	dec	r24
     58a:	e2 f7       	brpl	.-8      	; 0x584 <solenoid_high_low+0x22>

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
     58c:	0f 83       	std	Y+7, r16	; 0x07
	ioport_toggle_pin(pin);
	jets_delay_ms(50);
     58e:	82 e3       	ldi	r24, 0x32	; 50
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	bf df       	rcall	.-130    	; 0x512 <jets_delay_ms>
     594:	0f 83       	std	Y+7, r16	; 0x07
	ioport_toggle_pin(pin);
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	08 95       	ret

000005a0 <play_note>:
#include "jets_util.h"
#include "music.h"
#include "solenoid.h"

void play_note(struct SongNote note)
{
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	d7 2f       	mov	r29, r23
     5a6:	c8 2f       	mov	r28, r24
	solenoid_high_low(note.port);
     5a8:	86 2f       	mov	r24, r22
     5aa:	db df       	rcall	.-74     	; 0x562 <solenoid_high_low>
	jets_delay_ms(note.delay);
     5ac:	8d 2f       	mov	r24, r29
     5ae:	9c 2f       	mov	r25, r28
     5b0:	b0 df       	rcall	.-160    	; 0x512 <jets_delay_ms>
}
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     5b8:	bf 92       	push	r11
     5ba:	cf 92       	push	r12
     5bc:	df 92       	push	r13
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	1f 92       	push	r1
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     5d0:	e0 e0       	ldi	r30, 0x00	; 0
     5d2:	f6 e0       	ldi	r31, 0x06	; 6
     5d4:	88 e0       	ldi	r24, 0x08	; 8
     5d6:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     5d8:	85 83       	std	Z+5, r24	; 0x05
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     5da:	0f 2e       	mov	r0, r31
     5dc:	fb e2       	ldi	r31, 0x2B	; 43
     5de:	bf 2e       	mov	r11, r31
     5e0:	f0 2d       	mov	r31, r0
     5e2:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     5e4:	80 ea       	ldi	r24, 0xA0	; 160
     5e6:	99 e0       	ldi	r25, 0x09	; 9
     5e8:	54 d6       	rcall	.+3240   	; 0x1292 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     5ea:	c1 2c       	mov	r12, r1
     5ec:	d1 2c       	mov	r13, r1
     5ee:	76 01       	movw	r14, r12
     5f0:	00 e4       	ldi	r16, 0x40	; 64
     5f2:	12 e4       	ldi	r17, 0x42	; 66
     5f4:	2f e0       	ldi	r18, 0x0F	; 15
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	43 e0       	ldi	r20, 0x03	; 3
     5fa:	be 01       	movw	r22, r28
     5fc:	6f 5f       	subi	r22, 0xFF	; 255
     5fe:	7f 4f       	sbci	r23, 0xFF	; 255
     600:	80 ea       	ldi	r24, 0xA0	; 160
     602:	99 e0       	ldi	r25, 0x09	; 9
     604:	75 d6       	rcall	.+3306   	; 0x12f0 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     606:	00 e6       	ldi	r16, 0x60	; 96
     608:	16 e0       	ldi	r17, 0x06	; 6
     60a:	ff 24       	eor	r15, r15
     60c:	f3 94       	inc	r15
     60e:	f8 01       	movw	r30, r16
     610:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     612:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     614:	be 01       	movw	r22, r28
     616:	6f 5f       	subi	r22, 0xFF	; 255
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	80 ea       	ldi	r24, 0xA0	; 160
     61c:	99 e0       	ldi	r25, 0x09	; 9
     61e:	82 d6       	rcall	.+3332   	; 0x1324 <usart_spi_select_device>
     620:	f8 01       	movw	r30, r16
     622:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     624:	e0 ea       	ldi	r30, 0xA0	; 160
     626:	f9 e0       	ldi	r31, 0x09	; 9
     628:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     62a:	85 ff       	sbrs	r24, 5
     62c:	fd cf       	rjmp	.-6      	; 0x628 <st7565r_init+0x70>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     62e:	80 ea       	ldi	r24, 0xA0	; 160
     630:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     634:	e0 ea       	ldi	r30, 0xA0	; 160
     636:	f9 e0       	ldi	r31, 0x09	; 9
     638:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     63a:	86 ff       	sbrs	r24, 6
     63c:	fd cf       	rjmp	.-6      	; 0x638 <st7565r_init+0x80>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     63e:	e0 ea       	ldi	r30, 0xA0	; 160
     640:	f9 e0       	ldi	r31, 0x09	; 9
     642:	80 e4       	ldi	r24, 0x40	; 64
     644:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     646:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     648:	be 01       	movw	r22, r28
     64a:	6f 5f       	subi	r22, 0xFF	; 255
     64c:	7f 4f       	sbci	r23, 0xFF	; 255
     64e:	80 ea       	ldi	r24, 0xA0	; 160
     650:	99 e0       	ldi	r25, 0x09	; 9
     652:	7e d6       	rcall	.+3324   	; 0x1350 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     654:	8b e2       	ldi	r24, 0x2B	; 43
     656:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     658:	be 01       	movw	r22, r28
     65a:	6f 5f       	subi	r22, 0xFF	; 255
     65c:	7f 4f       	sbci	r23, 0xFF	; 255
     65e:	80 ea       	ldi	r24, 0xA0	; 160
     660:	99 e0       	ldi	r25, 0x09	; 9
     662:	60 d6       	rcall	.+3264   	; 0x1324 <usart_spi_select_device>
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     66a:	e0 ea       	ldi	r30, 0xA0	; 160
     66c:	f9 e0       	ldi	r31, 0x09	; 9
     66e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     670:	85 ff       	sbrs	r24, 5
     672:	fd cf       	rjmp	.-6      	; 0x66e <st7565r_init+0xb6>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     674:	86 ea       	ldi	r24, 0xA6	; 166
     676:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     67a:	e0 ea       	ldi	r30, 0xA0	; 160
     67c:	f9 e0       	ldi	r31, 0x09	; 9
     67e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     680:	86 ff       	sbrs	r24, 6
     682:	fd cf       	rjmp	.-6      	; 0x67e <st7565r_init+0xc6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     684:	e0 ea       	ldi	r30, 0xA0	; 160
     686:	f9 e0       	ldi	r31, 0x09	; 9
     688:	80 e4       	ldi	r24, 0x40	; 64
     68a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     68c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     68e:	be 01       	movw	r22, r28
     690:	6f 5f       	subi	r22, 0xFF	; 255
     692:	7f 4f       	sbci	r23, 0xFF	; 255
     694:	80 ea       	ldi	r24, 0xA0	; 160
     696:	99 e0       	ldi	r25, 0x09	; 9
     698:	5b d6       	rcall	.+3254   	; 0x1350 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     69a:	8b e2       	ldi	r24, 0x2B	; 43
     69c:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     69e:	be 01       	movw	r22, r28
     6a0:	6f 5f       	subi	r22, 0xFF	; 255
     6a2:	7f 4f       	sbci	r23, 0xFF	; 255
     6a4:	80 ea       	ldi	r24, 0xA0	; 160
     6a6:	99 e0       	ldi	r25, 0x09	; 9
     6a8:	3d d6       	rcall	.+3194   	; 0x1324 <usart_spi_select_device>
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6b0:	e0 ea       	ldi	r30, 0xA0	; 160
     6b2:	f9 e0       	ldi	r31, 0x09	; 9
     6b4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6b6:	85 ff       	sbrs	r24, 5
     6b8:	fd cf       	rjmp	.-6      	; 0x6b4 <st7565r_init+0xfc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6ba:	88 ec       	ldi	r24, 0xC8	; 200
     6bc:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6c0:	e0 ea       	ldi	r30, 0xA0	; 160
     6c2:	f9 e0       	ldi	r31, 0x09	; 9
     6c4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6c6:	86 ff       	sbrs	r24, 6
     6c8:	fd cf       	rjmp	.-6      	; 0x6c4 <st7565r_init+0x10c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6ca:	e0 ea       	ldi	r30, 0xA0	; 160
     6cc:	f9 e0       	ldi	r31, 0x09	; 9
     6ce:	80 e4       	ldi	r24, 0x40	; 64
     6d0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6d2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6d4:	be 01       	movw	r22, r28
     6d6:	6f 5f       	subi	r22, 0xFF	; 255
     6d8:	7f 4f       	sbci	r23, 0xFF	; 255
     6da:	80 ea       	ldi	r24, 0xA0	; 160
     6dc:	99 e0       	ldi	r25, 0x09	; 9
     6de:	38 d6       	rcall	.+3184   	; 0x1350 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6e0:	8b e2       	ldi	r24, 0x2B	; 43
     6e2:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6e4:	be 01       	movw	r22, r28
     6e6:	6f 5f       	subi	r22, 0xFF	; 255
     6e8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ea:	80 ea       	ldi	r24, 0xA0	; 160
     6ec:	99 e0       	ldi	r25, 0x09	; 9
     6ee:	1a d6       	rcall	.+3124   	; 0x1324 <usart_spi_select_device>
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6f6:	e0 ea       	ldi	r30, 0xA0	; 160
     6f8:	f9 e0       	ldi	r31, 0x09	; 9
     6fa:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6fc:	85 ff       	sbrs	r24, 5
     6fe:	fd cf       	rjmp	.-6      	; 0x6fa <st7565r_init+0x142>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     700:	82 ea       	ldi	r24, 0xA2	; 162
     702:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     706:	e0 ea       	ldi	r30, 0xA0	; 160
     708:	f9 e0       	ldi	r31, 0x09	; 9
     70a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     70c:	86 ff       	sbrs	r24, 6
     70e:	fd cf       	rjmp	.-6      	; 0x70a <st7565r_init+0x152>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     710:	e0 ea       	ldi	r30, 0xA0	; 160
     712:	f9 e0       	ldi	r31, 0x09	; 9
     714:	80 e4       	ldi	r24, 0x40	; 64
     716:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     718:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     71a:	be 01       	movw	r22, r28
     71c:	6f 5f       	subi	r22, 0xFF	; 255
     71e:	7f 4f       	sbci	r23, 0xFF	; 255
     720:	80 ea       	ldi	r24, 0xA0	; 160
     722:	99 e0       	ldi	r25, 0x09	; 9
     724:	15 d6       	rcall	.+3114   	; 0x1350 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     726:	8b e2       	ldi	r24, 0x2B	; 43
     728:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     72a:	be 01       	movw	r22, r28
     72c:	6f 5f       	subi	r22, 0xFF	; 255
     72e:	7f 4f       	sbci	r23, 0xFF	; 255
     730:	80 ea       	ldi	r24, 0xA0	; 160
     732:	99 e0       	ldi	r25, 0x09	; 9
     734:	f7 d5       	rcall	.+3054   	; 0x1324 <usart_spi_select_device>
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     73c:	e0 ea       	ldi	r30, 0xA0	; 160
     73e:	f9 e0       	ldi	r31, 0x09	; 9
     740:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     742:	85 ff       	sbrs	r24, 5
     744:	fd cf       	rjmp	.-6      	; 0x740 <st7565r_init+0x188>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     746:	8f e2       	ldi	r24, 0x2F	; 47
     748:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     74c:	e0 ea       	ldi	r30, 0xA0	; 160
     74e:	f9 e0       	ldi	r31, 0x09	; 9
     750:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     752:	86 ff       	sbrs	r24, 6
     754:	fd cf       	rjmp	.-6      	; 0x750 <st7565r_init+0x198>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     756:	e0 ea       	ldi	r30, 0xA0	; 160
     758:	f9 e0       	ldi	r31, 0x09	; 9
     75a:	80 e4       	ldi	r24, 0x40	; 64
     75c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     75e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     760:	be 01       	movw	r22, r28
     762:	6f 5f       	subi	r22, 0xFF	; 255
     764:	7f 4f       	sbci	r23, 0xFF	; 255
     766:	80 ea       	ldi	r24, 0xA0	; 160
     768:	99 e0       	ldi	r25, 0x09	; 9
     76a:	f2 d5       	rcall	.+3044   	; 0x1350 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     76c:	8b e2       	ldi	r24, 0x2B	; 43
     76e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     770:	be 01       	movw	r22, r28
     772:	6f 5f       	subi	r22, 0xFF	; 255
     774:	7f 4f       	sbci	r23, 0xFF	; 255
     776:	80 ea       	ldi	r24, 0xA0	; 160
     778:	99 e0       	ldi	r25, 0x09	; 9
     77a:	d4 d5       	rcall	.+2984   	; 0x1324 <usart_spi_select_device>
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     782:	e0 ea       	ldi	r30, 0xA0	; 160
     784:	f9 e0       	ldi	r31, 0x09	; 9
     786:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     788:	85 ff       	sbrs	r24, 5
     78a:	fd cf       	rjmp	.-6      	; 0x786 <st7565r_init+0x1ce>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     78c:	88 ef       	ldi	r24, 0xF8	; 248
     78e:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     792:	e0 ea       	ldi	r30, 0xA0	; 160
     794:	f9 e0       	ldi	r31, 0x09	; 9
     796:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     798:	86 ff       	sbrs	r24, 6
     79a:	fd cf       	rjmp	.-6      	; 0x796 <st7565r_init+0x1de>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     79c:	e0 ea       	ldi	r30, 0xA0	; 160
     79e:	f9 e0       	ldi	r31, 0x09	; 9
     7a0:	80 e4       	ldi	r24, 0x40	; 64
     7a2:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7a4:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7a6:	be 01       	movw	r22, r28
     7a8:	6f 5f       	subi	r22, 0xFF	; 255
     7aa:	7f 4f       	sbci	r23, 0xFF	; 255
     7ac:	80 ea       	ldi	r24, 0xA0	; 160
     7ae:	99 e0       	ldi	r25, 0x09	; 9
     7b0:	cf d5       	rcall	.+2974   	; 0x1350 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7b2:	8b e2       	ldi	r24, 0x2B	; 43
     7b4:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7b6:	be 01       	movw	r22, r28
     7b8:	6f 5f       	subi	r22, 0xFF	; 255
     7ba:	7f 4f       	sbci	r23, 0xFF	; 255
     7bc:	80 ea       	ldi	r24, 0xA0	; 160
     7be:	99 e0       	ldi	r25, 0x09	; 9
     7c0:	b1 d5       	rcall	.+2914   	; 0x1324 <usart_spi_select_device>
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7c8:	e0 ea       	ldi	r30, 0xA0	; 160
     7ca:	f9 e0       	ldi	r31, 0x09	; 9
     7cc:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7ce:	85 ff       	sbrs	r24, 5
     7d0:	fd cf       	rjmp	.-6      	; 0x7cc <st7565r_init+0x214>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7d2:	10 92 a0 09 	sts	0x09A0, r1
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7d6:	e0 ea       	ldi	r30, 0xA0	; 160
     7d8:	f9 e0       	ldi	r31, 0x09	; 9
     7da:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7dc:	86 ff       	sbrs	r24, 6
     7de:	fd cf       	rjmp	.-6      	; 0x7da <st7565r_init+0x222>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7e0:	e0 ea       	ldi	r30, 0xA0	; 160
     7e2:	f9 e0       	ldi	r31, 0x09	; 9
     7e4:	80 e4       	ldi	r24, 0x40	; 64
     7e6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7e8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7ea:	be 01       	movw	r22, r28
     7ec:	6f 5f       	subi	r22, 0xFF	; 255
     7ee:	7f 4f       	sbci	r23, 0xFF	; 255
     7f0:	80 ea       	ldi	r24, 0xA0	; 160
     7f2:	99 e0       	ldi	r25, 0x09	; 9
     7f4:	ad d5       	rcall	.+2906   	; 0x1350 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7f6:	8b e2       	ldi	r24, 0x2B	; 43
     7f8:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7fa:	be 01       	movw	r22, r28
     7fc:	6f 5f       	subi	r22, 0xFF	; 255
     7fe:	7f 4f       	sbci	r23, 0xFF	; 255
     800:	80 ea       	ldi	r24, 0xA0	; 160
     802:	99 e0       	ldi	r25, 0x09	; 9
     804:	8f d5       	rcall	.+2846   	; 0x1324 <usart_spi_select_device>
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     80c:	e0 ea       	ldi	r30, 0xA0	; 160
     80e:	f9 e0       	ldi	r31, 0x09	; 9
     810:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     812:	85 ff       	sbrs	r24, 5
     814:	fd cf       	rjmp	.-6      	; 0x810 <st7565r_init+0x258>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     816:	81 e2       	ldi	r24, 0x21	; 33
     818:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     81c:	e0 ea       	ldi	r30, 0xA0	; 160
     81e:	f9 e0       	ldi	r31, 0x09	; 9
     820:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     822:	86 ff       	sbrs	r24, 6
     824:	fd cf       	rjmp	.-6      	; 0x820 <st7565r_init+0x268>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     826:	e0 ea       	ldi	r30, 0xA0	; 160
     828:	f9 e0       	ldi	r31, 0x09	; 9
     82a:	80 e4       	ldi	r24, 0x40	; 64
     82c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     82e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     830:	be 01       	movw	r22, r28
     832:	6f 5f       	subi	r22, 0xFF	; 255
     834:	7f 4f       	sbci	r23, 0xFF	; 255
     836:	80 ea       	ldi	r24, 0xA0	; 160
     838:	99 e0       	ldi	r25, 0x09	; 9
     83a:	8a d5       	rcall	.+2836   	; 0x1350 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     83c:	8b e2       	ldi	r24, 0x2B	; 43
     83e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     840:	be 01       	movw	r22, r28
     842:	6f 5f       	subi	r22, 0xFF	; 255
     844:	7f 4f       	sbci	r23, 0xFF	; 255
     846:	80 ea       	ldi	r24, 0xA0	; 160
     848:	99 e0       	ldi	r25, 0x09	; 9
     84a:	6c d5       	rcall	.+2776   	; 0x1324 <usart_spi_select_device>
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     852:	e0 ea       	ldi	r30, 0xA0	; 160
     854:	f9 e0       	ldi	r31, 0x09	; 9
     856:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     858:	85 ff       	sbrs	r24, 5
     85a:	fd cf       	rjmp	.-6      	; 0x856 <st7565r_init+0x29e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     85c:	81 e8       	ldi	r24, 0x81	; 129
     85e:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     862:	e0 ea       	ldi	r30, 0xA0	; 160
     864:	f9 e0       	ldi	r31, 0x09	; 9
     866:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     868:	86 ff       	sbrs	r24, 6
     86a:	fd cf       	rjmp	.-6      	; 0x866 <st7565r_init+0x2ae>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     86c:	e0 ea       	ldi	r30, 0xA0	; 160
     86e:	f9 e0       	ldi	r31, 0x09	; 9
     870:	80 e4       	ldi	r24, 0x40	; 64
     872:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     874:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     876:	be 01       	movw	r22, r28
     878:	6f 5f       	subi	r22, 0xFF	; 255
     87a:	7f 4f       	sbci	r23, 0xFF	; 255
     87c:	80 ea       	ldi	r24, 0xA0	; 160
     87e:	99 e0       	ldi	r25, 0x09	; 9
     880:	67 d5       	rcall	.+2766   	; 0x1350 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     882:	8b e2       	ldi	r24, 0x2B	; 43
     884:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     886:	be 01       	movw	r22, r28
     888:	6f 5f       	subi	r22, 0xFF	; 255
     88a:	7f 4f       	sbci	r23, 0xFF	; 255
     88c:	80 ea       	ldi	r24, 0xA0	; 160
     88e:	99 e0       	ldi	r25, 0x09	; 9
     890:	49 d5       	rcall	.+2706   	; 0x1324 <usart_spi_select_device>
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     898:	e0 ea       	ldi	r30, 0xA0	; 160
     89a:	f9 e0       	ldi	r31, 0x09	; 9
     89c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     89e:	85 ff       	sbrs	r24, 5
     8a0:	fd cf       	rjmp	.-6      	; 0x89c <st7565r_init+0x2e4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8a2:	81 e2       	ldi	r24, 0x21	; 33
     8a4:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8a8:	e0 ea       	ldi	r30, 0xA0	; 160
     8aa:	f9 e0       	ldi	r31, 0x09	; 9
     8ac:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8ae:	86 ff       	sbrs	r24, 6
     8b0:	fd cf       	rjmp	.-6      	; 0x8ac <st7565r_init+0x2f4>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8b2:	e0 ea       	ldi	r30, 0xA0	; 160
     8b4:	f9 e0       	ldi	r31, 0x09	; 9
     8b6:	80 e4       	ldi	r24, 0x40	; 64
     8b8:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8ba:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8bc:	be 01       	movw	r22, r28
     8be:	6f 5f       	subi	r22, 0xFF	; 255
     8c0:	7f 4f       	sbci	r23, 0xFF	; 255
     8c2:	80 ea       	ldi	r24, 0xA0	; 160
     8c4:	99 e0       	ldi	r25, 0x09	; 9
     8c6:	44 d5       	rcall	.+2696   	; 0x1350 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8c8:	8b e2       	ldi	r24, 0x2B	; 43
     8ca:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8cc:	be 01       	movw	r22, r28
     8ce:	6f 5f       	subi	r22, 0xFF	; 255
     8d0:	7f 4f       	sbci	r23, 0xFF	; 255
     8d2:	80 ea       	ldi	r24, 0xA0	; 160
     8d4:	99 e0       	ldi	r25, 0x09	; 9
     8d6:	26 d5       	rcall	.+2636   	; 0x1324 <usart_spi_select_device>
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8de:	e0 ea       	ldi	r30, 0xA0	; 160
     8e0:	f9 e0       	ldi	r31, 0x09	; 9
     8e2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8e4:	85 ff       	sbrs	r24, 5
     8e6:	fd cf       	rjmp	.-6      	; 0x8e2 <st7565r_init+0x32a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8e8:	8f ea       	ldi	r24, 0xAF	; 175
     8ea:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8ee:	e0 ea       	ldi	r30, 0xA0	; 160
     8f0:	f9 e0       	ldi	r31, 0x09	; 9
     8f2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8f4:	86 ff       	sbrs	r24, 6
     8f6:	fd cf       	rjmp	.-6      	; 0x8f2 <st7565r_init+0x33a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8f8:	e0 ea       	ldi	r30, 0xA0	; 160
     8fa:	f9 e0       	ldi	r31, 0x09	; 9
     8fc:	80 e4       	ldi	r24, 0x40	; 64
     8fe:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     900:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     902:	be 01       	movw	r22, r28
     904:	6f 5f       	subi	r22, 0xFF	; 255
     906:	7f 4f       	sbci	r23, 0xFF	; 255
     908:	80 ea       	ldi	r24, 0xA0	; 160
     90a:	99 e0       	ldi	r25, 0x09	; 9
     90c:	21 d5       	rcall	.+2626   	; 0x1350 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     90e:	0f 90       	pop	r0
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	bf 90       	pop	r11
     922:	08 95       	ret

00000924 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     924:	8f ef       	ldi	r24, 0xFF	; 255
     926:	80 93 70 00 	sts	0x0070, r24
     92a:	80 93 71 00 	sts	0x0071, r24
     92e:	80 93 72 00 	sts	0x0072, r24
     932:	80 93 73 00 	sts	0x0073, r24
     936:	80 93 74 00 	sts	0x0074, r24
     93a:	80 93 75 00 	sts	0x0075, r24
     93e:	80 93 76 00 	sts	0x0076, r24
     942:	08 95       	ret

00000944 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     944:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     946:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     948:	e8 2f       	mov	r30, r24
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	e0 59       	subi	r30, 0x90	; 144
     94e:	ff 4f       	sbci	r31, 0xFF	; 255
     950:	60 95       	com	r22
     952:	80 81       	ld	r24, Z
     954:	68 23       	and	r22, r24
     956:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     958:	9f bf       	out	0x3f, r25	; 63
     95a:	08 95       	ret

0000095c <gfx_mono_st7565r_put_page>:
 */
void gfx_mono_st7565r_get_page(gfx_mono_color_t *data, gfx_coord_t page,
		gfx_coord_t column, gfx_coord_t width)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_get_page(data, page, column, width);
     95c:	6f 92       	push	r6
     95e:	7f 92       	push	r7
     960:	8f 92       	push	r8
     962:	9f 92       	push	r9
     964:	af 92       	push	r10
     966:	bf 92       	push	r11
     968:	cf 92       	push	r12
     96a:	df 92       	push	r13
     96c:	ef 92       	push	r14
     96e:	ff 92       	push	r15
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	1f 92       	push	r1
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	8c 01       	movw	r16, r24
     980:	e6 2e       	mov	r14, r22
     982:	f4 2e       	mov	r15, r20
     984:	d2 2e       	mov	r13, r18
     986:	eb d1       	rcall	.+982    	; 0xd5e <gfx_mono_framebuffer_put_page>
     988:	8e 2d       	mov	r24, r14
     98a:	8f 70       	andi	r24, 0x0F	; 15
     98c:	80 6b       	ori	r24, 0xB0	; 176
     98e:	e8 2e       	mov	r14, r24
     990:	8b e2       	ldi	r24, 0x2B	; 43
     992:	89 83       	std	Y+1, r24	; 0x01
     994:	be 01       	movw	r22, r28
     996:	6f 5f       	subi	r22, 0xFF	; 255
     998:	7f 4f       	sbci	r23, 0xFF	; 255
     99a:	80 ea       	ldi	r24, 0xA0	; 160
     99c:	99 e0       	ldi	r25, 0x09	; 9
     99e:	c2 d4       	rcall	.+2436   	; 0x1324 <usart_spi_select_device>
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	80 93 66 06 	sts	0x0666, r24
     9a6:	e0 ea       	ldi	r30, 0xA0	; 160
     9a8:	f9 e0       	ldi	r31, 0x09	; 9
     9aa:	81 81       	ldd	r24, Z+1	; 0x01
     9ac:	85 ff       	sbrs	r24, 5
     9ae:	fd cf       	rjmp	.-6      	; 0x9aa <gfx_mono_st7565r_put_page+0x4e>
     9b0:	e0 92 a0 09 	sts	0x09A0, r14
     9b4:	e0 ea       	ldi	r30, 0xA0	; 160
     9b6:	f9 e0       	ldi	r31, 0x09	; 9
     9b8:	91 81       	ldd	r25, Z+1	; 0x01
     9ba:	96 ff       	sbrs	r25, 6
     9bc:	fd cf       	rjmp	.-6      	; 0x9b8 <gfx_mono_st7565r_put_page+0x5c>
     9be:	e0 ea       	ldi	r30, 0xA0	; 160
     9c0:	f9 e0       	ldi	r31, 0x09	; 9
     9c2:	80 e4       	ldi	r24, 0x40	; 64
     9c4:	81 83       	std	Z+1, r24	; 0x01
     9c6:	80 81       	ld	r24, Z
     9c8:	be 01       	movw	r22, r28
     9ca:	6f 5f       	subi	r22, 0xFF	; 255
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	80 ea       	ldi	r24, 0xA0	; 160
     9d0:	99 e0       	ldi	r25, 0x09	; 9
     9d2:	be d4       	rcall	.+2428   	; 0x1350 <usart_spi_deselect_device>
     9d4:	8f 2d       	mov	r24, r15
     9d6:	8f 77       	andi	r24, 0x7F	; 127
     9d8:	82 95       	swap	r24
     9da:	8f 70       	andi	r24, 0x0F	; 15
     9dc:	80 61       	ori	r24, 0x10	; 16
     9de:	e8 2e       	mov	r14, r24
     9e0:	8b e2       	ldi	r24, 0x2B	; 43
     9e2:	89 83       	std	Y+1, r24	; 0x01
     9e4:	be 01       	movw	r22, r28
     9e6:	6f 5f       	subi	r22, 0xFF	; 255
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	80 ea       	ldi	r24, 0xA0	; 160
     9ec:	99 e0       	ldi	r25, 0x09	; 9
     9ee:	9a d4       	rcall	.+2356   	; 0x1324 <usart_spi_select_device>
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	80 93 66 06 	sts	0x0666, r24
     9f6:	e0 ea       	ldi	r30, 0xA0	; 160
     9f8:	f9 e0       	ldi	r31, 0x09	; 9
     9fa:	91 81       	ldd	r25, Z+1	; 0x01
     9fc:	95 ff       	sbrs	r25, 5
     9fe:	fd cf       	rjmp	.-6      	; 0x9fa <gfx_mono_st7565r_put_page+0x9e>
     a00:	e0 92 a0 09 	sts	0x09A0, r14
     a04:	e0 ea       	ldi	r30, 0xA0	; 160
     a06:	f9 e0       	ldi	r31, 0x09	; 9
     a08:	91 81       	ldd	r25, Z+1	; 0x01
     a0a:	96 ff       	sbrs	r25, 6
     a0c:	fd cf       	rjmp	.-6      	; 0xa08 <gfx_mono_st7565r_put_page+0xac>
     a0e:	e0 ea       	ldi	r30, 0xA0	; 160
     a10:	f9 e0       	ldi	r31, 0x09	; 9
     a12:	80 e4       	ldi	r24, 0x40	; 64
     a14:	81 83       	std	Z+1, r24	; 0x01
     a16:	80 81       	ld	r24, Z
     a18:	be 01       	movw	r22, r28
     a1a:	6f 5f       	subi	r22, 0xFF	; 255
     a1c:	7f 4f       	sbci	r23, 0xFF	; 255
     a1e:	80 ea       	ldi	r24, 0xA0	; 160
     a20:	99 e0       	ldi	r25, 0x09	; 9
     a22:	96 d4       	rcall	.+2348   	; 0x1350 <usart_spi_deselect_device>
     a24:	8f 2d       	mov	r24, r15
     a26:	8f 70       	andi	r24, 0x0F	; 15
     a28:	f8 2e       	mov	r15, r24
     a2a:	8b e2       	ldi	r24, 0x2B	; 43
     a2c:	89 83       	std	Y+1, r24	; 0x01
     a2e:	be 01       	movw	r22, r28
     a30:	6f 5f       	subi	r22, 0xFF	; 255
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	80 ea       	ldi	r24, 0xA0	; 160
     a36:	99 e0       	ldi	r25, 0x09	; 9
     a38:	75 d4       	rcall	.+2282   	; 0x1324 <usart_spi_select_device>
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	80 93 66 06 	sts	0x0666, r24
     a40:	e0 ea       	ldi	r30, 0xA0	; 160
     a42:	f9 e0       	ldi	r31, 0x09	; 9
     a44:	91 81       	ldd	r25, Z+1	; 0x01
     a46:	95 ff       	sbrs	r25, 5
     a48:	fd cf       	rjmp	.-6      	; 0xa44 <gfx_mono_st7565r_put_page+0xe8>
     a4a:	f0 92 a0 09 	sts	0x09A0, r15
     a4e:	e0 ea       	ldi	r30, 0xA0	; 160
     a50:	f9 e0       	ldi	r31, 0x09	; 9
     a52:	91 81       	ldd	r25, Z+1	; 0x01
     a54:	96 ff       	sbrs	r25, 6
     a56:	fd cf       	rjmp	.-6      	; 0xa52 <gfx_mono_st7565r_put_page+0xf6>
     a58:	e0 ea       	ldi	r30, 0xA0	; 160
     a5a:	f9 e0       	ldi	r31, 0x09	; 9
     a5c:	80 e4       	ldi	r24, 0x40	; 64
     a5e:	81 83       	std	Z+1, r24	; 0x01
     a60:	80 81       	ld	r24, Z
     a62:	be 01       	movw	r22, r28
     a64:	6f 5f       	subi	r22, 0xFF	; 255
     a66:	7f 4f       	sbci	r23, 0xFF	; 255
     a68:	80 ea       	ldi	r24, 0xA0	; 160
     a6a:	99 e0       	ldi	r25, 0x09	; 9
     a6c:	71 d4       	rcall	.+2274   	; 0x1350 <usart_spi_deselect_device>
     a6e:	78 01       	movw	r14, r16
     a70:	da 94       	dec	r13
     a72:	ad 2c       	mov	r10, r13
     a74:	b1 2c       	mov	r11, r1
     a76:	ef ef       	ldi	r30, 0xFF	; 255
     a78:	ae 1a       	sub	r10, r30
     a7a:	be 0a       	sbc	r11, r30
     a7c:	a0 0e       	add	r10, r16
     a7e:	b1 1e       	adc	r11, r17
     a80:	0f 2e       	mov	r0, r31
     a82:	fb e2       	ldi	r31, 0x2B	; 43
     a84:	6f 2e       	mov	r6, r31
     a86:	f0 2d       	mov	r31, r0
     a88:	00 ea       	ldi	r16, 0xA0	; 160
     a8a:	19 e0       	ldi	r17, 0x09	; 9
     a8c:	0f 2e       	mov	r0, r31
     a8e:	f0 e6       	ldi	r31, 0x60	; 96
     a90:	cf 2e       	mov	r12, r31
     a92:	f6 e0       	ldi	r31, 0x06	; 6
     a94:	df 2e       	mov	r13, r31
     a96:	f0 2d       	mov	r31, r0
     a98:	99 24       	eor	r9, r9
     a9a:	93 94       	inc	r9
     a9c:	68 94       	set
     a9e:	77 24       	eor	r7, r7
     aa0:	76 f8       	bld	r7, 6
     aa2:	f7 01       	movw	r30, r14
     aa4:	81 90       	ld	r8, Z+
     aa6:	7f 01       	movw	r14, r30
     aa8:	69 82       	std	Y+1, r6	; 0x01
     aaa:	be 01       	movw	r22, r28
     aac:	6f 5f       	subi	r22, 0xFF	; 255
     aae:	7f 4f       	sbci	r23, 0xFF	; 255
     ab0:	c8 01       	movw	r24, r16
     ab2:	38 d4       	rcall	.+2160   	; 0x1324 <usart_spi_select_device>
     ab4:	f6 01       	movw	r30, r12
     ab6:	95 82       	std	Z+5, r9	; 0x05
     ab8:	f8 01       	movw	r30, r16
     aba:	91 81       	ldd	r25, Z+1	; 0x01
     abc:	95 ff       	sbrs	r25, 5
     abe:	fc cf       	rjmp	.-8      	; 0xab8 <gfx_mono_st7565r_put_page+0x15c>
     ac0:	80 82       	st	Z, r8
     ac2:	f8 01       	movw	r30, r16
     ac4:	91 81       	ldd	r25, Z+1	; 0x01
     ac6:	96 ff       	sbrs	r25, 6
     ac8:	fc cf       	rjmp	.-8      	; 0xac2 <gfx_mono_st7565r_put_page+0x166>
     aca:	71 82       	std	Z+1, r7	; 0x01
     acc:	80 81       	ld	r24, Z
     ace:	f6 01       	movw	r30, r12
     ad0:	96 82       	std	Z+6, r9	; 0x06
     ad2:	be 01       	movw	r22, r28
     ad4:	6f 5f       	subi	r22, 0xFF	; 255
     ad6:	7f 4f       	sbci	r23, 0xFF	; 255
     ad8:	c8 01       	movw	r24, r16
     ada:	3a d4       	rcall	.+2164   	; 0x1350 <usart_spi_deselect_device>
     adc:	ea 14       	cp	r14, r10
     ade:	fb 04       	cpc	r15, r11
     ae0:	01 f7       	brne	.-64     	; 0xaa2 <gfx_mono_st7565r_put_page+0x146>
     ae2:	0f 90       	pop	r0
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	df 90       	pop	r13
     af2:	cf 90       	pop	r12
     af4:	bf 90       	pop	r11
     af6:	af 90       	pop	r10
     af8:	9f 90       	pop	r9
     afa:	8f 90       	pop	r8
     afc:	7f 90       	pop	r7
     afe:	6f 90       	pop	r6
     b00:	08 95       	ret

00000b02 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	1f 92       	push	r1
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	08 2f       	mov	r16, r24
     b14:	f6 2e       	mov	r15, r22
     b16:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     b18:	36 d1       	rcall	.+620    	; 0xd86 <gfx_mono_framebuffer_put_byte>
 * \param address the page address
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
     b1a:	0f 70       	andi	r16, 0x0F	; 15
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     b1c:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     b1e:	8b e2       	ldi	r24, 0x2B	; 43
     b20:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b22:	be 01       	movw	r22, r28
     b24:	6f 5f       	subi	r22, 0xFF	; 255
     b26:	7f 4f       	sbci	r23, 0xFF	; 255
     b28:	80 ea       	ldi	r24, 0xA0	; 160
     b2a:	99 e0       	ldi	r25, 0x09	; 9
     b2c:	fb d3       	rcall	.+2038   	; 0x1324 <usart_spi_select_device>
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     b34:	e0 ea       	ldi	r30, 0xA0	; 160
     b36:	f9 e0       	ldi	r31, 0x09	; 9
     b38:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     b3a:	95 ff       	sbrs	r25, 5
     b3c:	fd cf       	rjmp	.-6      	; 0xb38 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     b3e:	00 93 a0 09 	sts	0x09A0, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     b42:	e0 ea       	ldi	r30, 0xA0	; 160
     b44:	f9 e0       	ldi	r31, 0x09	; 9
     b46:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     b48:	86 ff       	sbrs	r24, 6
     b4a:	fd cf       	rjmp	.-6      	; 0xb46 <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     b4c:	e0 ea       	ldi	r30, 0xA0	; 160
     b4e:	f9 e0       	ldi	r31, 0x09	; 9
     b50:	80 e4       	ldi	r24, 0x40	; 64
     b52:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     b54:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     b56:	be 01       	movw	r22, r28
     b58:	6f 5f       	subi	r22, 0xFF	; 255
     b5a:	7f 4f       	sbci	r23, 0xFF	; 255
     b5c:	80 ea       	ldi	r24, 0xA0	; 160
     b5e:	99 e0       	ldi	r25, 0x09	; 9
     b60:	f7 d3       	rcall	.+2030   	; 0x1350 <usart_spi_deselect_device>
 * \param address the column address
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
     b62:	0f 2d       	mov	r16, r15
     b64:	0f 77       	andi	r16, 0x7F	; 127
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     b66:	02 95       	swap	r16
     b68:	0f 70       	andi	r16, 0x0F	; 15
     b6a:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     b6c:	8b e2       	ldi	r24, 0x2B	; 43
     b6e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b70:	be 01       	movw	r22, r28
     b72:	6f 5f       	subi	r22, 0xFF	; 255
     b74:	7f 4f       	sbci	r23, 0xFF	; 255
     b76:	80 ea       	ldi	r24, 0xA0	; 160
     b78:	99 e0       	ldi	r25, 0x09	; 9
     b7a:	d4 d3       	rcall	.+1960   	; 0x1324 <usart_spi_select_device>
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     b82:	e0 ea       	ldi	r30, 0xA0	; 160
     b84:	f9 e0       	ldi	r31, 0x09	; 9
     b86:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     b88:	85 ff       	sbrs	r24, 5
     b8a:	fd cf       	rjmp	.-6      	; 0xb86 <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     b8c:	00 93 a0 09 	sts	0x09A0, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     b90:	e0 ea       	ldi	r30, 0xA0	; 160
     b92:	f9 e0       	ldi	r31, 0x09	; 9
     b94:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     b96:	86 ff       	sbrs	r24, 6
     b98:	fd cf       	rjmp	.-6      	; 0xb94 <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     b9a:	e0 ea       	ldi	r30, 0xA0	; 160
     b9c:	f9 e0       	ldi	r31, 0x09	; 9
     b9e:	80 e4       	ldi	r24, 0x40	; 64
     ba0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     ba2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     ba4:	be 01       	movw	r22, r28
     ba6:	6f 5f       	subi	r22, 0xFF	; 255
     ba8:	7f 4f       	sbci	r23, 0xFF	; 255
     baa:	80 ea       	ldi	r24, 0xA0	; 160
     bac:	99 e0       	ldi	r25, 0x09	; 9
     bae:	d0 d3       	rcall	.+1952   	; 0x1350 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     bb0:	0f 2d       	mov	r16, r15
     bb2:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     bb4:	8b e2       	ldi	r24, 0x2B	; 43
     bb6:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     bb8:	be 01       	movw	r22, r28
     bba:	6f 5f       	subi	r22, 0xFF	; 255
     bbc:	7f 4f       	sbci	r23, 0xFF	; 255
     bbe:	80 ea       	ldi	r24, 0xA0	; 160
     bc0:	99 e0       	ldi	r25, 0x09	; 9
     bc2:	b0 d3       	rcall	.+1888   	; 0x1324 <usart_spi_select_device>
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     bca:	e0 ea       	ldi	r30, 0xA0	; 160
     bcc:	f9 e0       	ldi	r31, 0x09	; 9
     bce:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     bd0:	85 ff       	sbrs	r24, 5
     bd2:	fd cf       	rjmp	.-6      	; 0xbce <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     bd4:	00 93 a0 09 	sts	0x09A0, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     bd8:	e0 ea       	ldi	r30, 0xA0	; 160
     bda:	f9 e0       	ldi	r31, 0x09	; 9
     bdc:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     bde:	86 ff       	sbrs	r24, 6
     be0:	fd cf       	rjmp	.-6      	; 0xbdc <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     be2:	e0 ea       	ldi	r30, 0xA0	; 160
     be4:	f9 e0       	ldi	r31, 0x09	; 9
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     bea:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     bec:	be 01       	movw	r22, r28
     bee:	6f 5f       	subi	r22, 0xFF	; 255
     bf0:	7f 4f       	sbci	r23, 0xFF	; 255
     bf2:	80 ea       	ldi	r24, 0xA0	; 160
     bf4:	99 e0       	ldi	r25, 0x09	; 9
     bf6:	ac d3       	rcall	.+1880   	; 0x1350 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     bf8:	8b e2       	ldi	r24, 0x2B	; 43
     bfa:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     bfc:	be 01       	movw	r22, r28
     bfe:	6f 5f       	subi	r22, 0xFF	; 255
     c00:	7f 4f       	sbci	r23, 0xFF	; 255
     c02:	80 ea       	ldi	r24, 0xA0	; 160
     c04:	99 e0       	ldi	r25, 0x09	; 9
     c06:	8e d3       	rcall	.+1820   	; 0x1324 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	80 93 65 06 	sts	0x0665, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     c0e:	e0 ea       	ldi	r30, 0xA0	; 160
     c10:	f9 e0       	ldi	r31, 0x09	; 9
     c12:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     c14:	85 ff       	sbrs	r24, 5
     c16:	fd cf       	rjmp	.-6      	; 0xc12 <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     c18:	10 93 a0 09 	sts	0x09A0, r17
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     c1c:	e0 ea       	ldi	r30, 0xA0	; 160
     c1e:	f9 e0       	ldi	r31, 0x09	; 9
     c20:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     c22:	86 ff       	sbrs	r24, 6
     c24:	fd cf       	rjmp	.-6      	; 0xc20 <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     c26:	e0 ea       	ldi	r30, 0xA0	; 160
     c28:	f9 e0       	ldi	r31, 0x09	; 9
     c2a:	80 e4       	ldi	r24, 0x40	; 64
     c2c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     c2e:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	80 93 66 06 	sts	0x0666, r24
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     c36:	be 01       	movw	r22, r28
     c38:	6f 5f       	subi	r22, 0xFF	; 255
     c3a:	7f 4f       	sbci	r23, 0xFF	; 255
     c3c:	80 ea       	ldi	r24, 0xA0	; 160
     c3e:	99 e0       	ldi	r25, 0x09	; 9
     c40:	87 d3       	rcall	.+1806   	; 0x1350 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     c42:	0f 90       	pop	r0
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	08 95       	ret

00000c50 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	1f 92       	push	r1
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     c5e:	88 e3       	ldi	r24, 0x38	; 56
     c60:	90 e2       	ldi	r25, 0x20	; 32
     c62:	78 d0       	rcall	.+240    	; 0xd54 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     c64:	a9 dc       	rcall	.-1710   	; 0x5b8 <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     c66:	8b e2       	ldi	r24, 0x2B	; 43
     c68:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     c6a:	be 01       	movw	r22, r28
     c6c:	6f 5f       	subi	r22, 0xFF	; 255
     c6e:	7f 4f       	sbci	r23, 0xFF	; 255
     c70:	80 ea       	ldi	r24, 0xA0	; 160
     c72:	99 e0       	ldi	r25, 0x09	; 9
     c74:	57 d3       	rcall	.+1710   	; 0x1324 <usart_spi_select_device>
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     c7c:	e0 ea       	ldi	r30, 0xA0	; 160
     c7e:	f9 e0       	ldi	r31, 0x09	; 9
     c80:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     c82:	85 ff       	sbrs	r24, 5
     c84:	fd cf       	rjmp	.-6      	; 0xc80 <gfx_mono_st7565r_init+0x30>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     c86:	80 e4       	ldi	r24, 0x40	; 64
     c88:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     c8c:	e0 ea       	ldi	r30, 0xA0	; 160
     c8e:	f9 e0       	ldi	r31, 0x09	; 9
     c90:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     c92:	86 ff       	sbrs	r24, 6
     c94:	fd cf       	rjmp	.-6      	; 0xc90 <gfx_mono_st7565r_init+0x40>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     c96:	e0 ea       	ldi	r30, 0xA0	; 160
     c98:	f9 e0       	ldi	r31, 0x09	; 9
     c9a:	80 e4       	ldi	r24, 0x40	; 64
     c9c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     c9e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     ca0:	be 01       	movw	r22, r28
     ca2:	6f 5f       	subi	r22, 0xFF	; 255
     ca4:	7f 4f       	sbci	r23, 0xFF	; 255
     ca6:	80 ea       	ldi	r24, 0xA0	; 160
     ca8:	99 e0       	ldi	r25, 0x09	; 9
     caa:	52 d3       	rcall	.+1700   	; 0x1350 <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     cac:	00 e0       	ldi	r16, 0x00	; 0
     cae:	0a c0       	rjmp	.+20     	; 0xcc4 <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     cb0:	40 e0       	ldi	r20, 0x00	; 0
     cb2:	61 2f       	mov	r22, r17
     cb4:	80 2f       	mov	r24, r16
     cb6:	25 df       	rcall	.-438    	; 0xb02 <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     cb8:	1f 5f       	subi	r17, 0xFF	; 255
     cba:	10 38       	cpi	r17, 0x80	; 128
     cbc:	c9 f7       	brne	.-14     	; 0xcb0 <gfx_mono_st7565r_init+0x60>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     cbe:	0f 5f       	subi	r16, 0xFF	; 255
     cc0:	04 30       	cpi	r16, 0x04	; 4
     cc2:	11 f0       	breq	.+4      	; 0xcc8 <gfx_mono_st7565r_init+0x78>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     cc4:	10 e0       	ldi	r17, 0x00	; 0
     cc6:	f4 cf       	rjmp	.-24     	; 0xcb0 <gfx_mono_st7565r_init+0x60>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     cc8:	0f 90       	pop	r0
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	1f 91       	pop	r17
     cd0:	0f 91       	pop	r16
     cd2:	08 95       	ret

00000cd4 <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     cd4:	ff 92       	push	r15
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     cde:	88 23       	and	r24, r24
     ce0:	8c f1       	brlt	.+98     	; 0xd44 <gfx_mono_st7565r_draw_pixel+0x70>
     ce2:	60 32       	cpi	r22, 0x20	; 32
     ce4:	78 f5       	brcc	.+94     	; 0xd44 <gfx_mono_st7565r_draw_pixel+0x70>
     ce6:	d4 2f       	mov	r29, r20
     ce8:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     cea:	f6 2e       	mov	r15, r22
     cec:	f6 94       	lsr	r15
     cee:	f6 94       	lsr	r15
     cf0:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     cf2:	2f 2d       	mov	r18, r15
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	31 95       	neg	r19
     cf8:	21 95       	neg	r18
     cfa:	31 09       	sbc	r19, r1
     cfc:	22 0f       	add	r18, r18
     cfe:	33 1f       	adc	r19, r19
     d00:	22 0f       	add	r18, r18
     d02:	33 1f       	adc	r19, r19
     d04:	22 0f       	add	r18, r18
     d06:	33 1f       	adc	r19, r19
     d08:	26 0f       	add	r18, r22
     d0a:	31 1d       	adc	r19, r1
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	8b 01       	movw	r16, r22
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <gfx_mono_st7565r_draw_pixel+0x44>
     d14:	00 0f       	add	r16, r16
     d16:	11 1f       	adc	r17, r17
     d18:	2a 95       	dec	r18
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <gfx_mono_st7565r_draw_pixel+0x40>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     d1c:	68 2f       	mov	r22, r24
     d1e:	8f 2d       	mov	r24, r15
     d20:	40 d0       	rcall	.+128    	; 0xda2 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     d22:	d1 30       	cpi	r29, 0x01	; 1
     d24:	21 f0       	breq	.+8      	; 0xd2e <gfx_mono_st7565r_draw_pixel+0x5a>
     d26:	28 f0       	brcs	.+10     	; 0xd32 <gfx_mono_st7565r_draw_pixel+0x5e>
     d28:	d2 30       	cpi	r29, 0x02	; 2
     d2a:	39 f0       	breq	.+14     	; 0xd3a <gfx_mono_st7565r_draw_pixel+0x66>
     d2c:	07 c0       	rjmp	.+14     	; 0xd3c <gfx_mono_st7565r_draw_pixel+0x68>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     d2e:	80 2b       	or	r24, r16
		break;
     d30:	05 c0       	rjmp	.+10     	; 0xd3c <gfx_mono_st7565r_draw_pixel+0x68>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     d32:	60 2f       	mov	r22, r16
     d34:	60 95       	com	r22
     d36:	86 23       	and	r24, r22
		break;
     d38:	01 c0       	rjmp	.+2      	; 0xd3c <gfx_mono_st7565r_draw_pixel+0x68>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     d3a:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     d3c:	48 2f       	mov	r20, r24
     d3e:	6c 2f       	mov	r22, r28
     d40:	8f 2d       	mov	r24, r15
     d42:	df de       	rcall	.-578    	; 0xb02 <gfx_mono_st7565r_put_byte>
}
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ff 90       	pop	r15
     d4e:	08 95       	ret

00000d50 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     d50:	28 c0       	rjmp	.+80     	; 0xda2 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     d52:	08 95       	ret

00000d54 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     d54:	80 93 38 22 	sts	0x2238, r24
     d58:	90 93 39 22 	sts	0x2239, r25
     d5c:	08 95       	ret

00000d5e <gfx_mono_framebuffer_put_page>:
     d5e:	dc 01       	movw	r26, r24
     d60:	e4 2f       	mov	r30, r20
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	af 01       	movw	r20, r30
     d66:	80 e8       	ldi	r24, 0x80	; 128
     d68:	68 9f       	mul	r22, r24
     d6a:	40 0d       	add	r20, r0
     d6c:	51 1d       	adc	r21, r1
     d6e:	11 24       	eor	r1, r1
     d70:	e0 91 38 22 	lds	r30, 0x2238
     d74:	f0 91 39 22 	lds	r31, 0x2239
     d78:	e4 0f       	add	r30, r20
     d7a:	f5 1f       	adc	r31, r21
     d7c:	8d 91       	ld	r24, X+
     d7e:	81 93       	st	Z+, r24
     d80:	21 50       	subi	r18, 0x01	; 1
     d82:	e1 f7       	brne	.-8      	; 0xd7c <gfx_mono_framebuffer_put_page+0x1e>
     d84:	08 95       	ret

00000d86 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     d86:	20 e8       	ldi	r18, 0x80	; 128
     d88:	82 9f       	mul	r24, r18
     d8a:	c0 01       	movw	r24, r0
     d8c:	11 24       	eor	r1, r1
     d8e:	86 0f       	add	r24, r22
     d90:	91 1d       	adc	r25, r1
     d92:	e0 91 38 22 	lds	r30, 0x2238
     d96:	f0 91 39 22 	lds	r31, 0x2239
     d9a:	e8 0f       	add	r30, r24
     d9c:	f9 1f       	adc	r31, r25
     d9e:	40 83       	st	Z, r20
     da0:	08 95       	ret

00000da2 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     da2:	20 e8       	ldi	r18, 0x80	; 128
     da4:	82 9f       	mul	r24, r18
     da6:	c0 01       	movw	r24, r0
     da8:	11 24       	eor	r1, r1
     daa:	86 0f       	add	r24, r22
     dac:	91 1d       	adc	r25, r1
     dae:	e0 91 38 22 	lds	r30, 0x2238
     db2:	f0 91 39 22 	lds	r31, 0x2239
     db6:	e8 0f       	add	r30, r24
     db8:	f9 1f       	adc	r31, r25
}
     dba:	80 81       	ld	r24, Z
     dbc:	08 95       	ret

00000dbe <gfx_mono_generic_draw_horizontal_line>:
		}

		/* Next X. */
		++offset_x;
	}
}
     dbe:	ff 92       	push	r15
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	e4 2f       	mov	r30, r20
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	e8 0f       	add	r30, r24
     dce:	f1 1d       	adc	r31, r1
     dd0:	e1 38       	cpi	r30, 0x81	; 129
     dd2:	f1 05       	cpc	r31, r1
     dd4:	1c f0       	brlt	.+6      	; 0xddc <gfx_mono_generic_draw_horizontal_line+0x1e>
     dd6:	c0 e8       	ldi	r28, 0x80	; 128
     dd8:	4c 2f       	mov	r20, r28
     dda:	48 1b       	sub	r20, r24
     ddc:	44 23       	and	r20, r20
     dde:	09 f4       	brne	.+2      	; 0xde2 <gfx_mono_generic_draw_horizontal_line+0x24>
     de0:	53 c0       	rjmp	.+166    	; 0xe88 <gfx_mono_generic_draw_horizontal_line+0xca>
     de2:	d6 2f       	mov	r29, r22
     de4:	d6 95       	lsr	r29
     de6:	d6 95       	lsr	r29
     de8:	d6 95       	lsr	r29
     dea:	ed 2f       	mov	r30, r29
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	f1 95       	neg	r31
     df0:	e1 95       	neg	r30
     df2:	f1 09       	sbc	r31, r1
     df4:	ee 0f       	add	r30, r30
     df6:	ff 1f       	adc	r31, r31
     df8:	ee 0f       	add	r30, r30
     dfa:	ff 1f       	adc	r31, r31
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	df 01       	movw	r26, r30
     e02:	a6 0f       	add	r26, r22
     e04:	b1 1d       	adc	r27, r1
     e06:	bd 01       	movw	r22, r26
     e08:	e1 e0       	ldi	r30, 0x01	; 1
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	df 01       	movw	r26, r30
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <gfx_mono_generic_draw_horizontal_line+0x56>
     e10:	aa 0f       	add	r26, r26
     e12:	bb 1f       	adc	r27, r27
     e14:	6a 95       	dec	r22
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <gfx_mono_generic_draw_horizontal_line+0x52>
     e18:	fa 2e       	mov	r15, r26
     e1a:	21 30       	cpi	r18, 0x01	; 1
     e1c:	21 f0       	breq	.+8      	; 0xe26 <gfx_mono_generic_draw_horizontal_line+0x68>
     e1e:	98 f0       	brcs	.+38     	; 0xe46 <gfx_mono_generic_draw_horizontal_line+0x88>
     e20:	22 30       	cpi	r18, 0x02	; 2
     e22:	19 f1       	breq	.+70     	; 0xe6a <gfx_mono_generic_draw_horizontal_line+0xac>
     e24:	31 c0       	rjmp	.+98     	; 0xe88 <gfx_mono_generic_draw_horizontal_line+0xca>
     e26:	c4 2f       	mov	r28, r20
     e28:	1f ef       	ldi	r17, 0xFF	; 255
     e2a:	18 0f       	add	r17, r24
     e2c:	01 2f       	mov	r16, r17
     e2e:	0c 0f       	add	r16, r28
     e30:	60 2f       	mov	r22, r16
     e32:	8d 2f       	mov	r24, r29
     e34:	8d df       	rcall	.-230    	; 0xd50 <gfx_mono_st7565r_get_byte>
     e36:	48 2f       	mov	r20, r24
     e38:	4f 29       	or	r20, r15
     e3a:	60 2f       	mov	r22, r16
     e3c:	8d 2f       	mov	r24, r29
     e3e:	61 de       	rcall	.-830    	; 0xb02 <gfx_mono_st7565r_put_byte>
     e40:	c1 50       	subi	r28, 0x01	; 1
     e42:	a1 f7       	brne	.-24     	; 0xe2c <gfx_mono_generic_draw_horizontal_line+0x6e>
     e44:	21 c0       	rjmp	.+66     	; 0xe88 <gfx_mono_generic_draw_horizontal_line+0xca>
     e46:	c4 2f       	mov	r28, r20
     e48:	1f ef       	ldi	r17, 0xFF	; 255
     e4a:	18 0f       	add	r17, r24
     e4c:	fa 2e       	mov	r15, r26
     e4e:	f0 94       	com	r15
     e50:	01 2f       	mov	r16, r17
     e52:	0c 0f       	add	r16, r28
     e54:	60 2f       	mov	r22, r16
     e56:	8d 2f       	mov	r24, r29
     e58:	7b df       	rcall	.-266    	; 0xd50 <gfx_mono_st7565r_get_byte>
     e5a:	48 2f       	mov	r20, r24
     e5c:	4f 21       	and	r20, r15
     e5e:	60 2f       	mov	r22, r16
     e60:	8d 2f       	mov	r24, r29
     e62:	4f de       	rcall	.-866    	; 0xb02 <gfx_mono_st7565r_put_byte>
     e64:	c1 50       	subi	r28, 0x01	; 1
     e66:	a1 f7       	brne	.-24     	; 0xe50 <gfx_mono_generic_draw_horizontal_line+0x92>
     e68:	0f c0       	rjmp	.+30     	; 0xe88 <gfx_mono_generic_draw_horizontal_line+0xca>
     e6a:	c4 2f       	mov	r28, r20
     e6c:	1f ef       	ldi	r17, 0xFF	; 255
     e6e:	18 0f       	add	r17, r24
     e70:	01 2f       	mov	r16, r17
     e72:	0c 0f       	add	r16, r28
     e74:	60 2f       	mov	r22, r16
     e76:	8d 2f       	mov	r24, r29
     e78:	6b df       	rcall	.-298    	; 0xd50 <gfx_mono_st7565r_get_byte>
     e7a:	48 2f       	mov	r20, r24
     e7c:	4f 25       	eor	r20, r15
     e7e:	60 2f       	mov	r22, r16
     e80:	8d 2f       	mov	r24, r29
     e82:	3f de       	rcall	.-898    	; 0xb02 <gfx_mono_st7565r_put_byte>
     e84:	c1 50       	subi	r28, 0x01	; 1
     e86:	a1 f7       	brne	.-24     	; 0xe70 <gfx_mono_generic_draw_horizontal_line+0xb2>
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	1f 91       	pop	r17
     e8e:	0f 91       	pop	r16
     e90:	ff 90       	pop	r15
     e92:	08 95       	ret

00000e94 <gfx_mono_generic_draw_filled_rect>:
     e94:	ff 92       	push	r15
     e96:	0f 93       	push	r16
     e98:	1f 93       	push	r17
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	22 23       	and	r18, r18
     ea0:	69 f0       	breq	.+26     	; 0xebc <gfx_mono_generic_draw_filled_rect+0x28>
     ea2:	c2 2f       	mov	r28, r18
     ea4:	f4 2e       	mov	r15, r20
     ea6:	18 2f       	mov	r17, r24
     ea8:	df ef       	ldi	r29, 0xFF	; 255
     eaa:	d6 0f       	add	r29, r22
     eac:	6d 2f       	mov	r22, r29
     eae:	6c 0f       	add	r22, r28
     eb0:	20 2f       	mov	r18, r16
     eb2:	4f 2d       	mov	r20, r15
     eb4:	81 2f       	mov	r24, r17
     eb6:	83 df       	rcall	.-250    	; 0xdbe <gfx_mono_generic_draw_horizontal_line>
     eb8:	c1 50       	subi	r28, 0x01	; 1
     eba:	c1 f7       	brne	.-16     	; 0xeac <gfx_mono_generic_draw_filled_rect+0x18>
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	ff 90       	pop	r15
     ec6:	08 95       	ret

00000ec8 <gfx_mono_generic_put_bitmap>:
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
		gfx_coord_t y)
{
     ec8:	bf 92       	push	r11
     eca:	cf 92       	push	r12
     ecc:	df 92       	push	r13
     ece:	ef 92       	push	r14
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	7c 01       	movw	r14, r24
     edc:	d6 2f       	mov	r29, r22
	gfx_coord_t num_pages = bitmap->height / 8;
     ede:	dc 01       	movw	r26, r24
     ee0:	11 96       	adiw	r26, 0x01	; 1
     ee2:	cc 90       	ld	r12, X
     ee4:	11 97       	sbiw	r26, 0x01	; 1
     ee6:	c6 94       	lsr	r12
     ee8:	c6 94       	lsr	r12
     eea:	c6 94       	lsr	r12
	gfx_coord_t page = y / 8;
     eec:	b4 2e       	mov	r11, r20
     eee:	b6 94       	lsr	r11
     ef0:	b6 94       	lsr	r11
     ef2:	b6 94       	lsr	r11
	gfx_coord_t column;
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
     ef4:	12 96       	adiw	r26, 0x02	; 2
     ef6:	8c 91       	ld	r24, X
     ef8:	88 23       	and	r24, r24
     efa:	31 f0       	breq	.+12     	; 0xf08 <gfx_mono_generic_put_bitmap+0x40>
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	09 f0       	breq	.+2      	; 0xf02 <gfx_mono_generic_put_bitmap+0x3a>
     f00:	43 c0       	rjmp	.+134    	; 0xf88 <gfx_mono_generic_put_bitmap+0xc0>
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
     f02:	c1 10       	cpse	r12, r1
     f04:	24 c0       	rjmp	.+72     	; 0xf4e <gfx_mono_generic_put_bitmap+0x86>
     f06:	40 c0       	rjmp	.+128    	; 0xf88 <gfx_mono_generic_put_bitmap+0xc0>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
     f08:	c1 10       	cpse	r12, r1
     f0a:	28 c0       	rjmp	.+80     	; 0xf5c <gfx_mono_generic_put_bitmap+0x94>
     f0c:	3d c0       	rjmp	.+122    	; 0xf88 <gfx_mono_generic_put_bitmap+0xc0>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
     f0e:	c0 e0       	ldi	r28, 0x00	; 0
     f10:	db 2c       	mov	r13, r11
     f12:	d0 0e       	add	r13, r16
				temp = PROGMEM_READ_BYTE(bitmap->data.progmem
     f14:	90 9f       	mul	r25, r16
     f16:	f0 01       	movw	r30, r0
     f18:	91 9f       	mul	r25, r17
     f1a:	f0 0d       	add	r31, r0
     f1c:	11 24       	eor	r1, r1
     f1e:	ec 0f       	add	r30, r28
     f20:	f1 1d       	adc	r31, r1
     f22:	d7 01       	movw	r26, r14
     f24:	13 96       	adiw	r26, 0x03	; 3
     f26:	4d 91       	ld	r20, X+
     f28:	5c 91       	ld	r21, X
     f2a:	14 97       	sbiw	r26, 0x04	; 4
     f2c:	e4 0f       	add	r30, r20
     f2e:	f5 1f       	adc	r31, r21
     f30:	44 91       	lpm	r20, Z
     f32:	6c 2f       	mov	r22, r28
     f34:	6d 0f       	add	r22, r29
						+ (i * bitmap->width)
						+ column);
				gfx_mono_put_byte(i + page, column + x, temp);
     f36:	8d 2d       	mov	r24, r13
     f38:	e4 dd       	rcall	.-1080   	; 0xb02 <gfx_mono_st7565r_put_byte>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
     f3a:	cf 5f       	subi	r28, 0xFF	; 255
     f3c:	f7 01       	movw	r30, r14
     f3e:	90 81       	ld	r25, Z
     f40:	c9 17       	cp	r28, r25
     f42:	40 f3       	brcs	.-48     	; 0xf14 <gfx_mono_generic_put_bitmap+0x4c>
     f44:	0f 5f       	subi	r16, 0xFF	; 255
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
     f48:	0c 15       	cp	r16, r12
     f4a:	18 f0       	brcs	.+6      	; 0xf52 <gfx_mono_generic_put_bitmap+0x8a>
     f4c:	1d c0       	rjmp	.+58     	; 0xf88 <gfx_mono_generic_put_bitmap+0xc0>
     f4e:	00 e0       	ldi	r16, 0x00	; 0
     f50:	10 e0       	ldi	r17, 0x00	; 0
			for (column = 0; column < bitmap->width; column++) {
     f52:	d7 01       	movw	r26, r14
     f54:	9c 91       	ld	r25, X
     f56:	91 11       	cpse	r25, r1
     f58:	da cf       	rjmp	.-76     	; 0xf0e <gfx_mono_generic_put_bitmap+0x46>
     f5a:	f4 cf       	rjmp	.-24     	; 0xf44 <gfx_mono_generic_put_bitmap+0x7c>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
     f5c:	00 e0       	ldi	r16, 0x00	; 0
     f5e:	10 e0       	ldi	r17, 0x00	; 0
			gfx_mono_put_page(bitmap->data.pixmap
     f60:	f7 01       	movw	r30, r14
     f62:	20 81       	ld	r18, Z
     f64:	6b 2d       	mov	r22, r11
     f66:	60 0f       	add	r22, r16
     f68:	20 9f       	mul	r18, r16
     f6a:	c0 01       	movw	r24, r0
     f6c:	21 9f       	mul	r18, r17
     f6e:	90 0d       	add	r25, r0
     f70:	11 24       	eor	r1, r1
     f72:	03 80       	ldd	r0, Z+3	; 0x03
     f74:	f4 81       	ldd	r31, Z+4	; 0x04
     f76:	e0 2d       	mov	r30, r0
     f78:	4d 2f       	mov	r20, r29
     f7a:	8e 0f       	add	r24, r30
     f7c:	9f 1f       	adc	r25, r31
     f7e:	ee dc       	rcall	.-1572   	; 0x95c <gfx_mono_st7565r_put_page>
     f80:	0f 5f       	subi	r16, 0xFF	; 255
     f82:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
     f84:	0c 15       	cp	r16, r12
     f86:	60 f3       	brcs	.-40     	; 0xf60 <gfx_mono_generic_put_bitmap+0x98>
		break;

	default:
		break;
	}
}
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	ff 90       	pop	r15
     f92:	ef 90       	pop	r14
     f94:	df 90       	pop	r13
     f96:	cf 90       	pop	r12
     f98:	bf 90       	pop	r11
     f9a:	08 95       	ret

00000f9c <menu_draw>:
 *
 * \param menu     a menu struct with menu settings
 * \param redraw   clear screen before drawing menu
 */
static void menu_draw(struct gfx_mono_menu *menu, bool redraw)
{
     f9c:	ef 92       	push	r14
     f9e:	ff 92       	push	r15
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	7c 01       	movw	r14, r24
	static bool redraw_state;
	uint8_t i;
	uint8_t line = 1;
	uint8_t menu_page = menu->current_selection /
     faa:	dc 01       	movw	r26, r24
     fac:	15 96       	adiw	r26, 0x05	; 5
     fae:	8c 91       	ld	r24, X
     fb0:	15 97       	sbiw	r26, 0x05	; 5
     fb2:	0b ea       	ldi	r16, 0xAB	; 171
     fb4:	80 9f       	mul	r24, r16
     fb6:	01 2d       	mov	r16, r1
     fb8:	11 24       	eor	r1, r1
     fba:	d0 2f       	mov	r29, r16
     fbc:	d6 95       	lsr	r29
			GFX_MONO_MENU_ELEMENTS_PER_SCREEN;

	if (menu->current_page != menu_page || redraw == true) {
     fbe:	16 96       	adiw	r26, 0x06	; 6
     fc0:	8c 91       	ld	r24, X
     fc2:	8d 13       	cpse	r24, r29
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <menu_draw+0x2e>
     fc6:	66 23       	and	r22, r22
     fc8:	49 f0       	breq	.+18     	; 0xfdc <menu_draw+0x40>
		/* clear screen if we have changed the page or menu and prepare
		 * redraw */
		gfx_mono_draw_filled_rect(0, SYSFONT_LINESPACING,
     fca:	00 e0       	ldi	r16, 0x00	; 0
     fcc:	28 e1       	ldi	r18, 0x18	; 24
     fce:	40 e8       	ldi	r20, 0x80	; 128
     fd0:	68 e0       	ldi	r22, 0x08	; 8
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	5f df       	rcall	.-322    	; 0xe94 <gfx_mono_generic_draw_filled_rect>
				GFX_MONO_LCD_WIDTH,
				GFX_MONO_LCD_HEIGHT - SYSFONT_LINESPACING,
				GFX_PIXEL_CLR);
		redraw_state = true;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	80 93 3a 22 	sts	0x223A, r24
	}

	menu->current_page = menu_page;
     fdc:	f7 01       	movw	r30, r14
     fde:	d6 83       	std	Z+6, r29	; 0x06

	/* Clear old indicator icon */
	gfx_mono_draw_filled_rect(0, SYSFONT_LINESPACING,
     fe0:	00 e0       	ldi	r16, 0x00	; 0
     fe2:	28 e1       	ldi	r18, 0x18	; 24
     fe4:	44 e0       	ldi	r20, 0x04	; 4
     fe6:	68 e0       	ldi	r22, 0x08	; 8
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	54 df       	rcall	.-344    	; 0xe94 <gfx_mono_generic_draw_filled_rect>
			GFX_MONO_MENU_INDICATOR_WIDTH, GFX_MONO_LCD_HEIGHT -
			SYSFONT_LINESPACING, GFX_PIXEL_CLR);

	/* Put indicator icon on current selection */
	gfx_mono_put_bitmap(&menu_bitmap_indicator, 0,
     fec:	d7 01       	movw	r26, r14
     fee:	15 96       	adiw	r26, 0x05	; 5
     ff0:	4c 91       	ld	r20, X
     ff2:	8b ea       	ldi	r24, 0xAB	; 171
     ff4:	48 9f       	mul	r20, r24
     ff6:	81 2d       	mov	r24, r1
     ff8:	11 24       	eor	r1, r1
     ffa:	86 95       	lsr	r24
     ffc:	98 2f       	mov	r25, r24
     ffe:	99 0f       	add	r25, r25
    1000:	89 0f       	add	r24, r25
    1002:	48 1b       	sub	r20, r24
    1004:	44 0f       	add	r20, r20
    1006:	44 0f       	add	r20, r20
    1008:	44 0f       	add	r20, r20
    100a:	48 5f       	subi	r20, 0xF8	; 248
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	90 e2       	ldi	r25, 0x20	; 32
    1012:	5a df       	rcall	.-332    	; 0xec8 <gfx_mono_generic_put_bitmap>
			SYSFONT_LINESPACING * ((menu->current_selection %
			GFX_MONO_MENU_ELEMENTS_PER_SCREEN) + 1));

	/* Print visible options if page or menu has changed */
	if (redraw_state == true) {
    1014:	80 91 3a 22 	lds	r24, 0x223A
    1018:	88 23       	and	r24, r24
    101a:	a9 f1       	breq	.+106    	; 0x1086 <menu_draw+0xea>
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
    101c:	cd 2f       	mov	r28, r29
    101e:	cc 0f       	add	r28, r28
    1020:	cd 0f       	add	r28, r29
				i < menu_page *
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN +
    1022:	0d 2f       	mov	r16, r29
    1024:	10 e0       	ldi	r17, 0x00	; 0
    1026:	0f 5f       	subi	r16, 0xFF	; 255
    1028:	1f 4f       	sbci	r17, 0xFF	; 255
    102a:	c8 01       	movw	r24, r16
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	08 0f       	add	r16, r24
    1032:	19 1f       	adc	r17, r25
			GFX_MONO_MENU_ELEMENTS_PER_SCREEN) + 1));

	/* Print visible options if page or menu has changed */
	if (redraw_state == true) {
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
				i < menu_page *
    1034:	8c 2f       	mov	r24, r28
    1036:	90 e0       	ldi	r25, 0x00	; 0
			SYSFONT_LINESPACING * ((menu->current_selection %
			GFX_MONO_MENU_ELEMENTS_PER_SCREEN) + 1));

	/* Print visible options if page or menu has changed */
	if (redraw_state == true) {
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
    1038:	80 17       	cp	r24, r16
    103a:	91 07       	cpc	r25, r17
    103c:	14 f5       	brge	.+68     	; 0x1082 <menu_draw+0xe6>
				i < menu_page *
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN +
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN &&
    103e:	f7 01       	movw	r30, r14
    1040:	84 81       	ldd	r24, Z+4	; 0x04
    1042:	c8 17       	cp	r28, r24
    1044:	f0 f4       	brcc	.+60     	; 0x1082 <menu_draw+0xe6>
    1046:	d8 e0       	ldi	r29, 0x08	; 8
				i < menu->num_elements; i++) {
			gfx_mono_draw_progmem_string(
					(char PROGMEM_PTR_T)menu->strings[i],
    1048:	ec 2f       	mov	r30, r28
    104a:	f0 e0       	ldi	r31, 0x00	; 0
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
				i < menu_page *
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN +
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN &&
				i < menu->num_elements; i++) {
			gfx_mono_draw_progmem_string(
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	d7 01       	movw	r26, r14
    1052:	12 96       	adiw	r26, 0x02	; 2
    1054:	8d 91       	ld	r24, X+
    1056:	9c 91       	ld	r25, X
    1058:	13 97       	sbiw	r26, 0x03	; 3
    105a:	e8 0f       	add	r30, r24
    105c:	f9 1f       	adc	r31, r25
    105e:	25 e0       	ldi	r18, 0x05	; 5
    1060:	30 e2       	ldi	r19, 0x20	; 32
    1062:	4d 2f       	mov	r20, r29
    1064:	65 e0       	ldi	r22, 0x05	; 5
    1066:	80 81       	ld	r24, Z
    1068:	91 81       	ldd	r25, Z+1	; 0x01
    106a:	e4 d0       	rcall	.+456    	; 0x1234 <gfx_mono_draw_progmem_string>
	if (redraw_state == true) {
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
				i < menu_page *
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN +
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN &&
				i < menu->num_elements; i++) {
    106c:	cf 5f       	subi	r28, 0xFF	; 255
			GFX_MONO_MENU_ELEMENTS_PER_SCREEN) + 1));

	/* Print visible options if page or menu has changed */
	if (redraw_state == true) {
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
				i < menu_page *
    106e:	8c 2f       	mov	r24, r28
    1070:	90 e0       	ldi	r25, 0x00	; 0
			SYSFONT_LINESPACING * ((menu->current_selection %
			GFX_MONO_MENU_ELEMENTS_PER_SCREEN) + 1));

	/* Print visible options if page or menu has changed */
	if (redraw_state == true) {
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
    1072:	80 17       	cp	r24, r16
    1074:	91 07       	cpc	r25, r17
    1076:	2c f4       	brge	.+10     	; 0x1082 <menu_draw+0xe6>
    1078:	d8 5f       	subi	r29, 0xF8	; 248
				i < menu_page *
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN +
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN &&
    107a:	f7 01       	movw	r30, r14
    107c:	84 81       	ldd	r24, Z+4	; 0x04
    107e:	c8 17       	cp	r28, r24
    1080:	18 f3       	brcs	.-58     	; 0x1048 <menu_draw+0xac>
					(char PROGMEM_PTR_T)menu->strings[i],
					GFX_MONO_MENU_INDICATOR_WIDTH + 1,
					line * SYSFONT_LINESPACING, &sysfont);
			line++;
		}
		redraw_state = false;
    1082:	10 92 3a 22 	sts	0x223A, r1
	}
}
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	ff 90       	pop	r15
    1090:	ef 90       	pop	r14
    1092:	08 95       	ret

00001094 <gfx_mono_menu_init>:
 *
 * \param menu  menu struct with menu options
 *
 */
void gfx_mono_menu_init(struct gfx_mono_menu *menu)
{
    1094:	0f 93       	push	r16
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	ec 01       	movw	r28, r24
	/* Clear screen */
	gfx_mono_draw_filled_rect(0, 0,
    109c:	00 e0       	ldi	r16, 0x00	; 0
    109e:	20 e2       	ldi	r18, 0x20	; 32
    10a0:	40 e8       	ldi	r20, 0x80	; 128
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	f6 de       	rcall	.-532    	; 0xe94 <gfx_mono_generic_draw_filled_rect>
			GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT, GFX_PIXEL_CLR);

	/* Draw the menu title on the top of the screen */
	gfx_mono_draw_progmem_string((char PROGMEM_PTR_T)menu->title,
    10a8:	25 e0       	ldi	r18, 0x05	; 5
    10aa:	30 e2       	ldi	r19, 0x20	; 32
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	88 81       	ld	r24, Y
    10b2:	99 81       	ldd	r25, Y+1	; 0x01
    10b4:	bf d0       	rcall	.+382    	; 0x1234 <gfx_mono_draw_progmem_string>
			0, 0, &sysfont);

	/* Draw menu options below */
	menu_draw(menu, true);
    10b6:	61 e0       	ldi	r22, 0x01	; 1
    10b8:	ce 01       	movw	r24, r28
    10ba:	70 df       	rcall	.-288    	; 0xf9c <menu_draw>
}
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	0f 91       	pop	r16
    10c2:	08 95       	ret

000010c4 <gfx_mono_menu_process_key>:
 *
 * \retval selected menu option or status code
 */
uint8_t gfx_mono_menu_process_key(struct gfx_mono_menu *menu, uint8_t keycode)
{
	switch (keycode) {
    10c4:	6d 30       	cpi	r22, 0x0D	; 13
    10c6:	59 f1       	breq	.+86     	; 0x111e <gfx_mono_menu_process_key+0x5a>
    10c8:	18 f4       	brcc	.+6      	; 0x10d0 <gfx_mono_menu_process_key+0xc>
    10ca:	68 30       	cpi	r22, 0x08	; 8
    10cc:	59 f1       	breq	.+86     	; 0x1124 <gfx_mono_menu_process_key+0x60>
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <gfx_mono_menu_process_key+0x16>
    10d0:	fc 01       	movw	r30, r24
    10d2:	66 32       	cpi	r22, 0x26	; 38
    10d4:	b1 f0       	breq	.+44     	; 0x1102 <gfx_mono_menu_process_key+0x3e>
    10d6:	68 32       	cpi	r22, 0x28	; 40
    10d8:	11 f0       	breq	.+4      	; 0x10de <gfx_mono_menu_process_key+0x1a>
		/* User pressed "back" key, inform user */
		return GFX_MONO_MENU_EVENT_EXIT;

	default:
		/* Unknown key event */
		return GFX_MONO_MENU_EVENT_IDLE;
    10da:	8f ef       	ldi	r24, 0xFF	; 255
    10dc:	08 95       	ret
 */
uint8_t gfx_mono_menu_process_key(struct gfx_mono_menu *menu, uint8_t keycode)
{
	switch (keycode) {
	case GFX_MONO_MENU_KEYCODE_DOWN:
		if (menu->current_selection == menu->num_elements - 1) {
    10de:	25 81       	ldd	r18, Z+5	; 0x05
    10e0:	42 2f       	mov	r20, r18
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	84 81       	ldd	r24, Z+4	; 0x04
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	48 17       	cp	r20, r24
    10ec:	59 07       	cpc	r21, r25
    10ee:	11 f4       	brne	.+4      	; 0x10f4 <gfx_mono_menu_process_key+0x30>
			menu->current_selection = 0;
    10f0:	15 82       	std	Z+5, r1	; 0x05
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <gfx_mono_menu_process_key+0x34>
		} else {
			menu->current_selection++;
    10f4:	2f 5f       	subi	r18, 0xFF	; 255
    10f6:	25 83       	std	Z+5, r18	; 0x05
		}

		/* Update menu on display */
		menu_draw(menu, false);
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	cf 01       	movw	r24, r30
    10fc:	4f df       	rcall	.-354    	; 0xf9c <menu_draw>
		/* Nothing selected yet */
		return GFX_MONO_MENU_EVENT_IDLE;
    10fe:	8f ef       	ldi	r24, 0xFF	; 255
    1100:	08 95       	ret

	case GFX_MONO_MENU_KEYCODE_UP:
		if (menu->current_selection) {
    1102:	85 81       	ldd	r24, Z+5	; 0x05
    1104:	88 23       	and	r24, r24
    1106:	19 f0       	breq	.+6      	; 0x110e <gfx_mono_menu_process_key+0x4a>
			menu->current_selection--;
    1108:	81 50       	subi	r24, 0x01	; 1
    110a:	85 83       	std	Z+5, r24	; 0x05
    110c:	03 c0       	rjmp	.+6      	; 0x1114 <gfx_mono_menu_process_key+0x50>
		} else {
			menu->current_selection = menu->num_elements - 1;
    110e:	84 81       	ldd	r24, Z+4	; 0x04
    1110:	81 50       	subi	r24, 0x01	; 1
    1112:	85 83       	std	Z+5, r24	; 0x05
		}

		/* Update menu on display */
		menu_draw(menu, false);
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	cf 01       	movw	r24, r30
    1118:	41 df       	rcall	.-382    	; 0xf9c <menu_draw>
		/* Nothing selected yet */
		return GFX_MONO_MENU_EVENT_IDLE;
    111a:	8f ef       	ldi	r24, 0xFF	; 255
    111c:	08 95       	ret

	case GFX_MONO_MENU_KEYCODE_ENTER:
		/* Got what we want. Return selection. */
		return menu->current_selection;
    111e:	fc 01       	movw	r30, r24
    1120:	85 81       	ldd	r24, Z+5	; 0x05
    1122:	08 95       	ret

	case GFX_MONO_MENU_KEYCODE_BACK:
		/* User pressed "back" key, inform user */
		return GFX_MONO_MENU_EVENT_EXIT;
    1124:	8e ef       	ldi	r24, 0xFE	; 254

	default:
		/* Unknown key event */
		return GFX_MONO_MENU_EVENT_IDLE;
	}
}
    1126:	08 95       	ret

00001128 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    1128:	af 92       	push	r10
    112a:	bf 92       	push	r11
    112c:	cf 92       	push	r12
    112e:	df 92       	push	r13
    1130:	ef 92       	push	r14
    1132:	ff 92       	push	r15
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	c8 2f       	mov	r28, r24
    113e:	e6 2e       	mov	r14, r22
    1140:	b4 2e       	mov	r11, r20
    1142:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    1144:	00 e0       	ldi	r16, 0x00	; 0
    1146:	f9 01       	movw	r30, r18
    1148:	24 81       	ldd	r18, Z+4	; 0x04
    114a:	43 81       	ldd	r20, Z+3	; 0x03
    114c:	6b 2d       	mov	r22, r11
    114e:	8e 2d       	mov	r24, r14
    1150:	a1 de       	rcall	.-702    	; 0xe94 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    1152:	f6 01       	movw	r30, r12
    1154:	80 81       	ld	r24, Z
    1156:	81 11       	cpse	r24, r1
    1158:	39 c0       	rjmp	.+114    	; 0x11cc <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    115a:	83 81       	ldd	r24, Z+3	; 0x03
    115c:	28 2f       	mov	r18, r24
    115e:	26 95       	lsr	r18
    1160:	26 95       	lsr	r18
    1162:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    1164:	87 70       	andi	r24, 0x07	; 7
    1166:	09 f0       	breq	.+2      	; 0x116a <gfx_mono_draw_char+0x42>
		char_row_size++;
    1168:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    116a:	f6 01       	movw	r30, r12
    116c:	a4 80       	ldd	r10, Z+4	; 0x04
    116e:	2a 9d       	mul	r18, r10
    1170:	90 01       	movw	r18, r0
    1172:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
    1174:	8c 2f       	mov	r24, r28
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	45 81       	ldd	r20, Z+5	; 0x05
    117a:	84 1b       	sub	r24, r20
    117c:	91 09       	sbc	r25, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
    117e:	28 9f       	mul	r18, r24
    1180:	a0 01       	movw	r20, r0
    1182:	29 9f       	mul	r18, r25
    1184:	50 0d       	add	r21, r0
    1186:	38 9f       	mul	r19, r24
    1188:	50 0d       	add	r21, r0
    118a:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    118c:	01 81       	ldd	r16, Z+1	; 0x01
    118e:	12 81       	ldd	r17, Z+2	; 0x02
    1190:	04 0f       	add	r16, r20
    1192:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    1194:	f6 01       	movw	r30, r12
    1196:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    1198:	ff 20       	and	r15, r15
    119a:	a1 f0       	breq	.+40     	; 0x11c4 <gfx_mono_draw_char+0x9c>
    119c:	d0 e0       	ldi	r29, 0x00	; 0
    119e:	c0 e0       	ldi	r28, 0x00	; 0
    11a0:	8c 2f       	mov	r24, r28
    11a2:	8e 0d       	add	r24, r14
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    11a4:	9c 2f       	mov	r25, r28
    11a6:	97 70       	andi	r25, 0x07	; 7
    11a8:	21 f4       	brne	.+8      	; 0x11b2 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    11aa:	f8 01       	movw	r30, r16
    11ac:	d4 91       	lpm	r29, Z
				glyph_data++;
    11ae:	0f 5f       	subi	r16, 0xFF	; 255
    11b0:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    11b2:	dd 23       	and	r29, r29
    11b4:	1c f4       	brge	.+6      	; 0x11bc <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
    11b6:	41 e0       	ldi	r20, 0x01	; 1
    11b8:	6b 2d       	mov	r22, r11
    11ba:	8c dd       	rcall	.-1256   	; 0xcd4 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    11bc:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    11be:	cf 5f       	subi	r28, 0xFF	; 255
    11c0:	cf 11       	cpse	r28, r15
    11c2:	ee cf       	rjmp	.-36     	; 0x11a0 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    11c4:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    11c6:	aa 94       	dec	r10
	} while (rows_left > 0);
    11c8:	a1 10       	cpse	r10, r1
    11ca:	e4 cf       	rjmp	.-56     	; 0x1194 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	ff 90       	pop	r15
    11d6:	ef 90       	pop	r14
    11d8:	df 90       	pop	r13
    11da:	cf 90       	pop	r12
    11dc:	bf 90       	pop	r11
    11de:	af 90       	pop	r10
    11e0:	08 95       	ret

000011e2 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    11e2:	df 92       	push	r13
    11e4:	ef 92       	push	r14
    11e6:	ff 92       	push	r15
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	04 2f       	mov	r16, r20
    11f2:	79 01       	movw	r14, r18
    11f4:	ec 01       	movw	r28, r24
    11f6:	16 2f       	mov	r17, r22

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    11f8:	d6 2e       	mov	r13, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    11fa:	89 91       	ld	r24, Y+
    11fc:	8a 30       	cpi	r24, 0x0A	; 10
    11fe:	31 f4       	brne	.+12     	; 0x120c <gfx_mono_draw_string+0x2a>
    1200:	f7 01       	movw	r30, r14
    1202:	84 81       	ldd	r24, Z+4	; 0x04
    1204:	8f 5f       	subi	r24, 0xFF	; 255
			x = start_of_string_position_x;
			y += font->height + 1;
    1206:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1208:	1d 2d       	mov	r17, r13
    120a:	09 c0       	rjmp	.+18     	; 0x121e <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    120c:	8d 30       	cpi	r24, 0x0D	; 13
    120e:	39 f0       	breq	.+14     	; 0x121e <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    1210:	97 01       	movw	r18, r14
    1212:	40 2f       	mov	r20, r16
    1214:	61 2f       	mov	r22, r17
    1216:	88 df       	rcall	.-240    	; 0x1128 <gfx_mono_draw_char>
			x += font->width;
    1218:	f7 01       	movw	r30, r14
    121a:	83 81       	ldd	r24, Z+3	; 0x03
    121c:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    121e:	88 81       	ld	r24, Y
    1220:	81 11       	cpse	r24, r1
    1222:	eb cf       	rjmp	.-42     	; 0x11fa <gfx_mono_draw_string+0x18>
}
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	ff 90       	pop	r15
    122e:	ef 90       	pop	r14
    1230:	df 90       	pop	r13
    1232:	08 95       	ret

00001234 <gfx_mono_draw_progmem_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_progmem_string(char PROGMEM_PTR_T str, gfx_coord_t x,
		gfx_coord_t y, const struct font *font)
{
    1234:	df 92       	push	r13
    1236:	ef 92       	push	r14
    1238:	ff 92       	push	r15
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	ec 01       	movw	r28, r24
    1244:	04 2f       	mov	r16, r20
    1246:	79 01       	movw	r14, r18

	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;

	/* Draw characters until trailing null byte */
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);
    1248:	fc 01       	movw	r30, r24
    124a:	94 91       	lpm	r25, Z
    124c:	89 2f       	mov	r24, r25

	while (temp_char) {
    124e:	99 23       	and	r25, r25
    1250:	c1 f0       	breq	.+48     	; 0x1282 <gfx_mono_draw_progmem_string+0x4e>
    1252:	16 2f       	mov	r17, r22
		/* Handle '\n' as newline, draw normal characters. */
		if (temp_char == '\n') {
			x = start_of_string_position_x;
    1254:	d6 2e       	mov	r13, r22
	/* Draw characters until trailing null byte */
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);

	while (temp_char) {
		/* Handle '\n' as newline, draw normal characters. */
		if (temp_char == '\n') {
    1256:	8a 30       	cpi	r24, 0x0A	; 10
    1258:	31 f4       	brne	.+12     	; 0x1266 <gfx_mono_draw_progmem_string+0x32>
    125a:	f7 01       	movw	r30, r14
    125c:	84 81       	ldd	r24, Z+4	; 0x04
    125e:	8f 5f       	subi	r24, 0xFF	; 255
			x = start_of_string_position_x;
			y += font->height + 1;
    1260:	08 0f       	add	r16, r24
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);

	while (temp_char) {
		/* Handle '\n' as newline, draw normal characters. */
		if (temp_char == '\n') {
			x = start_of_string_position_x;
    1262:	1d 2d       	mov	r17, r13
    1264:	09 c0       	rjmp	.+18     	; 0x1278 <gfx_mono_draw_progmem_string+0x44>
			y += font->height + 1;
		} else if (temp_char == '\r') {
    1266:	8d 30       	cpi	r24, 0x0D	; 13
    1268:	39 f0       	breq	.+14     	; 0x1278 <gfx_mono_draw_progmem_string+0x44>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(temp_char, x, y, font);
    126a:	97 01       	movw	r18, r14
    126c:	40 2f       	mov	r20, r16
    126e:	61 2f       	mov	r22, r17
    1270:	5b df       	rcall	.-330    	; 0x1128 <gfx_mono_draw_char>
			x += font->width;
    1272:	f7 01       	movw	r30, r14
    1274:	83 81       	ldd	r24, Z+3	; 0x03
    1276:	18 0f       	add	r17, r24
		}

		temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)(++str));
    1278:	21 96       	adiw	r28, 0x01	; 1
    127a:	fe 01       	movw	r30, r28
    127c:	84 91       	lpm	r24, Z
	const gfx_coord_t start_of_string_position_x = x;

	/* Draw characters until trailing null byte */
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);

	while (temp_char) {
    127e:	81 11       	cpse	r24, r1
    1280:	ea cf       	rjmp	.-44     	; 0x1256 <gfx_mono_draw_progmem_string+0x22>
			x += font->width;
		}

		temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)(++str));
	}
}
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	ff 90       	pop	r15
    128c:	ef 90       	pop	r14
    128e:	df 90       	pop	r13
    1290:	08 95       	ret

00001292 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    1292:	80 3a       	cpi	r24, 0xA0	; 160
    1294:	28 e0       	ldi	r18, 0x08	; 8
    1296:	92 07       	cpc	r25, r18
    1298:	21 f4       	brne	.+8      	; 0x12a2 <usart_spi_init+0x10>
    129a:	60 e1       	ldi	r22, 0x10	; 16
    129c:	83 e0       	ldi	r24, 0x03	; 3
    129e:	52 cb       	rjmp	.-2396   	; 0x944 <sysclk_enable_module>
    12a0:	08 95       	ret
    12a2:	80 3b       	cpi	r24, 0xB0	; 176
    12a4:	28 e0       	ldi	r18, 0x08	; 8
    12a6:	92 07       	cpc	r25, r18
    12a8:	21 f4       	brne	.+8      	; 0x12b2 <usart_spi_init+0x20>
    12aa:	60 e2       	ldi	r22, 0x20	; 32
    12ac:	83 e0       	ldi	r24, 0x03	; 3
    12ae:	4a cb       	rjmp	.-2412   	; 0x944 <sysclk_enable_module>
    12b0:	08 95       	ret
    12b2:	80 3a       	cpi	r24, 0xA0	; 160
    12b4:	29 e0       	ldi	r18, 0x09	; 9
    12b6:	92 07       	cpc	r25, r18
    12b8:	21 f4       	brne	.+8      	; 0x12c2 <usart_spi_init+0x30>
    12ba:	60 e1       	ldi	r22, 0x10	; 16
    12bc:	84 e0       	ldi	r24, 0x04	; 4
    12be:	42 cb       	rjmp	.-2428   	; 0x944 <sysclk_enable_module>
    12c0:	08 95       	ret
    12c2:	80 3b       	cpi	r24, 0xB0	; 176
    12c4:	29 e0       	ldi	r18, 0x09	; 9
    12c6:	92 07       	cpc	r25, r18
    12c8:	21 f4       	brne	.+8      	; 0x12d2 <usart_spi_init+0x40>
    12ca:	60 e2       	ldi	r22, 0x20	; 32
    12cc:	84 e0       	ldi	r24, 0x04	; 4
    12ce:	3a cb       	rjmp	.-2444   	; 0x944 <sysclk_enable_module>
    12d0:	08 95       	ret
    12d2:	80 3a       	cpi	r24, 0xA0	; 160
    12d4:	2a e0       	ldi	r18, 0x0A	; 10
    12d6:	92 07       	cpc	r25, r18
    12d8:	21 f4       	brne	.+8      	; 0x12e2 <usart_spi_init+0x50>
    12da:	60 e1       	ldi	r22, 0x10	; 16
    12dc:	85 e0       	ldi	r24, 0x05	; 5
    12de:	32 cb       	rjmp	.-2460   	; 0x944 <sysclk_enable_module>
    12e0:	08 95       	ret
    12e2:	80 3a       	cpi	r24, 0xA0	; 160
    12e4:	9b 40       	sbci	r25, 0x0B	; 11
    12e6:	19 f4       	brne	.+6      	; 0x12ee <usart_spi_init+0x5c>
    12e8:	60 e1       	ldi	r22, 0x10	; 16
    12ea:	86 e0       	ldi	r24, 0x06	; 6
    12ec:	2b cb       	rjmp	.-2474   	; 0x944 <sysclk_enable_module>
    12ee:	08 95       	ret

000012f0 <usart_spi_setup_device>:
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <usart_spi_setup_device+0xa>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <usart_spi_setup_device+0xc>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	09 83       	std	Y+1, r16	; 0x01
    1302:	1a 83       	std	Y+2, r17	; 0x02
    1304:	2b 83       	std	Y+3, r18	; 0x03
    1306:	3c 83       	std	Y+4, r19	; 0x04
    1308:	4d 83       	std	Y+5, r20	; 0x05
    130a:	1e 82       	std	Y+6, r1	; 0x06
    130c:	be 01       	movw	r22, r28
    130e:	6f 5f       	subi	r22, 0xFF	; 255
    1310:	7f 4f       	sbci	r23, 0xFF	; 255
    1312:	2a d1       	rcall	.+596    	; 0x1568 <usart_init_spi>
    1314:	26 96       	adiw	r28, 0x06	; 6
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	1f 91       	pop	r17
    1320:	0f 91       	pop	r16
    1322:	08 95       	ret

00001324 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    1324:	fb 01       	movw	r30, r22
    1326:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    1328:	e8 2f       	mov	r30, r24
    132a:	e6 95       	lsr	r30
    132c:	e6 95       	lsr	r30
    132e:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    1330:	40 e2       	ldi	r20, 0x20	; 32
    1332:	e4 9f       	mul	r30, r20
    1334:	f0 01       	movw	r30, r0
    1336:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1338:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    133a:	87 70       	andi	r24, 0x07	; 7
    133c:	21 e0       	ldi	r18, 0x01	; 1
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	a9 01       	movw	r20, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <usart_spi_select_device+0x24>
    1344:	44 0f       	add	r20, r20
    1346:	55 1f       	adc	r21, r21
    1348:	8a 95       	dec	r24
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    134c:	46 83       	std	Z+6, r20	; 0x06
    134e:	08 95       	ret

00001350 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    1350:	fb 01       	movw	r30, r22
    1352:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    1354:	e8 2f       	mov	r30, r24
    1356:	e6 95       	lsr	r30
    1358:	e6 95       	lsr	r30
    135a:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    135c:	40 e2       	ldi	r20, 0x20	; 32
    135e:	e4 9f       	mul	r30, r20
    1360:	f0 01       	movw	r30, r0
    1362:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1364:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1366:	87 70       	andi	r24, 0x07	; 7
    1368:	21 e0       	ldi	r18, 0x01	; 1
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	a9 01       	movw	r20, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <usart_spi_deselect_device+0x24>
    1370:	44 0f       	add	r20, r20
    1372:	55 1f       	adc	r21, r21
    1374:	8a 95       	dec	r24
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1378:	45 83       	std	Z+5, r20	; 0x05
    137a:	08 95       	ret

0000137c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	fc 01       	movw	r30, r24
    1382:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1388:	c6 2f       	mov	r28, r22
    138a:	d0 e0       	ldi	r29, 0x00	; 0
    138c:	de 01       	movw	r26, r28
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <ioport_configure_port_pin+0x1a>
    1392:	b5 95       	asr	r27
    1394:	a7 95       	ror	r26
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <ioport_configure_port_pin+0x16>
    139a:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    139c:	50 83       	st	Z, r21
    139e:	2f 5f       	subi	r18, 0xFF	; 255
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
    13a2:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    13a4:	28 30       	cpi	r18, 0x08	; 8
    13a6:	31 05       	cpc	r19, r1
    13a8:	89 f7       	brne	.-30     	; 0x138c <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    13aa:	40 ff       	sbrs	r20, 0
    13ac:	0a c0       	rjmp	.+20     	; 0x13c2 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    13ae:	41 ff       	sbrs	r20, 1
    13b0:	03 c0       	rjmp	.+6      	; 0x13b8 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    13b2:	fc 01       	movw	r30, r24
    13b4:	65 83       	std	Z+5, r22	; 0x05
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    13b8:	fc 01       	movw	r30, r24
    13ba:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    13bc:	fc 01       	movw	r30, r24
    13be:	61 83       	std	Z+1, r22	; 0x01
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    13c2:	fc 01       	movw	r30, r24
    13c4:	62 83       	std	Z+2, r22	; 0x02
	}
}
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	08 95       	ret

000013cc <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    13cc:	43 e0       	ldi	r20, 0x03	; 3
    13ce:	50 e0       	ldi	r21, 0x00	; 0
    13d0:	61 e0       	ldi	r22, 0x01	; 1
    13d2:	80 ee       	ldi	r24, 0xE0	; 224
    13d4:	97 e0       	ldi	r25, 0x07	; 7
    13d6:	d2 df       	rcall	.-92     	; 0x137c <ioport_configure_port_pin>
    13d8:	43 e0       	ldi	r20, 0x03	; 3
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	62 e0       	ldi	r22, 0x02	; 2
    13de:	80 ee       	ldi	r24, 0xE0	; 224
    13e0:	97 e0       	ldi	r25, 0x07	; 7
    13e2:	cc df       	rcall	.-104    	; 0x137c <ioport_configure_port_pin>
    13e4:	43 e0       	ldi	r20, 0x03	; 3
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	60 e1       	ldi	r22, 0x10	; 16
    13ea:	80 e6       	ldi	r24, 0x60	; 96
    13ec:	96 e0       	ldi	r25, 0x06	; 6
    13ee:	c6 df       	rcall	.-116    	; 0x137c <ioport_configure_port_pin>
    13f0:	41 e0       	ldi	r20, 0x01	; 1
    13f2:	50 e4       	ldi	r21, 0x40	; 64
    13f4:	60 e2       	ldi	r22, 0x20	; 32
    13f6:	80 e6       	ldi	r24, 0x60	; 96
    13f8:	96 e0       	ldi	r25, 0x06	; 6
    13fa:	c0 df       	rcall	.-128    	; 0x137c <ioport_configure_port_pin>
    13fc:	40 e0       	ldi	r20, 0x00	; 0
    13fe:	5b e1       	ldi	r21, 0x1B	; 27
    1400:	60 e2       	ldi	r22, 0x20	; 32
    1402:	80 e8       	ldi	r24, 0x80	; 128
    1404:	96 e0       	ldi	r25, 0x06	; 6
    1406:	ba df       	rcall	.-140    	; 0x137c <ioport_configure_port_pin>
    1408:	40 e0       	ldi	r20, 0x00	; 0
    140a:	5b e1       	ldi	r21, 0x1B	; 27
    140c:	62 e0       	ldi	r22, 0x02	; 2
    140e:	80 ea       	ldi	r24, 0xA0	; 160
    1410:	96 e0       	ldi	r25, 0x06	; 6
    1412:	b4 df       	rcall	.-152    	; 0x137c <ioport_configure_port_pin>
    1414:	40 e0       	ldi	r20, 0x00	; 0
    1416:	5b e1       	ldi	r21, 0x1B	; 27
    1418:	64 e0       	ldi	r22, 0x04	; 4
    141a:	80 ea       	ldi	r24, 0xA0	; 160
    141c:	96 e0       	ldi	r25, 0x06	; 6
    141e:	ae df       	rcall	.-164    	; 0x137c <ioport_configure_port_pin>
    1420:	43 e0       	ldi	r20, 0x03	; 3
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	62 e0       	ldi	r22, 0x02	; 2
    1426:	80 e6       	ldi	r24, 0x60	; 96
    1428:	96 e0       	ldi	r25, 0x06	; 6
    142a:	a8 df       	rcall	.-176    	; 0x137c <ioport_configure_port_pin>
    142c:	43 e0       	ldi	r20, 0x03	; 3
    142e:	50 e0       	ldi	r21, 0x00	; 0
    1430:	68 e0       	ldi	r22, 0x08	; 8
    1432:	80 e6       	ldi	r24, 0x60	; 96
    1434:	96 e0       	ldi	r25, 0x06	; 6
    1436:	a2 df       	rcall	.-188    	; 0x137c <ioport_configure_port_pin>
    1438:	43 e0       	ldi	r20, 0x03	; 3
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	68 e0       	ldi	r22, 0x08	; 8
    143e:	80 ea       	ldi	r24, 0xA0	; 160
    1440:	96 e0       	ldi	r25, 0x06	; 6
    1442:	9c df       	rcall	.-200    	; 0x137c <ioport_configure_port_pin>
    1444:	43 e0       	ldi	r20, 0x03	; 3
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	61 e0       	ldi	r22, 0x01	; 1
    144a:	80 e6       	ldi	r24, 0x60	; 96
    144c:	96 e0       	ldi	r25, 0x06	; 6
    144e:	96 df       	rcall	.-212    	; 0x137c <ioport_configure_port_pin>
    1450:	43 e0       	ldi	r20, 0x03	; 3
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	68 e0       	ldi	r22, 0x08	; 8
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	96 e0       	ldi	r25, 0x06	; 6
    145a:	90 df       	rcall	.-224    	; 0x137c <ioport_configure_port_pin>
    145c:	41 e0       	ldi	r20, 0x01	; 1
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	60 e1       	ldi	r22, 0x10	; 16
    1462:	80 e8       	ldi	r24, 0x80	; 128
    1464:	96 e0       	ldi	r25, 0x06	; 6
    1466:	8a df       	rcall	.-236    	; 0x137c <ioport_configure_port_pin>
    1468:	43 e0       	ldi	r20, 0x03	; 3
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	62 e0       	ldi	r22, 0x02	; 2
    146e:	80 e6       	ldi	r24, 0x60	; 96
    1470:	96 e0       	ldi	r25, 0x06	; 6
    1472:	84 df       	rcall	.-248    	; 0x137c <ioport_configure_port_pin>
    1474:	43 e0       	ldi	r20, 0x03	; 3
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	68 e0       	ldi	r22, 0x08	; 8
    147a:	80 e6       	ldi	r24, 0x60	; 96
    147c:	96 e0       	ldi	r25, 0x06	; 6
    147e:	7e df       	rcall	.-260    	; 0x137c <ioport_configure_port_pin>
    1480:	40 e0       	ldi	r20, 0x00	; 0
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	64 e0       	ldi	r22, 0x04	; 4
    1486:	80 e6       	ldi	r24, 0x60	; 96
    1488:	96 e0       	ldi	r25, 0x06	; 6
    148a:	78 df       	rcall	.-272    	; 0x137c <ioport_configure_port_pin>
    148c:	43 e0       	ldi	r20, 0x03	; 3
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	60 e1       	ldi	r22, 0x10	; 16
    1492:	80 ea       	ldi	r24, 0xA0	; 160
    1494:	96 e0       	ldi	r25, 0x06	; 6
    1496:	72 df       	rcall	.-284    	; 0x137c <ioport_configure_port_pin>
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	96 e0       	ldi	r25, 0x06	; 6
    14a2:	6c df       	rcall	.-296    	; 0x137c <ioport_configure_port_pin>
    14a4:	40 e0       	ldi	r20, 0x00	; 0
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	64 e0       	ldi	r22, 0x04	; 4
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	96 e0       	ldi	r25, 0x06	; 6
    14ae:	66 df       	rcall	.-308    	; 0x137c <ioport_configure_port_pin>
    14b0:	40 e0       	ldi	r20, 0x00	; 0
    14b2:	50 e0       	ldi	r21, 0x00	; 0
    14b4:	62 e0       	ldi	r22, 0x02	; 2
    14b6:	80 e2       	ldi	r24, 0x20	; 32
    14b8:	96 e0       	ldi	r25, 0x06	; 6
    14ba:	60 df       	rcall	.-320    	; 0x137c <ioport_configure_port_pin>
    14bc:	43 e0       	ldi	r20, 0x03	; 3
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	68 e0       	ldi	r22, 0x08	; 8
    14c2:	80 e4       	ldi	r24, 0x40	; 64
    14c4:	96 e0       	ldi	r25, 0x06	; 6
    14c6:	5a df       	rcall	.-332    	; 0x137c <ioport_configure_port_pin>
    14c8:	40 e0       	ldi	r20, 0x00	; 0
    14ca:	50 e0       	ldi	r21, 0x00	; 0
    14cc:	64 e0       	ldi	r22, 0x04	; 4
    14ce:	80 e4       	ldi	r24, 0x40	; 64
    14d0:	96 e0       	ldi	r25, 0x06	; 6
    14d2:	54 df       	rcall	.-344    	; 0x137c <ioport_configure_port_pin>
    14d4:	43 e0       	ldi	r20, 0x03	; 3
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	68 e0       	ldi	r22, 0x08	; 8
    14da:	80 e6       	ldi	r24, 0x60	; 96
    14dc:	96 e0       	ldi	r25, 0x06	; 6
    14de:	4e df       	rcall	.-356    	; 0x137c <ioport_configure_port_pin>
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	64 e0       	ldi	r22, 0x04	; 4
    14e6:	80 e6       	ldi	r24, 0x60	; 96
    14e8:	96 e0       	ldi	r25, 0x06	; 6
    14ea:	48 df       	rcall	.-368    	; 0x137c <ioport_configure_port_pin>
    14ec:	43 e0       	ldi	r20, 0x03	; 3
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	68 e0       	ldi	r22, 0x08	; 8
    14f2:	80 e8       	ldi	r24, 0x80	; 128
    14f4:	96 e0       	ldi	r25, 0x06	; 6
    14f6:	42 df       	rcall	.-380    	; 0x137c <ioport_configure_port_pin>
    14f8:	40 e0       	ldi	r20, 0x00	; 0
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	64 e0       	ldi	r22, 0x04	; 4
    14fe:	80 e8       	ldi	r24, 0x80	; 128
    1500:	96 e0       	ldi	r25, 0x06	; 6
    1502:	3c cf       	rjmp	.-392    	; 0x137c <ioport_configure_port_pin>
    1504:	08 95       	ret

00001506 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1506:	cf 92       	push	r12
    1508:	df 92       	push	r13
    150a:	ef 92       	push	r14
    150c:	ff 92       	push	r15
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    1518:	d9 01       	movw	r26, r18
    151a:	c8 01       	movw	r24, r16
    151c:	b6 95       	lsr	r27
    151e:	a7 95       	ror	r26
    1520:	97 95       	ror	r25
    1522:	87 95       	ror	r24
    1524:	48 17       	cp	r20, r24
    1526:	59 07       	cpc	r21, r25
    1528:	6a 07       	cpc	r22, r26
    152a:	7b 07       	cpc	r23, r27
    152c:	70 f4       	brcc	.+28     	; 0x154a <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    152e:	6a 01       	movw	r12, r20
    1530:	7b 01       	movw	r14, r22
    1532:	cc 0c       	add	r12, r12
    1534:	dd 1c       	adc	r13, r13
    1536:	ee 1c       	adc	r14, r14
    1538:	ff 1c       	adc	r15, r15
    153a:	c9 01       	movw	r24, r18
    153c:	b8 01       	movw	r22, r16
    153e:	a7 01       	movw	r20, r14
    1540:	96 01       	movw	r18, r12
    1542:	cf d2       	rcall	.+1438   	; 0x1ae2 <__udivmodsi4>
    1544:	21 50       	subi	r18, 0x01	; 1
    1546:	31 09       	sbc	r19, r1
    1548:	02 c0       	rjmp	.+4      	; 0x154e <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    154e:	83 2f       	mov	r24, r19
    1550:	8f 70       	andi	r24, 0x0F	; 15
    1552:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    1554:	2e 83       	std	Y+6, r18	; 0x06
}
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	1f 91       	pop	r17
    155c:	0f 91       	pop	r16
    155e:	ff 90       	pop	r15
    1560:	ef 90       	pop	r14
    1562:	df 90       	pop	r13
    1564:	cf 90       	pop	r12
    1566:	08 95       	ret

00001568 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1568:	ef 92       	push	r14
    156a:	ff 92       	push	r15
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	ec 01       	movw	r28, r24
    1576:	7b 01       	movw	r14, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	09 f4       	brne	.+2      	; 0x157e <usart_init_spi+0x16>
    157c:	7b c1       	rjmp	.+758    	; 0x1874 <usart_init_spi+0x30c>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    157e:	80 3c       	cpi	r24, 0xC0	; 192
    1580:	91 05       	cpc	r25, r1
    1582:	21 f4       	brne	.+8      	; 0x158c <usart_init_spi+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1584:	60 e1       	ldi	r22, 0x10	; 16
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	dd d9       	rcall	.-3142   	; 0x944 <sysclk_enable_module>
    158a:	74 c1       	rjmp	.+744    	; 0x1874 <usart_init_spi+0x30c>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    158c:	80 38       	cpi	r24, 0x80	; 128
    158e:	91 40       	sbci	r25, 0x01	; 1
    1590:	21 f4       	brne	.+8      	; 0x159a <usart_init_spi+0x32>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1592:	62 e0       	ldi	r22, 0x02	; 2
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	d6 d9       	rcall	.-3156   	; 0x944 <sysclk_enable_module>
    1598:	6d c1       	rjmp	.+730    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    159a:	c1 15       	cp	r28, r1
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	d8 07       	cpc	r29, r24
    15a0:	21 f4       	brne	.+8      	; 0x15aa <usart_init_spi+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    15a2:	61 e0       	ldi	r22, 0x01	; 1
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	ce d9       	rcall	.-3172   	; 0x944 <sysclk_enable_module>
    15a8:	65 c1       	rjmp	.+714    	; 0x1874 <usart_init_spi+0x30c>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    15aa:	c0 38       	cpi	r28, 0x80	; 128
    15ac:	e3 e0       	ldi	r30, 0x03	; 3
    15ae:	de 07       	cpc	r29, r30
    15b0:	21 f4       	brne	.+8      	; 0x15ba <usart_init_spi+0x52>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    15b2:	61 e0       	ldi	r22, 0x01	; 1
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	c6 d9       	rcall	.-3188   	; 0x944 <sysclk_enable_module>
    15b8:	5d c1       	rjmp	.+698    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    15ba:	c0 39       	cpi	r28, 0x90	; 144
    15bc:	f3 e0       	ldi	r31, 0x03	; 3
    15be:	df 07       	cpc	r29, r31
    15c0:	21 f4       	brne	.+8      	; 0x15ca <usart_init_spi+0x62>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    15c2:	61 e0       	ldi	r22, 0x01	; 1
    15c4:	82 e0       	ldi	r24, 0x02	; 2
    15c6:	be d9       	rcall	.-3204   	; 0x944 <sysclk_enable_module>
    15c8:	55 c1       	rjmp	.+682    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    15ca:	c1 15       	cp	r28, r1
    15cc:	32 e0       	ldi	r19, 0x02	; 2
    15ce:	d3 07       	cpc	r29, r19
    15d0:	21 f4       	brne	.+8      	; 0x15da <usart_init_spi+0x72>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    15d2:	62 e0       	ldi	r22, 0x02	; 2
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	b6 d9       	rcall	.-3220   	; 0x944 <sysclk_enable_module>
    15d8:	4d c1       	rjmp	.+666    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    15da:	c0 34       	cpi	r28, 0x40	; 64
    15dc:	82 e0       	ldi	r24, 0x02	; 2
    15de:	d8 07       	cpc	r29, r24
    15e0:	21 f4       	brne	.+8      	; 0x15ea <usart_init_spi+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    15e2:	62 e0       	ldi	r22, 0x02	; 2
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	ae d9       	rcall	.-3236   	; 0x944 <sysclk_enable_module>
    15e8:	45 c1       	rjmp	.+650    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    15ea:	c0 32       	cpi	r28, 0x20	; 32
    15ec:	e3 e0       	ldi	r30, 0x03	; 3
    15ee:	de 07       	cpc	r29, r30
    15f0:	21 f4       	brne	.+8      	; 0x15fa <usart_init_spi+0x92>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    15f2:	64 e0       	ldi	r22, 0x04	; 4
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	a6 d9       	rcall	.-3252   	; 0x944 <sysclk_enable_module>
    15f8:	3d c1       	rjmp	.+634    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    15fa:	c1 15       	cp	r28, r1
    15fc:	f8 e0       	ldi	r31, 0x08	; 8
    15fe:	df 07       	cpc	r29, r31
    1600:	21 f4       	brne	.+8      	; 0x160a <usart_init_spi+0xa2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1602:	61 e0       	ldi	r22, 0x01	; 1
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	9e d9       	rcall	.-3268   	; 0x944 <sysclk_enable_module>
    1608:	35 c1       	rjmp	.+618    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    160a:	c1 15       	cp	r28, r1
    160c:	39 e0       	ldi	r19, 0x09	; 9
    160e:	d3 07       	cpc	r29, r19
    1610:	21 f4       	brne	.+8      	; 0x161a <usart_init_spi+0xb2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1612:	61 e0       	ldi	r22, 0x01	; 1
    1614:	84 e0       	ldi	r24, 0x04	; 4
    1616:	96 d9       	rcall	.-3284   	; 0x944 <sysclk_enable_module>
    1618:	2d c1       	rjmp	.+602    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    161a:	c1 15       	cp	r28, r1
    161c:	8a e0       	ldi	r24, 0x0A	; 10
    161e:	d8 07       	cpc	r29, r24
    1620:	21 f4       	brne	.+8      	; 0x162a <usart_init_spi+0xc2>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1622:	61 e0       	ldi	r22, 0x01	; 1
    1624:	85 e0       	ldi	r24, 0x05	; 5
    1626:	8e d9       	rcall	.-3300   	; 0x944 <sysclk_enable_module>
    1628:	25 c1       	rjmp	.+586    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    162a:	c1 15       	cp	r28, r1
    162c:	eb e0       	ldi	r30, 0x0B	; 11
    162e:	de 07       	cpc	r29, r30
    1630:	21 f4       	brne	.+8      	; 0x163a <usart_init_spi+0xd2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1632:	61 e0       	ldi	r22, 0x01	; 1
    1634:	86 e0       	ldi	r24, 0x06	; 6
    1636:	86 d9       	rcall	.-3316   	; 0x944 <sysclk_enable_module>
    1638:	1d c1       	rjmp	.+570    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    163a:	c0 34       	cpi	r28, 0x40	; 64
    163c:	f8 e0       	ldi	r31, 0x08	; 8
    163e:	df 07       	cpc	r29, r31
    1640:	21 f4       	brne	.+8      	; 0x164a <usart_init_spi+0xe2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1642:	62 e0       	ldi	r22, 0x02	; 2
    1644:	83 e0       	ldi	r24, 0x03	; 3
    1646:	7e d9       	rcall	.-3332   	; 0x944 <sysclk_enable_module>
    1648:	15 c1       	rjmp	.+554    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    164a:	c0 34       	cpi	r28, 0x40	; 64
    164c:	39 e0       	ldi	r19, 0x09	; 9
    164e:	d3 07       	cpc	r29, r19
    1650:	21 f4       	brne	.+8      	; 0x165a <usart_init_spi+0xf2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1652:	62 e0       	ldi	r22, 0x02	; 2
    1654:	84 e0       	ldi	r24, 0x04	; 4
    1656:	76 d9       	rcall	.-3348   	; 0x944 <sysclk_enable_module>
    1658:	0d c1       	rjmp	.+538    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    165a:	c0 34       	cpi	r28, 0x40	; 64
    165c:	8a e0       	ldi	r24, 0x0A	; 10
    165e:	d8 07       	cpc	r29, r24
    1660:	21 f4       	brne	.+8      	; 0x166a <usart_init_spi+0x102>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1662:	62 e0       	ldi	r22, 0x02	; 2
    1664:	85 e0       	ldi	r24, 0x05	; 5
    1666:	6e d9       	rcall	.-3364   	; 0x944 <sysclk_enable_module>
    1668:	05 c1       	rjmp	.+522    	; 0x1874 <usart_init_spi+0x30c>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    166a:	c0 39       	cpi	r28, 0x90	; 144
    166c:	e8 e0       	ldi	r30, 0x08	; 8
    166e:	de 07       	cpc	r29, r30
    1670:	21 f4       	brne	.+8      	; 0x167a <usart_init_spi+0x112>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1672:	64 e0       	ldi	r22, 0x04	; 4
    1674:	83 e0       	ldi	r24, 0x03	; 3
    1676:	66 d9       	rcall	.-3380   	; 0x944 <sysclk_enable_module>
    1678:	fd c0       	rjmp	.+506    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    167a:	c0 39       	cpi	r28, 0x90	; 144
    167c:	f9 e0       	ldi	r31, 0x09	; 9
    167e:	df 07       	cpc	r29, r31
    1680:	21 f4       	brne	.+8      	; 0x168a <usart_init_spi+0x122>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1682:	64 e0       	ldi	r22, 0x04	; 4
    1684:	84 e0       	ldi	r24, 0x04	; 4
    1686:	5e d9       	rcall	.-3396   	; 0x944 <sysclk_enable_module>
    1688:	f5 c0       	rjmp	.+490    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    168a:	c0 39       	cpi	r28, 0x90	; 144
    168c:	3a e0       	ldi	r19, 0x0A	; 10
    168e:	d3 07       	cpc	r29, r19
    1690:	21 f4       	brne	.+8      	; 0x169a <usart_init_spi+0x132>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1692:	64 e0       	ldi	r22, 0x04	; 4
    1694:	85 e0       	ldi	r24, 0x05	; 5
    1696:	56 d9       	rcall	.-3412   	; 0x944 <sysclk_enable_module>
    1698:	ed c0       	rjmp	.+474    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    169a:	c0 39       	cpi	r28, 0x90	; 144
    169c:	8b e0       	ldi	r24, 0x0B	; 11
    169e:	d8 07       	cpc	r29, r24
    16a0:	21 f4       	brne	.+8      	; 0x16aa <usart_init_spi+0x142>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    16a2:	64 e0       	ldi	r22, 0x04	; 4
    16a4:	86 e0       	ldi	r24, 0x06	; 6
    16a6:	4e d9       	rcall	.-3428   	; 0x944 <sysclk_enable_module>
    16a8:	e5 c0       	rjmp	.+458    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    16aa:	c0 3c       	cpi	r28, 0xC0	; 192
    16ac:	e8 e0       	ldi	r30, 0x08	; 8
    16ae:	de 07       	cpc	r29, r30
    16b0:	21 f4       	brne	.+8      	; 0x16ba <usart_init_spi+0x152>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    16b2:	68 e0       	ldi	r22, 0x08	; 8
    16b4:	83 e0       	ldi	r24, 0x03	; 3
    16b6:	46 d9       	rcall	.-3444   	; 0x944 <sysclk_enable_module>
    16b8:	dd c0       	rjmp	.+442    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    16ba:	c0 3c       	cpi	r28, 0xC0	; 192
    16bc:	f9 e0       	ldi	r31, 0x09	; 9
    16be:	df 07       	cpc	r29, r31
    16c0:	21 f4       	brne	.+8      	; 0x16ca <usart_init_spi+0x162>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    16c2:	68 e0       	ldi	r22, 0x08	; 8
    16c4:	84 e0       	ldi	r24, 0x04	; 4
    16c6:	3e d9       	rcall	.-3460   	; 0x944 <sysclk_enable_module>
    16c8:	d5 c0       	rjmp	.+426    	; 0x1874 <usart_init_spi+0x30c>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    16ca:	c0 3a       	cpi	r28, 0xA0	; 160
    16cc:	38 e0       	ldi	r19, 0x08	; 8
    16ce:	d3 07       	cpc	r29, r19
    16d0:	61 f4       	brne	.+24     	; 0x16ea <usart_init_spi+0x182>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    16d2:	60 e1       	ldi	r22, 0x10	; 16
    16d4:	83 e0       	ldi	r24, 0x03	; 3
    16d6:	36 d9       	rcall	.-3476   	; 0x944 <sysclk_enable_module>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    16d8:	e0 ea       	ldi	r30, 0xA0	; 160
    16da:	f8 e0       	ldi	r31, 0x08	; 8
    16dc:	84 81       	ldd	r24, Z+4	; 0x04
    16de:	8f 7e       	andi	r24, 0xEF	; 239
    16e0:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    16e2:	f7 01       	movw	r30, r14
    16e4:	24 81       	ldd	r18, Z+4	; 0x04
    16e6:	22 50       	subi	r18, 0x02	; 2
    16e8:	43 c0       	rjmp	.+134    	; 0x1770 <usart_init_spi+0x208>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    16ea:	c0 3a       	cpi	r28, 0xA0	; 160
    16ec:	f9 e0       	ldi	r31, 0x09	; 9
    16ee:	df 07       	cpc	r29, r31
    16f0:	21 f4       	brne	.+8      	; 0x16fa <usart_init_spi+0x192>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    16f2:	60 e1       	ldi	r22, 0x10	; 16
    16f4:	84 e0       	ldi	r24, 0x04	; 4
    16f6:	26 d9       	rcall	.-3508   	; 0x944 <sysclk_enable_module>
    16f8:	bd c0       	rjmp	.+378    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    16fa:	c0 3a       	cpi	r28, 0xA0	; 160
    16fc:	3a e0       	ldi	r19, 0x0A	; 10
    16fe:	d3 07       	cpc	r29, r19
    1700:	21 f4       	brne	.+8      	; 0x170a <usart_init_spi+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1702:	60 e1       	ldi	r22, 0x10	; 16
    1704:	85 e0       	ldi	r24, 0x05	; 5
    1706:	1e d9       	rcall	.-3524   	; 0x944 <sysclk_enable_module>
    1708:	b5 c0       	rjmp	.+362    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    170a:	c0 3a       	cpi	r28, 0xA0	; 160
    170c:	8b e0       	ldi	r24, 0x0B	; 11
    170e:	d8 07       	cpc	r29, r24
    1710:	21 f4       	brne	.+8      	; 0x171a <usart_init_spi+0x1b2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1712:	60 e1       	ldi	r22, 0x10	; 16
    1714:	86 e0       	ldi	r24, 0x06	; 6
    1716:	16 d9       	rcall	.-3540   	; 0x944 <sysclk_enable_module>
    1718:	ad c0       	rjmp	.+346    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    171a:	c0 3b       	cpi	r28, 0xB0	; 176
    171c:	e8 e0       	ldi	r30, 0x08	; 8
    171e:	de 07       	cpc	r29, r30
    1720:	21 f4       	brne	.+8      	; 0x172a <usart_init_spi+0x1c2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1722:	60 e2       	ldi	r22, 0x20	; 32
    1724:	83 e0       	ldi	r24, 0x03	; 3
    1726:	0e d9       	rcall	.-3556   	; 0x944 <sysclk_enable_module>
    1728:	a5 c0       	rjmp	.+330    	; 0x1874 <usart_init_spi+0x30c>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    172a:	c0 3b       	cpi	r28, 0xB0	; 176
    172c:	f9 e0       	ldi	r31, 0x09	; 9
    172e:	df 07       	cpc	r29, r31
    1730:	21 f4       	brne	.+8      	; 0x173a <usart_init_spi+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1732:	60 e2       	ldi	r22, 0x20	; 32
    1734:	84 e0       	ldi	r24, 0x04	; 4
    1736:	06 d9       	rcall	.-3572   	; 0x944 <sysclk_enable_module>
    1738:	9d c0       	rjmp	.+314    	; 0x1874 <usart_init_spi+0x30c>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    173a:	c0 38       	cpi	r28, 0x80	; 128
    173c:	34 e0       	ldi	r19, 0x04	; 4
    173e:	d3 07       	cpc	r29, r19
    1740:	21 f4       	brne	.+8      	; 0x174a <usart_init_spi+0x1e2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1742:	60 e4       	ldi	r22, 0x40	; 64
    1744:	83 e0       	ldi	r24, 0x03	; 3
    1746:	fe d8       	rcall	.-3588   	; 0x944 <sysclk_enable_module>
    1748:	95 c0       	rjmp	.+298    	; 0x1874 <usart_init_spi+0x30c>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    174a:	c0 3a       	cpi	r28, 0xA0	; 160
    174c:	84 e0       	ldi	r24, 0x04	; 4
    174e:	d8 07       	cpc	r29, r24
    1750:	21 f4       	brne	.+8      	; 0x175a <usart_init_spi+0x1f2>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1752:	60 e4       	ldi	r22, 0x40	; 64
    1754:	85 e0       	ldi	r24, 0x05	; 5
    1756:	f6 d8       	rcall	.-3604   	; 0x944 <sysclk_enable_module>
    1758:	8d c0       	rjmp	.+282    	; 0x1874 <usart_init_spi+0x30c>
    175a:	8c 81       	ldd	r24, Y+4	; 0x04
    175c:	8f 7e       	andi	r24, 0xEF	; 239
    175e:	8c 83       	std	Y+4, r24	; 0x04
    1760:	fb 01       	movw	r30, r22
    1762:	24 81       	ldd	r18, Z+4	; 0x04
    1764:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1766:	ce 01       	movw	r24, r28
    1768:	c0 3a       	cpi	r28, 0xA0	; 160
    176a:	f8 e0       	ldi	r31, 0x08	; 8
    176c:	df 07       	cpc	r29, r31
    176e:	31 f4       	brne	.+12     	; 0x177c <usart_init_spi+0x214>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1770:	80 91 4e 06 	lds	r24, 0x064E
    1774:	84 fd       	sbrc	r24, 4
    1776:	86 c0       	rjmp	.+268    	; 0x1884 <usart_init_spi+0x31c>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1778:	11 e1       	ldi	r17, 0x11	; 17
    177a:	85 c0       	rjmp	.+266    	; 0x1886 <usart_init_spi+0x31e>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    177c:	80 3b       	cpi	r24, 0xB0	; 176
    177e:	38 e0       	ldi	r19, 0x08	; 8
    1780:	93 07       	cpc	r25, r19
    1782:	79 f0       	breq	.+30     	; 0x17a2 <usart_init_spi+0x23a>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1784:	80 3a       	cpi	r24, 0xA0	; 160
    1786:	e9 e0       	ldi	r30, 0x09	; 9
    1788:	9e 07       	cpc	r25, r30
    178a:	31 f4       	brne	.+12     	; 0x1798 <usart_init_spi+0x230>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    178c:	30 91 6e 06 	lds	r19, 0x066E
    1790:	34 fd       	sbrc	r19, 4
    1792:	7c c0       	rjmp	.+248    	; 0x188c <usart_init_spi+0x324>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1794:	19 e1       	ldi	r17, 0x19	; 25
    1796:	10 c0       	rjmp	.+32     	; 0x17b8 <usart_init_spi+0x250>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    1798:	80 3b       	cpi	r24, 0xB0	; 176
    179a:	f9 e0       	ldi	r31, 0x09	; 9
    179c:	9f 07       	cpc	r25, r31
    179e:	a9 f0       	breq	.+42     	; 0x17ca <usart_init_spi+0x262>
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <usart_init_spi+0x23c>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    17a2:	15 e1       	ldi	r17, 0x15	; 21
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    17a4:	80 3a       	cpi	r24, 0xA0	; 160
    17a6:	3a e0       	ldi	r19, 0x0A	; 10
    17a8:	93 07       	cpc	r25, r19
    17aa:	31 f4       	brne	.+12     	; 0x17b8 <usart_init_spi+0x250>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    17ac:	80 91 8e 06 	lds	r24, 0x068E
    17b0:	84 fd       	sbrc	r24, 4
    17b2:	6e c0       	rjmp	.+220    	; 0x1890 <usart_init_spi+0x328>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    17b4:	11 e2       	ldi	r17, 0x21	; 33
    17b6:	0c c0       	rjmp	.+24     	; 0x17d0 <usart_init_spi+0x268>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    17b8:	80 3a       	cpi	r24, 0xA0	; 160
    17ba:	9b 40       	sbci	r25, 0x0B	; 11
    17bc:	49 f4       	brne	.+18     	; 0x17d0 <usart_init_spi+0x268>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    17be:	80 91 ae 06 	lds	r24, 0x06AE
    17c2:	84 fd       	sbrc	r24, 4
    17c4:	04 c0       	rjmp	.+8      	; 0x17ce <usart_init_spi+0x266>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    17c6:	19 e2       	ldi	r17, 0x29	; 41
    17c8:	03 c0       	rjmp	.+6      	; 0x17d0 <usart_init_spi+0x268>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    17ca:	1d e1       	ldi	r17, 0x1D	; 29
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <usart_init_spi+0x268>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    17ce:	1d e2       	ldi	r17, 0x2D	; 45
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    17d0:	e1 2f       	mov	r30, r17
    17d2:	e6 95       	lsr	r30
    17d4:	e6 95       	lsr	r30
    17d6:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    17d8:	30 e2       	ldi	r19, 0x20	; 32
    17da:	e3 9f       	mul	r30, r19
    17dc:	f0 01       	movw	r30, r0
    17de:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    17e0:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    17e2:	17 70       	andi	r17, 0x07	; 7
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	01 2e       	mov	r0, r17
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <usart_init_spi+0x288>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <usart_init_spi+0x284>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    17f4:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    17f6:	22 30       	cpi	r18, 0x02	; 2
    17f8:	10 f0       	brcs	.+4      	; 0x17fe <usart_init_spi+0x296>
    17fa:	40 e0       	ldi	r20, 0x00	; 0
    17fc:	01 c0       	rjmp	.+2      	; 0x1800 <usart_init_spi+0x298>
    17fe:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    1800:	df 01       	movw	r26, r30
    1802:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1804:	a1 0f       	add	r26, r17
    1806:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1808:	3f b7       	in	r19, 0x3f	; 63
	cpu_irq_disable();
    180a:	f8 94       	cli
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    180c:	2c 91       	ld	r18, X
    180e:	27 70       	andi	r18, 0x07	; 7
    1810:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    1812:	9c 91       	ld	r25, X
    1814:	94 2b       	or	r25, r20
    1816:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1818:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    181a:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    181c:	8d 81       	ldd	r24, Y+5	; 0x05
    181e:	80 6c       	ori	r24, 0xC0	; 192
    1820:	8d 83       	std	Y+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    1822:	f7 01       	movw	r30, r14
    1824:	84 81       	ldd	r24, Z+4	; 0x04
    1826:	8d 7f       	andi	r24, 0xFD	; 253
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	21 f4       	brne	.+8      	; 0x1834 <usart_init_spi+0x2cc>
		usart->CTRLC |= USART_UCPHA_bm;
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	82 60       	ori	r24, 0x02	; 2
    1830:	8d 83       	std	Y+5, r24	; 0x05
    1832:	03 c0       	rjmp	.+6      	; 0x183a <usart_init_spi+0x2d2>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1834:	8d 81       	ldd	r24, Y+5	; 0x05
    1836:	8d 7f       	andi	r24, 0xFD	; 253
    1838:	8d 83       	std	Y+5, r24	; 0x05
	}
	if (opt->data_order) {
    183a:	f7 01       	movw	r30, r14
    183c:	85 81       	ldd	r24, Z+5	; 0x05
    183e:	88 23       	and	r24, r24
    1840:	21 f0       	breq	.+8      	; 0x184a <usart_init_spi+0x2e2>
		(usart)->CTRLC |= USART_DORD_bm;
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	84 60       	ori	r24, 0x04	; 4
    1846:	8d 83       	std	Y+5, r24	; 0x05
    1848:	03 c0       	rjmp	.+6      	; 0x1850 <usart_init_spi+0x2e8>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
    184c:	8b 7f       	andi	r24, 0xFB	; 251
    184e:	8d 83       	std	Y+5, r24	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1850:	f7 01       	movw	r30, r14
    1852:	40 81       	ld	r20, Z
    1854:	51 81       	ldd	r21, Z+1	; 0x01
    1856:	62 81       	ldd	r22, Z+2	; 0x02
    1858:	73 81       	ldd	r23, Z+3	; 0x03
    185a:	00 e8       	ldi	r16, 0x80	; 128
    185c:	14 e8       	ldi	r17, 0x84	; 132
    185e:	2e e1       	ldi	r18, 0x1E	; 30
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	ce 01       	movw	r24, r28
    1864:	50 de       	rcall	.-864    	; 0x1506 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	88 60       	ori	r24, 0x08	; 8
    186a:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	80 61       	ori	r24, 0x10	; 16
    1870:	8c 83       	std	Y+4, r24	; 0x04
    1872:	10 c0       	rjmp	.+32     	; 0x1894 <usart_init_spi+0x32c>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	8f 7e       	andi	r24, 0xEF	; 239
    1878:	8c 83       	std	Y+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    187a:	f7 01       	movw	r30, r14
    187c:	24 81       	ldd	r18, Z+4	; 0x04
    187e:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1880:	ce 01       	movw	r24, r28
    1882:	7c cf       	rjmp	.-264    	; 0x177c <usart_init_spi+0x214>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1884:	15 e1       	ldi	r17, 0x15	; 21
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1886:	80 ea       	ldi	r24, 0xA0	; 160
    1888:	98 e0       	ldi	r25, 0x08	; 8
    188a:	86 cf       	rjmp	.-244    	; 0x1798 <usart_init_spi+0x230>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    188c:	1d e1       	ldi	r17, 0x1D	; 29
    188e:	94 cf       	rjmp	.-216    	; 0x17b8 <usart_init_spi+0x250>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1890:	15 e2       	ldi	r17, 0x25	; 37
    1892:	9e cf       	rjmp	.-196    	; 0x17d0 <usart_init_spi+0x268>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	ff 90       	pop	r15
    189e:	ef 90       	pop	r14
    18a0:	08 95       	ret

000018a2 <keyboard_get_key_state>:

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    18a2:	20 91 88 06 	lds	r18, 0x0688
void keyboard_get_key_state(struct keyboard_event *keybuffer)
{
	// Variable to hold the key mask
	static uint8_t key_state;

	if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_0)) &&
    18a6:	25 fd       	sbrc	r18, 5
    18a8:	0d c0       	rjmp	.+26     	; 0x18c4 <keyboard_get_key_state+0x22>
			!(key_state & KEYBOARD_ENTER_MASK)) {
    18aa:	20 91 3b 22 	lds	r18, 0x223B
void keyboard_get_key_state(struct keyboard_event *keybuffer)
{
	// Variable to hold the key mask
	static uint8_t key_state;

	if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_0)) &&
    18ae:	20 fd       	sbrc	r18, 0
    18b0:	62 c0       	rjmp	.+196    	; 0x1976 <keyboard_get_key_state+0xd4>
			!(key_state & KEYBOARD_ENTER_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_ENTER_MASK;
    18b2:	21 60       	ori	r18, 0x01	; 1
    18b4:	20 93 3b 22 	sts	0x223B, r18
		keybuffer->keycode = KEYBOARD_ENTER;
    18b8:	2d e0       	ldi	r18, 0x0D	; 13
    18ba:	fc 01       	movw	r30, r24
    18bc:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_PRESS;
    18be:	21 e0       	ldi	r18, 0x01	; 1
    18c0:	21 83       	std	Z+1, r18	; 0x01
    18c2:	08 95       	ret
    18c4:	20 91 88 06 	lds	r18, 0x0688
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_0))
    18c8:	25 ff       	sbrs	r18, 5
    18ca:	0d c0       	rjmp	.+26     	; 0x18e6 <keyboard_get_key_state+0x44>
			&& (key_state & KEYBOARD_ENTER_MASK)) {
    18cc:	20 91 3b 22 	lds	r18, 0x223B
    18d0:	20 ff       	sbrs	r18, 0
    18d2:	09 c0       	rjmp	.+18     	; 0x18e6 <keyboard_get_key_state+0x44>
		// Key released
		key_state &= ~KEYBOARD_ENTER_MASK;
    18d4:	2e 7f       	andi	r18, 0xFE	; 254
    18d6:	20 93 3b 22 	sts	0x223B, r18
		keybuffer->keycode = KEYBOARD_ENTER;
    18da:	2d e0       	ldi	r18, 0x0D	; 13
    18dc:	fc 01       	movw	r30, r24
    18de:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_RELEASE;
    18e0:	22 e0       	ldi	r18, 0x02	; 2
    18e2:	21 83       	std	Z+1, r18	; 0x01
    18e4:	08 95       	ret
    18e6:	20 91 a8 06 	lds	r18, 0x06A8
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_1)) &&
    18ea:	21 fd       	sbrc	r18, 1
    18ec:	0d c0       	rjmp	.+26     	; 0x1908 <keyboard_get_key_state+0x66>
			!(key_state & KEYBOARD_UP_MASK)) {
    18ee:	20 91 3b 22 	lds	r18, 0x223B
			&& (key_state & KEYBOARD_ENTER_MASK)) {
		// Key released
		key_state &= ~KEYBOARD_ENTER_MASK;
		keybuffer->keycode = KEYBOARD_ENTER;
		keybuffer->type = KEYBOARD_RELEASE;
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_1)) &&
    18f2:	21 fd       	sbrc	r18, 1
    18f4:	45 c0       	rjmp	.+138    	; 0x1980 <keyboard_get_key_state+0xde>
			!(key_state & KEYBOARD_UP_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_UP_MASK;
    18f6:	22 60       	ori	r18, 0x02	; 2
    18f8:	20 93 3b 22 	sts	0x223B, r18
		keybuffer->keycode = KEYBOARD_UP;
    18fc:	26 e2       	ldi	r18, 0x26	; 38
    18fe:	fc 01       	movw	r30, r24
    1900:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_PRESS;
    1902:	21 e0       	ldi	r18, 0x01	; 1
    1904:	21 83       	std	Z+1, r18	; 0x01
    1906:	08 95       	ret
    1908:	20 91 a8 06 	lds	r18, 0x06A8
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_1))
    190c:	21 ff       	sbrs	r18, 1
    190e:	0d c0       	rjmp	.+26     	; 0x192a <keyboard_get_key_state+0x88>
			&& (key_state & KEYBOARD_UP_MASK)) {
    1910:	20 91 3b 22 	lds	r18, 0x223B
    1914:	21 ff       	sbrs	r18, 1
    1916:	09 c0       	rjmp	.+18     	; 0x192a <keyboard_get_key_state+0x88>
		// Key released
		key_state &= ~KEYBOARD_UP_MASK;
    1918:	2d 7f       	andi	r18, 0xFD	; 253
    191a:	20 93 3b 22 	sts	0x223B, r18
		keybuffer->keycode = KEYBOARD_UP;
    191e:	26 e2       	ldi	r18, 0x26	; 38
    1920:	fc 01       	movw	r30, r24
    1922:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_RELEASE;
    1924:	22 e0       	ldi	r18, 0x02	; 2
    1926:	21 83       	std	Z+1, r18	; 0x01
    1928:	08 95       	ret
    192a:	20 91 a8 06 	lds	r18, 0x06A8
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_2)) &&
    192e:	22 fd       	sbrc	r18, 2
    1930:	0d c0       	rjmp	.+26     	; 0x194c <keyboard_get_key_state+0xaa>
			!(key_state & KEYBOARD_DOWN_MASK)) {
    1932:	20 91 3b 22 	lds	r18, 0x223B
			&& (key_state & KEYBOARD_UP_MASK)) {
		// Key released
		key_state &= ~KEYBOARD_UP_MASK;
		keybuffer->keycode = KEYBOARD_UP;
		keybuffer->type = KEYBOARD_RELEASE;
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_2)) &&
    1936:	22 fd       	sbrc	r18, 2
    1938:	28 c0       	rjmp	.+80     	; 0x198a <keyboard_get_key_state+0xe8>
			!(key_state & KEYBOARD_DOWN_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_DOWN_MASK;
    193a:	24 60       	ori	r18, 0x04	; 4
    193c:	20 93 3b 22 	sts	0x223B, r18
		keybuffer->keycode = KEYBOARD_DOWN;
    1940:	28 e2       	ldi	r18, 0x28	; 40
    1942:	fc 01       	movw	r30, r24
    1944:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_PRESS;
    1946:	21 e0       	ldi	r18, 0x01	; 1
    1948:	21 83       	std	Z+1, r18	; 0x01
    194a:	08 95       	ret
    194c:	20 91 a8 06 	lds	r18, 0x06A8
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_2))
    1950:	22 ff       	sbrs	r18, 2
    1952:	0d c0       	rjmp	.+26     	; 0x196e <keyboard_get_key_state+0xcc>
			&& (key_state & KEYBOARD_DOWN_MASK)) {
    1954:	20 91 3b 22 	lds	r18, 0x223B
    1958:	22 ff       	sbrs	r18, 2
    195a:	09 c0       	rjmp	.+18     	; 0x196e <keyboard_get_key_state+0xcc>
		// Key released
		key_state &= ~KEYBOARD_DOWN_MASK;
    195c:	2b 7f       	andi	r18, 0xFB	; 251
    195e:	20 93 3b 22 	sts	0x223B, r18
		keybuffer->keycode = KEYBOARD_DOWN;
    1962:	28 e2       	ldi	r18, 0x28	; 40
    1964:	fc 01       	movw	r30, r24
    1966:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_RELEASE;
    1968:	22 e0       	ldi	r18, 0x02	; 2
    196a:	21 83       	std	Z+1, r18	; 0x01
    196c:	08 95       	ret
	} else {
		keybuffer->keycode = KEYBOARD_NO_KEY;
    196e:	fc 01       	movw	r30, r24
    1970:	10 82       	st	Z, r1
		keybuffer->type = KEYBOARD_NO_EVENT;
    1972:	11 82       	std	Z+1, r1	; 0x01
    1974:	08 95       	ret
    1976:	30 91 88 06 	lds	r19, 0x0688
			!(key_state & KEYBOARD_ENTER_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_ENTER_MASK;
		keybuffer->keycode = KEYBOARD_ENTER;
		keybuffer->type = KEYBOARD_PRESS;
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_0))
    197a:	35 fd       	sbrc	r19, 5
    197c:	ab cf       	rjmp	.-170    	; 0x18d4 <keyboard_get_key_state+0x32>
    197e:	b3 cf       	rjmp	.-154    	; 0x18e6 <keyboard_get_key_state+0x44>
    1980:	30 91 a8 06 	lds	r19, 0x06A8
			!(key_state & KEYBOARD_UP_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_UP_MASK;
		keybuffer->keycode = KEYBOARD_UP;
		keybuffer->type = KEYBOARD_PRESS;
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_1))
    1984:	31 fd       	sbrc	r19, 1
    1986:	c8 cf       	rjmp	.-112    	; 0x1918 <keyboard_get_key_state+0x76>
    1988:	d0 cf       	rjmp	.-96     	; 0x192a <keyboard_get_key_state+0x88>
    198a:	30 91 a8 06 	lds	r19, 0x06A8
			!(key_state & KEYBOARD_DOWN_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_DOWN_MASK;
		keybuffer->keycode = KEYBOARD_DOWN;
		keybuffer->type = KEYBOARD_PRESS;
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_2))
    198e:	32 fd       	sbrc	r19, 2
    1990:	e5 cf       	rjmp	.-54     	; 0x195c <keyboard_get_key_state+0xba>
    1992:	ed cf       	rjmp	.-38     	; 0x196e <keyboard_get_key_state+0xcc>

00001994 <song_menu>:
};

void song_menu(uint8_t, uint8_t);

void song_menu(uint8_t song_choice, uint8_t tempo)
{
    1994:	ff 92       	push	r15
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	e2 97       	sbiw	r28, 0x32	; 50
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	18 2f       	mov	r17, r24
    19aa:	f6 2e       	mov	r15, r22
	char tempo_str[50];
	
	gfx_mono_draw_filled_rect(0, 0, 128, 32, GFX_PIXEL_CLR);
    19ac:	00 e0       	ldi	r16, 0x00	; 0
    19ae:	20 e2       	ldi	r18, 0x20	; 32
    19b0:	40 e8       	ldi	r20, 0x80	; 128
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	6e da       	rcall	.-2852   	; 0xe94 <gfx_mono_generic_draw_filled_rect>
	gfx_mono_draw_string("Currently Playing: ", 1, 2, &sysfont);
    19b8:	25 e0       	ldi	r18, 0x05	; 5
    19ba:	30 e2       	ldi	r19, 0x20	; 32
    19bc:	42 e0       	ldi	r20, 0x02	; 2
    19be:	61 e0       	ldi	r22, 0x01	; 1
    19c0:	89 e1       	ldi	r24, 0x19	; 25
    19c2:	90 e2       	ldi	r25, 0x20	; 32
    19c4:	0e dc       	rcall	.-2020   	; 0x11e2 <gfx_mono_draw_string>
	gfx_mono_draw_progmem_string((char PROGMEM_PTR_T)main_menu_strings[song_choice], 1, 10, &sysfont);
    19c6:	e1 2f       	mov	r30, r17
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	ee 0f       	add	r30, r30
    19cc:	ff 1f       	adc	r31, r31
    19ce:	ed 5e       	subi	r30, 0xED	; 237
    19d0:	ff 4d       	sbci	r31, 0xDF	; 223
    19d2:	25 e0       	ldi	r18, 0x05	; 5
    19d4:	30 e2       	ldi	r19, 0x20	; 32
    19d6:	4a e0       	ldi	r20, 0x0A	; 10
    19d8:	61 e0       	ldi	r22, 0x01	; 1
    19da:	80 81       	ld	r24, Z
    19dc:	91 81       	ldd	r25, Z+1	; 0x01
    19de:	2a dc       	rcall	.-1964   	; 0x1234 <gfx_mono_draw_progmem_string>
	snprintf(tempo_str, 50, "Tempo: %d", tempo);
    19e0:	1f 92       	push	r1
    19e2:	ff 92       	push	r15
    19e4:	8d e2       	ldi	r24, 0x2D	; 45
    19e6:	90 e2       	ldi	r25, 0x20	; 32
    19e8:	9f 93       	push	r25
    19ea:	8f 93       	push	r24
    19ec:	1f 92       	push	r1
    19ee:	82 e3       	ldi	r24, 0x32	; 50
    19f0:	8f 93       	push	r24
    19f2:	8e 01       	movw	r16, r28
    19f4:	0f 5f       	subi	r16, 0xFF	; 255
    19f6:	1f 4f       	sbci	r17, 0xFF	; 255
    19f8:	1f 93       	push	r17
    19fa:	0f 93       	push	r16
    19fc:	a3 d0       	rcall	.+326    	; 0x1b44 <snprintf>
	gfx_mono_draw_string(tempo_str, 1, 20, &sysfont);
    19fe:	25 e0       	ldi	r18, 0x05	; 5
    1a00:	30 e2       	ldi	r19, 0x20	; 32
    1a02:	44 e1       	ldi	r20, 0x14	; 20
    1a04:	61 e0       	ldi	r22, 0x01	; 1
    1a06:	c8 01       	movw	r24, r16
    1a08:	ec db       	rcall	.-2088   	; 0x11e2 <gfx_mono_draw_string>
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	de bf       	out	0x3e, r29	; 62
}
    1a0e:	e2 96       	adiw	r28, 0x32	; 50
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	08 95       	ret

00001a20 <main>:
		//play_chord(testChord);
	}
}

int main (void)
{
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <main+0x6>
    1a26:	1f 92       	push	r1
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
	uint8_t menu_status;
	struct keyboard_event input;

	sysclk_init();	
    1a2c:	0e 94 92 04 	call	0x924	; 0x924 <sysclk_init>
	board_init();
    1a30:	cd dc       	rcall	.-1638   	; 0x13cc <board_init>
	solenoid_init();
    1a32:	0e 94 a4 02 	call	0x548	; 0x548 <solenoid_init>
	gfx_mono_init();
    1a36:	0c d9       	rcall	.-3560   	; 0xc50 <gfx_mono_st7565r_init>

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    1a38:	80 e1       	ldi	r24, 0x10	; 16
    1a3a:	80 93 87 06 	sts	0x0687, r24

static void simple_beat() {
	struct keyboard_event key;
	uint8_t tempo = 100;

	struct SongNote noteOne = {
    1a3e:	68 94       	set
    1a40:	ee 24       	eor	r14, r14
    1a42:	e4 f8       	bld	r14, 4
    1a44:	0f 2e       	mov	r0, r31
    1a46:	fa e0       	ldi	r31, 0x0A	; 10
    1a48:	df 2e       	mov	r13, r31
    1a4a:	f0 2d       	mov	r31, r0
    1a4c:	10 e0       	ldi	r17, 0x00	; 0
		STRING_SIX,
		10
	};

	struct SongNote noteTwo = {
    1a4e:	0f 2e       	mov	r0, r31
    1a50:	f1 e1       	ldi	r31, 0x11	; 17
    1a52:	ff 2e       	mov	r15, r31
    1a54:	f0 2d       	mov	r31, r0
	
	gpio_toggle_pin(NHD_C12832A1Z_BACKLIGHT);

	while(true) 
	{
		gfx_mono_menu_init(&main_menu);
    1a56:	8c e0       	ldi	r24, 0x0C	; 12
    1a58:	90 e2       	ldi	r25, 0x20	; 32
    1a5a:	1c db       	rcall	.-2504   	; 0x1094 <gfx_mono_menu_init>

		do {
			do {
				keyboard_get_key_state(&input);
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	20 df       	rcall	.-448    	; 0x18a2 <keyboard_get_key_state>
			} while (input.type != KEYBOARD_RELEASE);
    1a62:	9a 81       	ldd	r25, Y+2	; 0x02
    1a64:	92 30       	cpi	r25, 0x02	; 2
    1a66:	d1 f7       	brne	.-12     	; 0x1a5c <main+0x3c>

			menu_status = gfx_mono_menu_process_key(&main_menu, input.keycode);
    1a68:	69 81       	ldd	r22, Y+1	; 0x01
    1a6a:	8c e0       	ldi	r24, 0x0C	; 12
    1a6c:	90 e2       	ldi	r25, 0x20	; 32
    1a6e:	2a db       	rcall	.-2476   	; 0x10c4 <gfx_mono_menu_process_key>
		} while (menu_status == GFX_MONO_MENU_EVENT_IDLE);
    1a70:	8f 3f       	cpi	r24, 0xFF	; 255
    1a72:	a1 f3       	breq	.-24     	; 0x1a5c <main+0x3c>

		switch(menu_status) {
    1a74:	81 11       	cpse	r24, r1
    1a76:	ef cf       	rjmp	.-34     	; 0x1a56 <main+0x36>

	//testChord.notes = testArray;
	//memcpy(testChord.notes, testArray, sizeof(SongNote) * 6);
	//testChord.numNotes = 2;

	song_menu(0, tempo);
    1a78:	64 e6       	ldi	r22, 0x64	; 100
    1a7a:	81 2f       	mov	r24, r17
    1a7c:	8b df       	rcall	.-234    	; 0x1994 <song_menu>
	gfx_mono_draw_string(tempo_str, 1, 20, &sysfont);
}

static void simple_beat() {
	struct keyboard_event key;
	uint8_t tempo = 100;
    1a7e:	04 e6       	ldi	r16, 0x64	; 100
	//memcpy(testChord.notes, testArray, sizeof(SongNote) * 6);
	//testChord.numNotes = 2;

	song_menu(0, tempo);
	while(true) {
		keyboard_get_key_state(&key);
    1a80:	ce 01       	movw	r24, r28
    1a82:	03 96       	adiw	r24, 0x03	; 3
    1a84:	0e df       	rcall	.-484    	; 0x18a2 <keyboard_get_key_state>

		if((key.keycode == KEYBOARD_ENTER)
    1a86:	9b 81       	ldd	r25, Y+3	; 0x03
    1a88:	9d 30       	cpi	r25, 0x0D	; 13
    1a8a:	21 f4       	brne	.+8      	; 0x1a94 <main+0x74>
			&& (key.type == KEYBOARD_RELEASE))
    1a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8e:	82 30       	cpi	r24, 0x02	; 2
    1a90:	a1 f4       	brne	.+40     	; 0x1aba <main+0x9a>
    1a92:	e1 cf       	rjmp	.-62     	; 0x1a56 <main+0x36>
		{
			break;
		}
		else if((key.keycode == KEYBOARD_UP)
    1a94:	96 32       	cpi	r25, 0x26	; 38
    1a96:	41 f4       	brne	.+16     	; 0x1aa8 <main+0x88>
			&& (key.type == KEYBOARD_RELEASE))
    1a98:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9a:	82 30       	cpi	r24, 0x02	; 2
    1a9c:	71 f4       	brne	.+28     	; 0x1aba <main+0x9a>
		{
			tempo += 50;
    1a9e:	0e 5c       	subi	r16, 0xCE	; 206
			song_menu(0, tempo);
    1aa0:	60 2f       	mov	r22, r16
    1aa2:	81 2f       	mov	r24, r17
    1aa4:	77 df       	rcall	.-274    	; 0x1994 <song_menu>
    1aa6:	09 c0       	rjmp	.+18     	; 0x1aba <main+0x9a>
		}
		else if((key.keycode == KEYBOARD_DOWN)
    1aa8:	98 32       	cpi	r25, 0x28	; 40
    1aaa:	39 f4       	brne	.+14     	; 0x1aba <main+0x9a>
			&& (key.type == KEYBOARD_RELEASE))
    1aac:	8c 81       	ldd	r24, Y+4	; 0x04
    1aae:	82 30       	cpi	r24, 0x02	; 2
    1ab0:	21 f4       	brne	.+8      	; 0x1aba <main+0x9a>
		{
			tempo -= 50;
    1ab2:	02 53       	subi	r16, 0x32	; 50
			song_menu(0, tempo);
    1ab4:	60 2f       	mov	r22, r16
    1ab6:	81 2f       	mov	r24, r17
    1ab8:	6d df       	rcall	.-294    	; 0x1994 <song_menu>
		}
		play_note(noteOne);
    1aba:	6e 2d       	mov	r22, r14
    1abc:	7d 2d       	mov	r23, r13
    1abe:	81 2f       	mov	r24, r17
    1ac0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <play_note>
    1ac4:	2f e7       	ldi	r18, 0x7F	; 127
    1ac6:	8a e1       	ldi	r24, 0x1A	; 26
    1ac8:	96 e0       	ldi	r25, 0x06	; 6
    1aca:	21 50       	subi	r18, 0x01	; 1
    1acc:	80 40       	sbci	r24, 0x00	; 0
    1ace:	90 40       	sbci	r25, 0x00	; 0
    1ad0:	e1 f7       	brne	.-8      	; 0x1aca <main+0xaa>
    1ad2:	00 c0       	rjmp	.+0      	; 0x1ad4 <main+0xb4>
    1ad4:	00 00       	nop
		_delay_ms(1000);
		play_note(noteTwo);
    1ad6:	6f 2d       	mov	r22, r15
    1ad8:	7d 2d       	mov	r23, r13
    1ada:	81 2f       	mov	r24, r17
    1adc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <play_note>
    1ae0:	cf cf       	rjmp	.-98     	; 0x1a80 <main+0x60>

00001ae2 <__udivmodsi4>:
    1ae2:	a1 e2       	ldi	r26, 0x21	; 33
    1ae4:	1a 2e       	mov	r1, r26
    1ae6:	aa 1b       	sub	r26, r26
    1ae8:	bb 1b       	sub	r27, r27
    1aea:	fd 01       	movw	r30, r26
    1aec:	0d c0       	rjmp	.+26     	; 0x1b08 <__udivmodsi4_ep>

00001aee <__udivmodsi4_loop>:
    1aee:	aa 1f       	adc	r26, r26
    1af0:	bb 1f       	adc	r27, r27
    1af2:	ee 1f       	adc	r30, r30
    1af4:	ff 1f       	adc	r31, r31
    1af6:	a2 17       	cp	r26, r18
    1af8:	b3 07       	cpc	r27, r19
    1afa:	e4 07       	cpc	r30, r20
    1afc:	f5 07       	cpc	r31, r21
    1afe:	20 f0       	brcs	.+8      	; 0x1b08 <__udivmodsi4_ep>
    1b00:	a2 1b       	sub	r26, r18
    1b02:	b3 0b       	sbc	r27, r19
    1b04:	e4 0b       	sbc	r30, r20
    1b06:	f5 0b       	sbc	r31, r21

00001b08 <__udivmodsi4_ep>:
    1b08:	66 1f       	adc	r22, r22
    1b0a:	77 1f       	adc	r23, r23
    1b0c:	88 1f       	adc	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	1a 94       	dec	r1
    1b12:	69 f7       	brne	.-38     	; 0x1aee <__udivmodsi4_loop>
    1b14:	60 95       	com	r22
    1b16:	70 95       	com	r23
    1b18:	80 95       	com	r24
    1b1a:	90 95       	com	r25
    1b1c:	9b 01       	movw	r18, r22
    1b1e:	ac 01       	movw	r20, r24
    1b20:	bd 01       	movw	r22, r26
    1b22:	cf 01       	movw	r24, r30
    1b24:	08 95       	ret

00001b26 <__umulhisi3>:
    1b26:	a2 9f       	mul	r26, r18
    1b28:	b0 01       	movw	r22, r0
    1b2a:	b3 9f       	mul	r27, r19
    1b2c:	c0 01       	movw	r24, r0
    1b2e:	a3 9f       	mul	r26, r19
    1b30:	70 0d       	add	r23, r0
    1b32:	81 1d       	adc	r24, r1
    1b34:	11 24       	eor	r1, r1
    1b36:	91 1d       	adc	r25, r1
    1b38:	b2 9f       	mul	r27, r18
    1b3a:	70 0d       	add	r23, r0
    1b3c:	81 1d       	adc	r24, r1
    1b3e:	11 24       	eor	r1, r1
    1b40:	91 1d       	adc	r25, r1
    1b42:	08 95       	ret

00001b44 <snprintf>:
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	2e 97       	sbiw	r28, 0x0e	; 14
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0e 89       	ldd	r16, Y+22	; 0x16
    1b58:	1f 89       	ldd	r17, Y+23	; 0x17
    1b5a:	88 8d       	ldd	r24, Y+24	; 0x18
    1b5c:	99 8d       	ldd	r25, Y+25	; 0x19
    1b5e:	26 e0       	ldi	r18, 0x06	; 6
    1b60:	2c 83       	std	Y+4, r18	; 0x04
    1b62:	09 83       	std	Y+1, r16	; 0x01
    1b64:	1a 83       	std	Y+2, r17	; 0x02
    1b66:	97 ff       	sbrs	r25, 7
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <snprintf+0x2a>
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	90 e8       	ldi	r25, 0x80	; 128
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	8d 83       	std	Y+5, r24	; 0x05
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	ae 01       	movw	r20, r28
    1b76:	44 5e       	subi	r20, 0xE4	; 228
    1b78:	5f 4f       	sbci	r21, 0xFF	; 255
    1b7a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b7c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b7e:	ce 01       	movw	r24, r28
    1b80:	01 96       	adiw	r24, 0x01	; 1
    1b82:	16 d0       	rcall	.+44     	; 0x1bb0 <vfprintf>
    1b84:	4d 81       	ldd	r20, Y+5	; 0x05
    1b86:	5e 81       	ldd	r21, Y+6	; 0x06
    1b88:	57 fd       	sbrc	r21, 7
    1b8a:	0a c0       	rjmp	.+20     	; 0x1ba0 <snprintf+0x5c>
    1b8c:	2f 81       	ldd	r18, Y+7	; 0x07
    1b8e:	38 85       	ldd	r19, Y+8	; 0x08
    1b90:	42 17       	cp	r20, r18
    1b92:	53 07       	cpc	r21, r19
    1b94:	0c f4       	brge	.+2      	; 0x1b98 <snprintf+0x54>
    1b96:	9a 01       	movw	r18, r20
    1b98:	f8 01       	movw	r30, r16
    1b9a:	e2 0f       	add	r30, r18
    1b9c:	f3 1f       	adc	r31, r19
    1b9e:	10 82       	st	Z, r1
    1ba0:	2e 96       	adiw	r28, 0x0e	; 14
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	08 95       	ret

00001bb0 <vfprintf>:
    1bb0:	2f 92       	push	r2
    1bb2:	3f 92       	push	r3
    1bb4:	4f 92       	push	r4
    1bb6:	5f 92       	push	r5
    1bb8:	6f 92       	push	r6
    1bba:	7f 92       	push	r7
    1bbc:	8f 92       	push	r8
    1bbe:	9f 92       	push	r9
    1bc0:	af 92       	push	r10
    1bc2:	bf 92       	push	r11
    1bc4:	cf 92       	push	r12
    1bc6:	df 92       	push	r13
    1bc8:	ef 92       	push	r14
    1bca:	ff 92       	push	r15
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	2c 97       	sbiw	r28, 0x0c	; 12
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	7c 01       	movw	r14, r24
    1be0:	6b 01       	movw	r12, r22
    1be2:	8a 01       	movw	r16, r20
    1be4:	fc 01       	movw	r30, r24
    1be6:	16 82       	std	Z+6, r1	; 0x06
    1be8:	17 82       	std	Z+7, r1	; 0x07
    1bea:	83 81       	ldd	r24, Z+3	; 0x03
    1bec:	81 ff       	sbrs	r24, 1
    1bee:	b0 c1       	rjmp	.+864    	; 0x1f50 <vfprintf+0x3a0>
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	01 96       	adiw	r24, 0x01	; 1
    1bf4:	4c 01       	movw	r8, r24
    1bf6:	f7 01       	movw	r30, r14
    1bf8:	93 81       	ldd	r25, Z+3	; 0x03
    1bfa:	f6 01       	movw	r30, r12
    1bfc:	93 fd       	sbrc	r25, 3
    1bfe:	85 91       	lpm	r24, Z+
    1c00:	93 ff       	sbrs	r25, 3
    1c02:	81 91       	ld	r24, Z+
    1c04:	6f 01       	movw	r12, r30
    1c06:	88 23       	and	r24, r24
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <vfprintf+0x5c>
    1c0a:	9e c1       	rjmp	.+828    	; 0x1f48 <vfprintf+0x398>
    1c0c:	85 32       	cpi	r24, 0x25	; 37
    1c0e:	39 f4       	brne	.+14     	; 0x1c1e <vfprintf+0x6e>
    1c10:	93 fd       	sbrc	r25, 3
    1c12:	85 91       	lpm	r24, Z+
    1c14:	93 ff       	sbrs	r25, 3
    1c16:	81 91       	ld	r24, Z+
    1c18:	6f 01       	movw	r12, r30
    1c1a:	85 32       	cpi	r24, 0x25	; 37
    1c1c:	21 f4       	brne	.+8      	; 0x1c26 <vfprintf+0x76>
    1c1e:	b7 01       	movw	r22, r14
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	c4 d1       	rcall	.+904    	; 0x1fac <fputc>
    1c24:	e8 cf       	rjmp	.-48     	; 0x1bf6 <vfprintf+0x46>
    1c26:	51 2c       	mov	r5, r1
    1c28:	31 2c       	mov	r3, r1
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	20 32       	cpi	r18, 0x20	; 32
    1c2e:	a0 f4       	brcc	.+40     	; 0x1c58 <vfprintf+0xa8>
    1c30:	8b 32       	cpi	r24, 0x2B	; 43
    1c32:	69 f0       	breq	.+26     	; 0x1c4e <vfprintf+0x9e>
    1c34:	30 f4       	brcc	.+12     	; 0x1c42 <vfprintf+0x92>
    1c36:	80 32       	cpi	r24, 0x20	; 32
    1c38:	59 f0       	breq	.+22     	; 0x1c50 <vfprintf+0xa0>
    1c3a:	83 32       	cpi	r24, 0x23	; 35
    1c3c:	69 f4       	brne	.+26     	; 0x1c58 <vfprintf+0xa8>
    1c3e:	20 61       	ori	r18, 0x10	; 16
    1c40:	2c c0       	rjmp	.+88     	; 0x1c9a <vfprintf+0xea>
    1c42:	8d 32       	cpi	r24, 0x2D	; 45
    1c44:	39 f0       	breq	.+14     	; 0x1c54 <vfprintf+0xa4>
    1c46:	80 33       	cpi	r24, 0x30	; 48
    1c48:	39 f4       	brne	.+14     	; 0x1c58 <vfprintf+0xa8>
    1c4a:	21 60       	ori	r18, 0x01	; 1
    1c4c:	26 c0       	rjmp	.+76     	; 0x1c9a <vfprintf+0xea>
    1c4e:	22 60       	ori	r18, 0x02	; 2
    1c50:	24 60       	ori	r18, 0x04	; 4
    1c52:	23 c0       	rjmp	.+70     	; 0x1c9a <vfprintf+0xea>
    1c54:	28 60       	ori	r18, 0x08	; 8
    1c56:	21 c0       	rjmp	.+66     	; 0x1c9a <vfprintf+0xea>
    1c58:	27 fd       	sbrc	r18, 7
    1c5a:	27 c0       	rjmp	.+78     	; 0x1caa <vfprintf+0xfa>
    1c5c:	30 ed       	ldi	r19, 0xD0	; 208
    1c5e:	38 0f       	add	r19, r24
    1c60:	3a 30       	cpi	r19, 0x0A	; 10
    1c62:	78 f4       	brcc	.+30     	; 0x1c82 <vfprintf+0xd2>
    1c64:	26 ff       	sbrs	r18, 6
    1c66:	06 c0       	rjmp	.+12     	; 0x1c74 <vfprintf+0xc4>
    1c68:	fa e0       	ldi	r31, 0x0A	; 10
    1c6a:	5f 9e       	mul	r5, r31
    1c6c:	30 0d       	add	r19, r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	53 2e       	mov	r5, r19
    1c72:	13 c0       	rjmp	.+38     	; 0x1c9a <vfprintf+0xea>
    1c74:	8a e0       	ldi	r24, 0x0A	; 10
    1c76:	38 9e       	mul	r3, r24
    1c78:	30 0d       	add	r19, r0
    1c7a:	11 24       	eor	r1, r1
    1c7c:	33 2e       	mov	r3, r19
    1c7e:	20 62       	ori	r18, 0x20	; 32
    1c80:	0c c0       	rjmp	.+24     	; 0x1c9a <vfprintf+0xea>
    1c82:	8e 32       	cpi	r24, 0x2E	; 46
    1c84:	21 f4       	brne	.+8      	; 0x1c8e <vfprintf+0xde>
    1c86:	26 fd       	sbrc	r18, 6
    1c88:	5f c1       	rjmp	.+702    	; 0x1f48 <vfprintf+0x398>
    1c8a:	20 64       	ori	r18, 0x40	; 64
    1c8c:	06 c0       	rjmp	.+12     	; 0x1c9a <vfprintf+0xea>
    1c8e:	8c 36       	cpi	r24, 0x6C	; 108
    1c90:	11 f4       	brne	.+4      	; 0x1c96 <vfprintf+0xe6>
    1c92:	20 68       	ori	r18, 0x80	; 128
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <vfprintf+0xea>
    1c96:	88 36       	cpi	r24, 0x68	; 104
    1c98:	41 f4       	brne	.+16     	; 0x1caa <vfprintf+0xfa>
    1c9a:	f6 01       	movw	r30, r12
    1c9c:	93 fd       	sbrc	r25, 3
    1c9e:	85 91       	lpm	r24, Z+
    1ca0:	93 ff       	sbrs	r25, 3
    1ca2:	81 91       	ld	r24, Z+
    1ca4:	6f 01       	movw	r12, r30
    1ca6:	81 11       	cpse	r24, r1
    1ca8:	c1 cf       	rjmp	.-126    	; 0x1c2c <vfprintf+0x7c>
    1caa:	98 2f       	mov	r25, r24
    1cac:	9f 7d       	andi	r25, 0xDF	; 223
    1cae:	95 54       	subi	r25, 0x45	; 69
    1cb0:	93 30       	cpi	r25, 0x03	; 3
    1cb2:	28 f4       	brcc	.+10     	; 0x1cbe <vfprintf+0x10e>
    1cb4:	0c 5f       	subi	r16, 0xFC	; 252
    1cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb8:	ff e3       	ldi	r31, 0x3F	; 63
    1cba:	f9 83       	std	Y+1, r31	; 0x01
    1cbc:	0d c0       	rjmp	.+26     	; 0x1cd8 <vfprintf+0x128>
    1cbe:	83 36       	cpi	r24, 0x63	; 99
    1cc0:	31 f0       	breq	.+12     	; 0x1cce <vfprintf+0x11e>
    1cc2:	83 37       	cpi	r24, 0x73	; 115
    1cc4:	71 f0       	breq	.+28     	; 0x1ce2 <vfprintf+0x132>
    1cc6:	83 35       	cpi	r24, 0x53	; 83
    1cc8:	09 f0       	breq	.+2      	; 0x1ccc <vfprintf+0x11c>
    1cca:	57 c0       	rjmp	.+174    	; 0x1d7a <vfprintf+0x1ca>
    1ccc:	21 c0       	rjmp	.+66     	; 0x1d10 <vfprintf+0x160>
    1cce:	f8 01       	movw	r30, r16
    1cd0:	80 81       	ld	r24, Z
    1cd2:	89 83       	std	Y+1, r24	; 0x01
    1cd4:	0e 5f       	subi	r16, 0xFE	; 254
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	44 24       	eor	r4, r4
    1cda:	43 94       	inc	r4
    1cdc:	51 2c       	mov	r5, r1
    1cde:	54 01       	movw	r10, r8
    1ce0:	14 c0       	rjmp	.+40     	; 0x1d0a <vfprintf+0x15a>
    1ce2:	38 01       	movw	r6, r16
    1ce4:	f2 e0       	ldi	r31, 0x02	; 2
    1ce6:	6f 0e       	add	r6, r31
    1ce8:	71 1c       	adc	r7, r1
    1cea:	f8 01       	movw	r30, r16
    1cec:	a0 80       	ld	r10, Z
    1cee:	b1 80       	ldd	r11, Z+1	; 0x01
    1cf0:	26 ff       	sbrs	r18, 6
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <vfprintf+0x14a>
    1cf4:	65 2d       	mov	r22, r5
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <vfprintf+0x14e>
    1cfa:	6f ef       	ldi	r22, 0xFF	; 255
    1cfc:	7f ef       	ldi	r23, 0xFF	; 255
    1cfe:	c5 01       	movw	r24, r10
    1d00:	2c 87       	std	Y+12, r18	; 0x0c
    1d02:	49 d1       	rcall	.+658    	; 0x1f96 <strnlen>
    1d04:	2c 01       	movw	r4, r24
    1d06:	83 01       	movw	r16, r6
    1d08:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d0a:	2f 77       	andi	r18, 0x7F	; 127
    1d0c:	22 2e       	mov	r2, r18
    1d0e:	16 c0       	rjmp	.+44     	; 0x1d3c <vfprintf+0x18c>
    1d10:	38 01       	movw	r6, r16
    1d12:	f2 e0       	ldi	r31, 0x02	; 2
    1d14:	6f 0e       	add	r6, r31
    1d16:	71 1c       	adc	r7, r1
    1d18:	f8 01       	movw	r30, r16
    1d1a:	a0 80       	ld	r10, Z
    1d1c:	b1 80       	ldd	r11, Z+1	; 0x01
    1d1e:	26 ff       	sbrs	r18, 6
    1d20:	03 c0       	rjmp	.+6      	; 0x1d28 <vfprintf+0x178>
    1d22:	65 2d       	mov	r22, r5
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <vfprintf+0x17c>
    1d28:	6f ef       	ldi	r22, 0xFF	; 255
    1d2a:	7f ef       	ldi	r23, 0xFF	; 255
    1d2c:	c5 01       	movw	r24, r10
    1d2e:	2c 87       	std	Y+12, r18	; 0x0c
    1d30:	27 d1       	rcall	.+590    	; 0x1f80 <strnlen_P>
    1d32:	2c 01       	movw	r4, r24
    1d34:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d36:	20 68       	ori	r18, 0x80	; 128
    1d38:	22 2e       	mov	r2, r18
    1d3a:	83 01       	movw	r16, r6
    1d3c:	23 fc       	sbrc	r2, 3
    1d3e:	19 c0       	rjmp	.+50     	; 0x1d72 <vfprintf+0x1c2>
    1d40:	83 2d       	mov	r24, r3
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	48 16       	cp	r4, r24
    1d46:	59 06       	cpc	r5, r25
    1d48:	a0 f4       	brcc	.+40     	; 0x1d72 <vfprintf+0x1c2>
    1d4a:	b7 01       	movw	r22, r14
    1d4c:	80 e2       	ldi	r24, 0x20	; 32
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	2d d1       	rcall	.+602    	; 0x1fac <fputc>
    1d52:	3a 94       	dec	r3
    1d54:	f5 cf       	rjmp	.-22     	; 0x1d40 <vfprintf+0x190>
    1d56:	f5 01       	movw	r30, r10
    1d58:	27 fc       	sbrc	r2, 7
    1d5a:	85 91       	lpm	r24, Z+
    1d5c:	27 fe       	sbrs	r2, 7
    1d5e:	81 91       	ld	r24, Z+
    1d60:	5f 01       	movw	r10, r30
    1d62:	b7 01       	movw	r22, r14
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	22 d1       	rcall	.+580    	; 0x1fac <fputc>
    1d68:	31 10       	cpse	r3, r1
    1d6a:	3a 94       	dec	r3
    1d6c:	f1 e0       	ldi	r31, 0x01	; 1
    1d6e:	4f 1a       	sub	r4, r31
    1d70:	51 08       	sbc	r5, r1
    1d72:	41 14       	cp	r4, r1
    1d74:	51 04       	cpc	r5, r1
    1d76:	79 f7       	brne	.-34     	; 0x1d56 <vfprintf+0x1a6>
    1d78:	de c0       	rjmp	.+444    	; 0x1f36 <vfprintf+0x386>
    1d7a:	84 36       	cpi	r24, 0x64	; 100
    1d7c:	11 f0       	breq	.+4      	; 0x1d82 <vfprintf+0x1d2>
    1d7e:	89 36       	cpi	r24, 0x69	; 105
    1d80:	31 f5       	brne	.+76     	; 0x1dce <vfprintf+0x21e>
    1d82:	f8 01       	movw	r30, r16
    1d84:	27 ff       	sbrs	r18, 7
    1d86:	07 c0       	rjmp	.+14     	; 0x1d96 <vfprintf+0x1e6>
    1d88:	60 81       	ld	r22, Z
    1d8a:	71 81       	ldd	r23, Z+1	; 0x01
    1d8c:	82 81       	ldd	r24, Z+2	; 0x02
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	0c 5f       	subi	r16, 0xFC	; 252
    1d92:	1f 4f       	sbci	r17, 0xFF	; 255
    1d94:	08 c0       	rjmp	.+16     	; 0x1da6 <vfprintf+0x1f6>
    1d96:	60 81       	ld	r22, Z
    1d98:	71 81       	ldd	r23, Z+1	; 0x01
    1d9a:	07 2e       	mov	r0, r23
    1d9c:	00 0c       	add	r0, r0
    1d9e:	88 0b       	sbc	r24, r24
    1da0:	99 0b       	sbc	r25, r25
    1da2:	0e 5f       	subi	r16, 0xFE	; 254
    1da4:	1f 4f       	sbci	r17, 0xFF	; 255
    1da6:	2f 76       	andi	r18, 0x6F	; 111
    1da8:	72 2e       	mov	r7, r18
    1daa:	97 ff       	sbrs	r25, 7
    1dac:	09 c0       	rjmp	.+18     	; 0x1dc0 <vfprintf+0x210>
    1dae:	90 95       	com	r25
    1db0:	80 95       	com	r24
    1db2:	70 95       	com	r23
    1db4:	61 95       	neg	r22
    1db6:	7f 4f       	sbci	r23, 0xFF	; 255
    1db8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dba:	9f 4f       	sbci	r25, 0xFF	; 255
    1dbc:	20 68       	ori	r18, 0x80	; 128
    1dbe:	72 2e       	mov	r7, r18
    1dc0:	2a e0       	ldi	r18, 0x0A	; 10
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	a4 01       	movw	r20, r8
    1dc6:	2a d1       	rcall	.+596    	; 0x201c <__ultoa_invert>
    1dc8:	a8 2e       	mov	r10, r24
    1dca:	a8 18       	sub	r10, r8
    1dcc:	43 c0       	rjmp	.+134    	; 0x1e54 <vfprintf+0x2a4>
    1dce:	85 37       	cpi	r24, 0x75	; 117
    1dd0:	29 f4       	brne	.+10     	; 0x1ddc <vfprintf+0x22c>
    1dd2:	2f 7e       	andi	r18, 0xEF	; 239
    1dd4:	b2 2e       	mov	r11, r18
    1dd6:	2a e0       	ldi	r18, 0x0A	; 10
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	25 c0       	rjmp	.+74     	; 0x1e26 <vfprintf+0x276>
    1ddc:	f2 2f       	mov	r31, r18
    1dde:	f9 7f       	andi	r31, 0xF9	; 249
    1de0:	bf 2e       	mov	r11, r31
    1de2:	8f 36       	cpi	r24, 0x6F	; 111
    1de4:	c1 f0       	breq	.+48     	; 0x1e16 <vfprintf+0x266>
    1de6:	18 f4       	brcc	.+6      	; 0x1dee <vfprintf+0x23e>
    1de8:	88 35       	cpi	r24, 0x58	; 88
    1dea:	79 f0       	breq	.+30     	; 0x1e0a <vfprintf+0x25a>
    1dec:	ad c0       	rjmp	.+346    	; 0x1f48 <vfprintf+0x398>
    1dee:	80 37       	cpi	r24, 0x70	; 112
    1df0:	19 f0       	breq	.+6      	; 0x1df8 <vfprintf+0x248>
    1df2:	88 37       	cpi	r24, 0x78	; 120
    1df4:	21 f0       	breq	.+8      	; 0x1dfe <vfprintf+0x24e>
    1df6:	a8 c0       	rjmp	.+336    	; 0x1f48 <vfprintf+0x398>
    1df8:	2f 2f       	mov	r18, r31
    1dfa:	20 61       	ori	r18, 0x10	; 16
    1dfc:	b2 2e       	mov	r11, r18
    1dfe:	b4 fe       	sbrs	r11, 4
    1e00:	0d c0       	rjmp	.+26     	; 0x1e1c <vfprintf+0x26c>
    1e02:	8b 2d       	mov	r24, r11
    1e04:	84 60       	ori	r24, 0x04	; 4
    1e06:	b8 2e       	mov	r11, r24
    1e08:	09 c0       	rjmp	.+18     	; 0x1e1c <vfprintf+0x26c>
    1e0a:	24 ff       	sbrs	r18, 4
    1e0c:	0a c0       	rjmp	.+20     	; 0x1e22 <vfprintf+0x272>
    1e0e:	9f 2f       	mov	r25, r31
    1e10:	96 60       	ori	r25, 0x06	; 6
    1e12:	b9 2e       	mov	r11, r25
    1e14:	06 c0       	rjmp	.+12     	; 0x1e22 <vfprintf+0x272>
    1e16:	28 e0       	ldi	r18, 0x08	; 8
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	05 c0       	rjmp	.+10     	; 0x1e26 <vfprintf+0x276>
    1e1c:	20 e1       	ldi	r18, 0x10	; 16
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <vfprintf+0x276>
    1e22:	20 e1       	ldi	r18, 0x10	; 16
    1e24:	32 e0       	ldi	r19, 0x02	; 2
    1e26:	f8 01       	movw	r30, r16
    1e28:	b7 fe       	sbrs	r11, 7
    1e2a:	07 c0       	rjmp	.+14     	; 0x1e3a <vfprintf+0x28a>
    1e2c:	60 81       	ld	r22, Z
    1e2e:	71 81       	ldd	r23, Z+1	; 0x01
    1e30:	82 81       	ldd	r24, Z+2	; 0x02
    1e32:	93 81       	ldd	r25, Z+3	; 0x03
    1e34:	0c 5f       	subi	r16, 0xFC	; 252
    1e36:	1f 4f       	sbci	r17, 0xFF	; 255
    1e38:	06 c0       	rjmp	.+12     	; 0x1e46 <vfprintf+0x296>
    1e3a:	60 81       	ld	r22, Z
    1e3c:	71 81       	ldd	r23, Z+1	; 0x01
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0e 5f       	subi	r16, 0xFE	; 254
    1e44:	1f 4f       	sbci	r17, 0xFF	; 255
    1e46:	a4 01       	movw	r20, r8
    1e48:	e9 d0       	rcall	.+466    	; 0x201c <__ultoa_invert>
    1e4a:	a8 2e       	mov	r10, r24
    1e4c:	a8 18       	sub	r10, r8
    1e4e:	fb 2d       	mov	r31, r11
    1e50:	ff 77       	andi	r31, 0x7F	; 127
    1e52:	7f 2e       	mov	r7, r31
    1e54:	76 fe       	sbrs	r7, 6
    1e56:	0b c0       	rjmp	.+22     	; 0x1e6e <vfprintf+0x2be>
    1e58:	37 2d       	mov	r19, r7
    1e5a:	3e 7f       	andi	r19, 0xFE	; 254
    1e5c:	a5 14       	cp	r10, r5
    1e5e:	50 f4       	brcc	.+20     	; 0x1e74 <vfprintf+0x2c4>
    1e60:	74 fe       	sbrs	r7, 4
    1e62:	0a c0       	rjmp	.+20     	; 0x1e78 <vfprintf+0x2c8>
    1e64:	72 fc       	sbrc	r7, 2
    1e66:	08 c0       	rjmp	.+16     	; 0x1e78 <vfprintf+0x2c8>
    1e68:	37 2d       	mov	r19, r7
    1e6a:	3e 7e       	andi	r19, 0xEE	; 238
    1e6c:	05 c0       	rjmp	.+10     	; 0x1e78 <vfprintf+0x2c8>
    1e6e:	ba 2c       	mov	r11, r10
    1e70:	37 2d       	mov	r19, r7
    1e72:	03 c0       	rjmp	.+6      	; 0x1e7a <vfprintf+0x2ca>
    1e74:	ba 2c       	mov	r11, r10
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <vfprintf+0x2ca>
    1e78:	b5 2c       	mov	r11, r5
    1e7a:	34 ff       	sbrs	r19, 4
    1e7c:	0d c0       	rjmp	.+26     	; 0x1e98 <vfprintf+0x2e8>
    1e7e:	fe 01       	movw	r30, r28
    1e80:	ea 0d       	add	r30, r10
    1e82:	f1 1d       	adc	r31, r1
    1e84:	80 81       	ld	r24, Z
    1e86:	80 33       	cpi	r24, 0x30	; 48
    1e88:	11 f4       	brne	.+4      	; 0x1e8e <vfprintf+0x2de>
    1e8a:	39 7e       	andi	r19, 0xE9	; 233
    1e8c:	09 c0       	rjmp	.+18     	; 0x1ea0 <vfprintf+0x2f0>
    1e8e:	32 ff       	sbrs	r19, 2
    1e90:	06 c0       	rjmp	.+12     	; 0x1e9e <vfprintf+0x2ee>
    1e92:	b3 94       	inc	r11
    1e94:	b3 94       	inc	r11
    1e96:	04 c0       	rjmp	.+8      	; 0x1ea0 <vfprintf+0x2f0>
    1e98:	83 2f       	mov	r24, r19
    1e9a:	86 78       	andi	r24, 0x86	; 134
    1e9c:	09 f0       	breq	.+2      	; 0x1ea0 <vfprintf+0x2f0>
    1e9e:	b3 94       	inc	r11
    1ea0:	33 fd       	sbrc	r19, 3
    1ea2:	12 c0       	rjmp	.+36     	; 0x1ec8 <vfprintf+0x318>
    1ea4:	30 ff       	sbrs	r19, 0
    1ea6:	06 c0       	rjmp	.+12     	; 0x1eb4 <vfprintf+0x304>
    1ea8:	5a 2c       	mov	r5, r10
    1eaa:	b3 14       	cp	r11, r3
    1eac:	18 f4       	brcc	.+6      	; 0x1eb4 <vfprintf+0x304>
    1eae:	53 0c       	add	r5, r3
    1eb0:	5b 18       	sub	r5, r11
    1eb2:	b3 2c       	mov	r11, r3
    1eb4:	b3 14       	cp	r11, r3
    1eb6:	60 f4       	brcc	.+24     	; 0x1ed0 <vfprintf+0x320>
    1eb8:	b7 01       	movw	r22, r14
    1eba:	80 e2       	ldi	r24, 0x20	; 32
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	3c 87       	std	Y+12, r19	; 0x0c
    1ec0:	75 d0       	rcall	.+234    	; 0x1fac <fputc>
    1ec2:	b3 94       	inc	r11
    1ec4:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ec6:	f6 cf       	rjmp	.-20     	; 0x1eb4 <vfprintf+0x304>
    1ec8:	b3 14       	cp	r11, r3
    1eca:	10 f4       	brcc	.+4      	; 0x1ed0 <vfprintf+0x320>
    1ecc:	3b 18       	sub	r3, r11
    1ece:	01 c0       	rjmp	.+2      	; 0x1ed2 <vfprintf+0x322>
    1ed0:	31 2c       	mov	r3, r1
    1ed2:	34 ff       	sbrs	r19, 4
    1ed4:	11 c0       	rjmp	.+34     	; 0x1ef8 <vfprintf+0x348>
    1ed6:	b7 01       	movw	r22, r14
    1ed8:	80 e3       	ldi	r24, 0x30	; 48
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	3c 87       	std	Y+12, r19	; 0x0c
    1ede:	66 d0       	rcall	.+204    	; 0x1fac <fputc>
    1ee0:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ee2:	32 ff       	sbrs	r19, 2
    1ee4:	16 c0       	rjmp	.+44     	; 0x1f12 <vfprintf+0x362>
    1ee6:	31 fd       	sbrc	r19, 1
    1ee8:	03 c0       	rjmp	.+6      	; 0x1ef0 <vfprintf+0x340>
    1eea:	88 e7       	ldi	r24, 0x78	; 120
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <vfprintf+0x344>
    1ef0:	88 e5       	ldi	r24, 0x58	; 88
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	b7 01       	movw	r22, r14
    1ef6:	0c c0       	rjmp	.+24     	; 0x1f10 <vfprintf+0x360>
    1ef8:	83 2f       	mov	r24, r19
    1efa:	86 78       	andi	r24, 0x86	; 134
    1efc:	51 f0       	breq	.+20     	; 0x1f12 <vfprintf+0x362>
    1efe:	31 ff       	sbrs	r19, 1
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <vfprintf+0x356>
    1f02:	8b e2       	ldi	r24, 0x2B	; 43
    1f04:	01 c0       	rjmp	.+2      	; 0x1f08 <vfprintf+0x358>
    1f06:	80 e2       	ldi	r24, 0x20	; 32
    1f08:	37 fd       	sbrc	r19, 7
    1f0a:	8d e2       	ldi	r24, 0x2D	; 45
    1f0c:	b7 01       	movw	r22, r14
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	4d d0       	rcall	.+154    	; 0x1fac <fputc>
    1f12:	a5 14       	cp	r10, r5
    1f14:	30 f4       	brcc	.+12     	; 0x1f22 <vfprintf+0x372>
    1f16:	b7 01       	movw	r22, r14
    1f18:	80 e3       	ldi	r24, 0x30	; 48
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	47 d0       	rcall	.+142    	; 0x1fac <fputc>
    1f1e:	5a 94       	dec	r5
    1f20:	f8 cf       	rjmp	.-16     	; 0x1f12 <vfprintf+0x362>
    1f22:	aa 94       	dec	r10
    1f24:	f4 01       	movw	r30, r8
    1f26:	ea 0d       	add	r30, r10
    1f28:	f1 1d       	adc	r31, r1
    1f2a:	80 81       	ld	r24, Z
    1f2c:	b7 01       	movw	r22, r14
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	3d d0       	rcall	.+122    	; 0x1fac <fputc>
    1f32:	a1 10       	cpse	r10, r1
    1f34:	f6 cf       	rjmp	.-20     	; 0x1f22 <vfprintf+0x372>
    1f36:	33 20       	and	r3, r3
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <vfprintf+0x38c>
    1f3a:	5d ce       	rjmp	.-838    	; 0x1bf6 <vfprintf+0x46>
    1f3c:	b7 01       	movw	r22, r14
    1f3e:	80 e2       	ldi	r24, 0x20	; 32
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	34 d0       	rcall	.+104    	; 0x1fac <fputc>
    1f44:	3a 94       	dec	r3
    1f46:	f7 cf       	rjmp	.-18     	; 0x1f36 <vfprintf+0x386>
    1f48:	f7 01       	movw	r30, r14
    1f4a:	86 81       	ldd	r24, Z+6	; 0x06
    1f4c:	97 81       	ldd	r25, Z+7	; 0x07
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <vfprintf+0x3a4>
    1f50:	8f ef       	ldi	r24, 0xFF	; 255
    1f52:	9f ef       	ldi	r25, 0xFF	; 255
    1f54:	2c 96       	adiw	r28, 0x0c	; 12
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	1f 91       	pop	r17
    1f60:	0f 91       	pop	r16
    1f62:	ff 90       	pop	r15
    1f64:	ef 90       	pop	r14
    1f66:	df 90       	pop	r13
    1f68:	cf 90       	pop	r12
    1f6a:	bf 90       	pop	r11
    1f6c:	af 90       	pop	r10
    1f6e:	9f 90       	pop	r9
    1f70:	8f 90       	pop	r8
    1f72:	7f 90       	pop	r7
    1f74:	6f 90       	pop	r6
    1f76:	5f 90       	pop	r5
    1f78:	4f 90       	pop	r4
    1f7a:	3f 90       	pop	r3
    1f7c:	2f 90       	pop	r2
    1f7e:	08 95       	ret

00001f80 <strnlen_P>:
    1f80:	fc 01       	movw	r30, r24
    1f82:	05 90       	lpm	r0, Z+
    1f84:	61 50       	subi	r22, 0x01	; 1
    1f86:	70 40       	sbci	r23, 0x00	; 0
    1f88:	01 10       	cpse	r0, r1
    1f8a:	d8 f7       	brcc	.-10     	; 0x1f82 <strnlen_P+0x2>
    1f8c:	80 95       	com	r24
    1f8e:	90 95       	com	r25
    1f90:	8e 0f       	add	r24, r30
    1f92:	9f 1f       	adc	r25, r31
    1f94:	08 95       	ret

00001f96 <strnlen>:
    1f96:	fc 01       	movw	r30, r24
    1f98:	61 50       	subi	r22, 0x01	; 1
    1f9a:	70 40       	sbci	r23, 0x00	; 0
    1f9c:	01 90       	ld	r0, Z+
    1f9e:	01 10       	cpse	r0, r1
    1fa0:	d8 f7       	brcc	.-10     	; 0x1f98 <strnlen+0x2>
    1fa2:	80 95       	com	r24
    1fa4:	90 95       	com	r25
    1fa6:	8e 0f       	add	r24, r30
    1fa8:	9f 1f       	adc	r25, r31
    1faa:	08 95       	ret

00001fac <fputc>:
    1fac:	0f 93       	push	r16
    1fae:	1f 93       	push	r17
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	fb 01       	movw	r30, r22
    1fb6:	23 81       	ldd	r18, Z+3	; 0x03
    1fb8:	21 fd       	sbrc	r18, 1
    1fba:	03 c0       	rjmp	.+6      	; 0x1fc2 <fputc+0x16>
    1fbc:	8f ef       	ldi	r24, 0xFF	; 255
    1fbe:	9f ef       	ldi	r25, 0xFF	; 255
    1fc0:	28 c0       	rjmp	.+80     	; 0x2012 <fputc+0x66>
    1fc2:	22 ff       	sbrs	r18, 2
    1fc4:	16 c0       	rjmp	.+44     	; 0x1ff2 <fputc+0x46>
    1fc6:	46 81       	ldd	r20, Z+6	; 0x06
    1fc8:	57 81       	ldd	r21, Z+7	; 0x07
    1fca:	24 81       	ldd	r18, Z+4	; 0x04
    1fcc:	35 81       	ldd	r19, Z+5	; 0x05
    1fce:	42 17       	cp	r20, r18
    1fd0:	53 07       	cpc	r21, r19
    1fd2:	44 f4       	brge	.+16     	; 0x1fe4 <fputc+0x38>
    1fd4:	a0 81       	ld	r26, Z
    1fd6:	b1 81       	ldd	r27, Z+1	; 0x01
    1fd8:	9d 01       	movw	r18, r26
    1fda:	2f 5f       	subi	r18, 0xFF	; 255
    1fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fde:	20 83       	st	Z, r18
    1fe0:	31 83       	std	Z+1, r19	; 0x01
    1fe2:	8c 93       	st	X, r24
    1fe4:	26 81       	ldd	r18, Z+6	; 0x06
    1fe6:	37 81       	ldd	r19, Z+7	; 0x07
    1fe8:	2f 5f       	subi	r18, 0xFF	; 255
    1fea:	3f 4f       	sbci	r19, 0xFF	; 255
    1fec:	26 83       	std	Z+6, r18	; 0x06
    1fee:	37 83       	std	Z+7, r19	; 0x07
    1ff0:	10 c0       	rjmp	.+32     	; 0x2012 <fputc+0x66>
    1ff2:	eb 01       	movw	r28, r22
    1ff4:	09 2f       	mov	r16, r25
    1ff6:	18 2f       	mov	r17, r24
    1ff8:	00 84       	ldd	r0, Z+8	; 0x08
    1ffa:	f1 85       	ldd	r31, Z+9	; 0x09
    1ffc:	e0 2d       	mov	r30, r0
    1ffe:	19 95       	eicall
    2000:	89 2b       	or	r24, r25
    2002:	e1 f6       	brne	.-72     	; 0x1fbc <fputc+0x10>
    2004:	8e 81       	ldd	r24, Y+6	; 0x06
    2006:	9f 81       	ldd	r25, Y+7	; 0x07
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	8e 83       	std	Y+6, r24	; 0x06
    200c:	9f 83       	std	Y+7, r25	; 0x07
    200e:	81 2f       	mov	r24, r17
    2010:	90 2f       	mov	r25, r16
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	1f 91       	pop	r17
    2018:	0f 91       	pop	r16
    201a:	08 95       	ret

0000201c <__ultoa_invert>:
    201c:	fa 01       	movw	r30, r20
    201e:	aa 27       	eor	r26, r26
    2020:	28 30       	cpi	r18, 0x08	; 8
    2022:	51 f1       	breq	.+84     	; 0x2078 <__ultoa_invert+0x5c>
    2024:	20 31       	cpi	r18, 0x10	; 16
    2026:	81 f1       	breq	.+96     	; 0x2088 <__ultoa_invert+0x6c>
    2028:	e8 94       	clt
    202a:	6f 93       	push	r22
    202c:	6e 7f       	andi	r22, 0xFE	; 254
    202e:	6e 5f       	subi	r22, 0xFE	; 254
    2030:	7f 4f       	sbci	r23, 0xFF	; 255
    2032:	8f 4f       	sbci	r24, 0xFF	; 255
    2034:	9f 4f       	sbci	r25, 0xFF	; 255
    2036:	af 4f       	sbci	r26, 0xFF	; 255
    2038:	b1 e0       	ldi	r27, 0x01	; 1
    203a:	3e d0       	rcall	.+124    	; 0x20b8 <__ultoa_invert+0x9c>
    203c:	b4 e0       	ldi	r27, 0x04	; 4
    203e:	3c d0       	rcall	.+120    	; 0x20b8 <__ultoa_invert+0x9c>
    2040:	67 0f       	add	r22, r23
    2042:	78 1f       	adc	r23, r24
    2044:	89 1f       	adc	r24, r25
    2046:	9a 1f       	adc	r25, r26
    2048:	a1 1d       	adc	r26, r1
    204a:	68 0f       	add	r22, r24
    204c:	79 1f       	adc	r23, r25
    204e:	8a 1f       	adc	r24, r26
    2050:	91 1d       	adc	r25, r1
    2052:	a1 1d       	adc	r26, r1
    2054:	6a 0f       	add	r22, r26
    2056:	71 1d       	adc	r23, r1
    2058:	81 1d       	adc	r24, r1
    205a:	91 1d       	adc	r25, r1
    205c:	a1 1d       	adc	r26, r1
    205e:	20 d0       	rcall	.+64     	; 0x20a0 <__ultoa_invert+0x84>
    2060:	09 f4       	brne	.+2      	; 0x2064 <__ultoa_invert+0x48>
    2062:	68 94       	set
    2064:	3f 91       	pop	r19
    2066:	2a e0       	ldi	r18, 0x0A	; 10
    2068:	26 9f       	mul	r18, r22
    206a:	11 24       	eor	r1, r1
    206c:	30 19       	sub	r19, r0
    206e:	30 5d       	subi	r19, 0xD0	; 208
    2070:	31 93       	st	Z+, r19
    2072:	de f6       	brtc	.-74     	; 0x202a <__ultoa_invert+0xe>
    2074:	cf 01       	movw	r24, r30
    2076:	08 95       	ret
    2078:	46 2f       	mov	r20, r22
    207a:	47 70       	andi	r20, 0x07	; 7
    207c:	40 5d       	subi	r20, 0xD0	; 208
    207e:	41 93       	st	Z+, r20
    2080:	b3 e0       	ldi	r27, 0x03	; 3
    2082:	0f d0       	rcall	.+30     	; 0x20a2 <__ultoa_invert+0x86>
    2084:	c9 f7       	brne	.-14     	; 0x2078 <__ultoa_invert+0x5c>
    2086:	f6 cf       	rjmp	.-20     	; 0x2074 <__ultoa_invert+0x58>
    2088:	46 2f       	mov	r20, r22
    208a:	4f 70       	andi	r20, 0x0F	; 15
    208c:	40 5d       	subi	r20, 0xD0	; 208
    208e:	4a 33       	cpi	r20, 0x3A	; 58
    2090:	18 f0       	brcs	.+6      	; 0x2098 <__ultoa_invert+0x7c>
    2092:	49 5d       	subi	r20, 0xD9	; 217
    2094:	31 fd       	sbrc	r19, 1
    2096:	40 52       	subi	r20, 0x20	; 32
    2098:	41 93       	st	Z+, r20
    209a:	02 d0       	rcall	.+4      	; 0x20a0 <__ultoa_invert+0x84>
    209c:	a9 f7       	brne	.-22     	; 0x2088 <__ultoa_invert+0x6c>
    209e:	ea cf       	rjmp	.-44     	; 0x2074 <__ultoa_invert+0x58>
    20a0:	b4 e0       	ldi	r27, 0x04	; 4
    20a2:	a6 95       	lsr	r26
    20a4:	97 95       	ror	r25
    20a6:	87 95       	ror	r24
    20a8:	77 95       	ror	r23
    20aa:	67 95       	ror	r22
    20ac:	ba 95       	dec	r27
    20ae:	c9 f7       	brne	.-14     	; 0x20a2 <__ultoa_invert+0x86>
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	61 05       	cpc	r22, r1
    20b4:	71 05       	cpc	r23, r1
    20b6:	08 95       	ret
    20b8:	9b 01       	movw	r18, r22
    20ba:	ac 01       	movw	r20, r24
    20bc:	0a 2e       	mov	r0, r26
    20be:	06 94       	lsr	r0
    20c0:	57 95       	ror	r21
    20c2:	47 95       	ror	r20
    20c4:	37 95       	ror	r19
    20c6:	27 95       	ror	r18
    20c8:	ba 95       	dec	r27
    20ca:	c9 f7       	brne	.-14     	; 0x20be <__ultoa_invert+0xa2>
    20cc:	62 0f       	add	r22, r18
    20ce:	73 1f       	adc	r23, r19
    20d0:	84 1f       	adc	r24, r20
    20d2:	95 1f       	adc	r25, r21
    20d4:	a0 1d       	adc	r26, r0
    20d6:	08 95       	ret

000020d8 <_exit>:
    20d8:	f8 94       	cli

000020da <__stop_program>:
    20da:	ff cf       	rjmp	.-2      	; 0x20da <__stop_program>
