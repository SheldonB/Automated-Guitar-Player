
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002074  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00802000  00002074  00002108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000204  00802060  00802060  00002168  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00002198  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  000021dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bcff  00000000  00000000  00002574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021f9  00000000  00000000  0000e273  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008a94  00000000  00000000  0001046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a70  00000000  00000000  00018f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002ee1f  00000000  00000000  00019970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004fd6  00000000  00000000  0004878f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000498  00000000  00000000  0004d765  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c8a8  00000000  00000000  0004dbfd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	70 c2       	rjmp	.+1248   	; 0x4e2 <__ctors_end>
       2:	00 00       	nop
       4:	8f c2       	rjmp	.+1310   	; 0x524 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c2       	rjmp	.+1306   	; 0x524 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c2       	rjmp	.+1302   	; 0x524 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c2       	rjmp	.+1298   	; 0x524 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c2       	rjmp	.+1294   	; 0x524 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c2       	rjmp	.+1290   	; 0x524 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c2       	rjmp	.+1286   	; 0x524 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c2       	rjmp	.+1282   	; 0x524 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c2       	rjmp	.+1278   	; 0x524 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c2       	rjmp	.+1274   	; 0x524 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c2       	rjmp	.+1270   	; 0x524 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c2       	rjmp	.+1266   	; 0x524 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c2       	rjmp	.+1262   	; 0x524 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c2       	rjmp	.+1258   	; 0x524 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c2       	rjmp	.+1254   	; 0x524 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c2       	rjmp	.+1250   	; 0x524 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c2       	rjmp	.+1246   	; 0x524 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c2       	rjmp	.+1242   	; 0x524 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c2       	rjmp	.+1238   	; 0x524 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c2       	rjmp	.+1234   	; 0x524 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c2       	rjmp	.+1230   	; 0x524 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c2       	rjmp	.+1226   	; 0x524 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c2       	rjmp	.+1222   	; 0x524 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c2       	rjmp	.+1218   	; 0x524 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c2       	rjmp	.+1214   	; 0x524 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c2       	rjmp	.+1210   	; 0x524 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c2       	rjmp	.+1206   	; 0x524 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c2       	rjmp	.+1202   	; 0x524 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c2       	rjmp	.+1198   	; 0x524 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c2       	rjmp	.+1194   	; 0x524 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c2       	rjmp	.+1190   	; 0x524 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c2       	rjmp	.+1186   	; 0x524 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c2       	rjmp	.+1182   	; 0x524 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c2       	rjmp	.+1178   	; 0x524 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c2       	rjmp	.+1174   	; 0x524 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c2       	rjmp	.+1170   	; 0x524 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c2       	rjmp	.+1166   	; 0x524 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c2       	rjmp	.+1162   	; 0x524 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c2       	rjmp	.+1158   	; 0x524 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c2       	rjmp	.+1154   	; 0x524 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c2       	rjmp	.+1150   	; 0x524 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c2       	rjmp	.+1146   	; 0x524 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c2       	rjmp	.+1142   	; 0x524 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c2       	rjmp	.+1138   	; 0x524 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c2       	rjmp	.+1134   	; 0x524 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c2       	rjmp	.+1130   	; 0x524 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c2       	rjmp	.+1126   	; 0x524 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c2       	rjmp	.+1122   	; 0x524 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c2       	rjmp	.+1118   	; 0x524 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c2       	rjmp	.+1114   	; 0x524 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c2       	rjmp	.+1110   	; 0x524 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c2       	rjmp	.+1106   	; 0x524 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c2       	rjmp	.+1102   	; 0x524 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c2       	rjmp	.+1098   	; 0x524 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c2       	rjmp	.+1094   	; 0x524 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c2       	rjmp	.+1090   	; 0x524 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	1f c2       	rjmp	.+1086   	; 0x524 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	1d c2       	rjmp	.+1082   	; 0x524 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	1b c2       	rjmp	.+1078   	; 0x524 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	19 c2       	rjmp	.+1074   	; 0x524 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	17 c2       	rjmp	.+1070   	; 0x524 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	15 c2       	rjmp	.+1066   	; 0x524 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	13 c2       	rjmp	.+1062   	; 0x524 <__bad_interrupt>
      fe:	00 00       	nop
     100:	11 c2       	rjmp	.+1058   	; 0x524 <__bad_interrupt>
     102:	00 00       	nop
     104:	0f c2       	rjmp	.+1054   	; 0x524 <__bad_interrupt>
     106:	00 00       	nop
     108:	0d c2       	rjmp	.+1050   	; 0x524 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	0b c2       	rjmp	.+1046   	; 0x524 <__bad_interrupt>
     10e:	00 00       	nop
     110:	09 c2       	rjmp	.+1042   	; 0x524 <__bad_interrupt>
     112:	00 00       	nop
     114:	07 c2       	rjmp	.+1038   	; 0x524 <__bad_interrupt>
     116:	00 00       	nop
     118:	05 c2       	rjmp	.+1034   	; 0x524 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	03 c2       	rjmp	.+1030   	; 0x524 <__bad_interrupt>
     11e:	00 00       	nop
     120:	01 c2       	rjmp	.+1026   	; 0x524 <__bad_interrupt>
     122:	00 00       	nop
     124:	ff c1       	rjmp	.+1022   	; 0x524 <__bad_interrupt>
     126:	00 00       	nop
     128:	fd c1       	rjmp	.+1018   	; 0x524 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	fb c1       	rjmp	.+1014   	; 0x524 <__bad_interrupt>
     12e:	00 00       	nop
     130:	f9 c1       	rjmp	.+1010   	; 0x524 <__bad_interrupt>
     132:	00 00       	nop
     134:	f7 c1       	rjmp	.+1006   	; 0x524 <__bad_interrupt>
     136:	00 00       	nop
     138:	f5 c1       	rjmp	.+1002   	; 0x524 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	f3 c1       	rjmp	.+998    	; 0x524 <__bad_interrupt>
     13e:	00 00       	nop
     140:	f1 c1       	rjmp	.+994    	; 0x524 <__bad_interrupt>
     142:	00 00       	nop
     144:	ef c1       	rjmp	.+990    	; 0x524 <__bad_interrupt>
     146:	00 00       	nop
     148:	ed c1       	rjmp	.+986    	; 0x524 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	eb c1       	rjmp	.+982    	; 0x524 <__bad_interrupt>
     14e:	00 00       	nop
     150:	e9 c1       	rjmp	.+978    	; 0x524 <__bad_interrupt>
     152:	00 00       	nop
     154:	e7 c1       	rjmp	.+974    	; 0x524 <__bad_interrupt>
     156:	00 00       	nop
     158:	e5 c1       	rjmp	.+970    	; 0x524 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	e3 c1       	rjmp	.+966    	; 0x524 <__bad_interrupt>
     15e:	00 00       	nop
     160:	e1 c1       	rjmp	.+962    	; 0x524 <__bad_interrupt>
     162:	00 00       	nop
     164:	df c1       	rjmp	.+958    	; 0x524 <__bad_interrupt>
     166:	00 00       	nop
     168:	dd c1       	rjmp	.+954    	; 0x524 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	db c1       	rjmp	.+950    	; 0x524 <__bad_interrupt>
     16e:	00 00       	nop
     170:	d9 c1       	rjmp	.+946    	; 0x524 <__bad_interrupt>
     172:	00 00       	nop
     174:	d7 c1       	rjmp	.+942    	; 0x524 <__bad_interrupt>
     176:	00 00       	nop
     178:	d5 c1       	rjmp	.+938    	; 0x524 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	d3 c1       	rjmp	.+934    	; 0x524 <__bad_interrupt>
     17e:	00 00       	nop
     180:	d1 c1       	rjmp	.+930    	; 0x524 <__bad_interrupt>
     182:	00 00       	nop
     184:	cf c1       	rjmp	.+926    	; 0x524 <__bad_interrupt>
     186:	00 00       	nop
     188:	cd c1       	rjmp	.+922    	; 0x524 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	cb c1       	rjmp	.+918    	; 0x524 <__bad_interrupt>
     18e:	00 00       	nop
     190:	c9 c1       	rjmp	.+914    	; 0x524 <__bad_interrupt>
     192:	00 00       	nop
     194:	c7 c1       	rjmp	.+910    	; 0x524 <__bad_interrupt>
     196:	00 00       	nop
     198:	c5 c1       	rjmp	.+906    	; 0x524 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	c3 c1       	rjmp	.+902    	; 0x524 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	c1 c1       	rjmp	.+898    	; 0x524 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	bf c1       	rjmp	.+894    	; 0x524 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	bd c1       	rjmp	.+890    	; 0x524 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	bb c1       	rjmp	.+886    	; 0x524 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	b9 c1       	rjmp	.+882    	; 0x524 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	b7 c1       	rjmp	.+878    	; 0x524 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	b5 c1       	rjmp	.+874    	; 0x524 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	b3 c1       	rjmp	.+870    	; 0x524 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	b1 c1       	rjmp	.+866    	; 0x524 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	af c1       	rjmp	.+862    	; 0x524 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	ad c1       	rjmp	.+858    	; 0x524 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	ab c1       	rjmp	.+854    	; 0x524 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	a9 c1       	rjmp	.+850    	; 0x524 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	a7 c1       	rjmp	.+846    	; 0x524 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	a5 c1       	rjmp	.+842    	; 0x524 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	a3 c1       	rjmp	.+838    	; 0x524 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	a1 c1       	rjmp	.+834    	; 0x524 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	9f c1       	rjmp	.+830    	; 0x524 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	9d c1       	rjmp	.+826    	; 0x524 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	9b c1       	rjmp	.+822    	; 0x524 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	99 c1       	rjmp	.+818    	; 0x524 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	97 c1       	rjmp	.+814    	; 0x524 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	95 c1       	rjmp	.+810    	; 0x524 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	a4 0f       	add	r26, r20
     1fe:	fb 0f       	add	r31, r27
     200:	f7 0f       	add	r31, r23
     202:	f3 0f       	add	r31, r19
     204:	ef 0f       	add	r30, r31
     206:	eb 0f       	add	r30, r27
     208:	e7 0f       	add	r30, r23

0000020a <__trampolines_end>:
     20a:	ff 7e       	andi	r31, 0xEF	; 239
     20c:	3c 18       	sub	r3, r12

0000020e <sysfont_glyphs>:
     20e:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     21e:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     22e:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     23e:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     24e:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     25e:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     26e:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     27e:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     28e:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     29e:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     2ae:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     2be:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     2ce:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     2de:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     2ee:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     2fe:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     30e:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     31e:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     32e:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     33e:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     34e:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     35e:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     36e:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     37e:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     38e:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     39e:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     3ae:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     3be:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     3ce:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     3de:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     3ee:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     3fe:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     40e:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     41e:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     42e:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     43e:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     44e:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     45e:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     46e:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     47e:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     48e:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     49e:	20 40                                                @

000004a0 <option_four>:
     4a0:	50 6c 61 79 20 59 6f 75 72 20 4f 77 6e 00           Play Your Own.

000004ae <option_three>:
     4ae:	4d 69 73 65 72 6c 6f 75 00                          Miserlou.

000004b7 <option_two>:
     4b7:	53 74 61 69 72 77 61 79 20 74 6f 20 48 65 61 76     Stairway to Heav
     4c7:	65 6e 00                                            en.

000004ca <option_one>:
     4ca:	41 72 70 65 67 67 69 6f 00                          Arpeggio.

000004d3 <main_menu_title>:
     4d3:	53 65 6c 65 63 74 20 61 20 53 6f 6e 67 00 00        Select a Song..

000004e2 <__ctors_end>:
     4e2:	11 24       	eor	r1, r1
     4e4:	1f be       	out	0x3f, r1	; 63
     4e6:	cf ef       	ldi	r28, 0xFF	; 255
     4e8:	cd bf       	out	0x3d, r28	; 61
     4ea:	df e5       	ldi	r29, 0x5F	; 95
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	00 e0       	ldi	r16, 0x00	; 0
     4f0:	0c bf       	out	0x3c, r16	; 60

000004f2 <__do_copy_data>:
     4f2:	10 e2       	ldi	r17, 0x20	; 32
     4f4:	a0 e0       	ldi	r26, 0x00	; 0
     4f6:	b0 e2       	ldi	r27, 0x20	; 32
     4f8:	e4 e7       	ldi	r30, 0x74	; 116
     4fa:	f0 e2       	ldi	r31, 0x20	; 32
     4fc:	00 e0       	ldi	r16, 0x00	; 0
     4fe:	0b bf       	out	0x3b, r16	; 59
     500:	02 c0       	rjmp	.+4      	; 0x506 <__do_copy_data+0x14>
     502:	07 90       	elpm	r0, Z+
     504:	0d 92       	st	X+, r0
     506:	a0 36       	cpi	r26, 0x60	; 96
     508:	b1 07       	cpc	r27, r17
     50a:	d9 f7       	brne	.-10     	; 0x502 <__do_copy_data+0x10>

0000050c <__do_clear_bss>:
     50c:	22 e2       	ldi	r18, 0x22	; 34
     50e:	a0 e6       	ldi	r26, 0x60	; 96
     510:	b0 e2       	ldi	r27, 0x20	; 32
     512:	01 c0       	rjmp	.+2      	; 0x516 <.do_clear_bss_start>

00000514 <.do_clear_bss_loop>:
     514:	1d 92       	st	X+, r1

00000516 <.do_clear_bss_start>:
     516:	a4 36       	cpi	r26, 0x64	; 100
     518:	b2 07       	cpc	r27, r18
     51a:	e1 f7       	brne	.-8      	; 0x514 <.do_clear_bss_loop>
     51c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <main>
     520:	0c 94 38 10 	jmp	0x2070	; 0x2070 <_exit>

00000524 <__bad_interrupt>:
     524:	6d cd       	rjmp	.-1318   	; 0x0 <__vectors>

00000526 <jets_delay_ms>:
#include "jets_util.h"

void jets_delay_ms(unsigned int delay)
{
	unsigned int i;
	for (i = 0; i < delay/10; i++)
     526:	9c 01       	movw	r18, r24
     528:	ad ec       	ldi	r26, 0xCD	; 205
     52a:	bc ec       	ldi	r27, 0xCC	; 204
     52c:	0e 94 29 10 	call	0x2052	; 0x2052 <__umulhisi3>
     530:	96 95       	lsr	r25
     532:	87 95       	ror	r24
     534:	96 95       	lsr	r25
     536:	87 95       	ror	r24
     538:	96 95       	lsr	r25
     53a:	87 95       	ror	r24
     53c:	00 97       	sbiw	r24, 0x00	; 0
     53e:	69 f0       	breq	.+26     	; 0x55a <jets_delay_ms+0x34>
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     544:	e3 ec       	ldi	r30, 0xC3	; 195
     546:	f9 e0       	ldi	r31, 0x09	; 9
     548:	31 97       	sbiw	r30, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <jets_delay_ms+0x22>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <jets_delay_ms+0x28>
     54e:	00 00       	nop
     550:	2f 5f       	subi	r18, 0xFF	; 255
     552:	3f 4f       	sbci	r19, 0xFF	; 255
     554:	28 17       	cp	r18, r24
     556:	39 07       	cpc	r19, r25
     558:	a9 f7       	brne	.-22     	; 0x544 <jets_delay_ms+0x1e>
     55a:	08 95       	ret

0000055c <solenoid_init>:
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     55c:	e0 e2       	ldi	r30, 0x20	; 32
     55e:	f6 e0       	ldi	r31, 0x06	; 6
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	81 83       	std	Z+1, r24	; 0x01
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	81 83       	std	Z+1, r24	; 0x01
     568:	84 e0       	ldi	r24, 0x04	; 4
     56a:	81 83       	std	Z+1, r24	; 0x01
     56c:	e0 e0       	ldi	r30, 0x00	; 0
     56e:	f6 e0       	ldi	r31, 0x06	; 6
     570:	80 e1       	ldi	r24, 0x10	; 16
     572:	81 83       	std	Z+1, r24	; 0x01
     574:	80 e2       	ldi	r24, 0x20	; 32
     576:	81 83       	std	Z+1, r24	; 0x01
     578:	80 e4       	ldi	r24, 0x40	; 64
     57a:	81 83       	std	Z+1, r24	; 0x01
     57c:	08 95       	ret

0000057e <solenoid_high_low>:
	ioport_set_pin_dir(J2_PIN5, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(J2_PIN6, IOPORT_DIR_OUTPUT);
}

void solenoid_high_low(port_pin_t pin) 
{
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     586:	c8 2f       	mov	r28, r24
     588:	c6 95       	lsr	r28
     58a:	c6 95       	lsr	r28
     58c:	c6 95       	lsr	r28
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     58e:	90 e2       	ldi	r25, 0x20	; 32
     590:	c9 9f       	mul	r28, r25
     592:	e0 01       	movw	r28, r0
     594:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     596:	da 5f       	subi	r29, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     598:	87 70       	andi	r24, 0x07	; 7
     59a:	01 e0       	ldi	r16, 0x01	; 1
     59c:	10 e0       	ldi	r17, 0x00	; 0
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <solenoid_high_low+0x26>
     5a0:	00 0f       	add	r16, r16
     5a2:	11 1f       	adc	r17, r17
     5a4:	8a 95       	dec	r24
     5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <solenoid_high_low+0x22>

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
     5a8:	0f 83       	std	Y+7, r16	; 0x07
	ioport_toggle_pin(pin);
	jets_delay_ms(50);
     5aa:	82 e3       	ldi	r24, 0x32	; 50
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	bb df       	rcall	.-138    	; 0x526 <jets_delay_ms>
     5b0:	0f 83       	std	Y+7, r16	; 0x07
	ioport_toggle_pin(pin);
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	08 95       	ret

000005bc <play_note>:
		play_note(song[i]);
	}	
}

void play_note(struct SongNote note)
{
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	d7 2f       	mov	r29, r23
     5c2:	c8 2f       	mov	r28, r24
	solenoid_high_low(note.port);
     5c4:	86 2f       	mov	r24, r22
     5c6:	db df       	rcall	.-74     	; 0x57e <solenoid_high_low>
	jets_delay_ms(note.delay);
     5c8:	8d 2f       	mov	r24, r29
     5ca:	9c 2f       	mov	r25, r28
     5cc:	ac df       	rcall	.-168    	; 0x526 <jets_delay_ms>
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <play_song>:

unsigned int SAMPLE_SONG_LENGTH = 6;


void play_song(struct SongNote song[], unsigned int length)
{
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
	unsigned int i;
	for (i = 0; i < length; i++)
     5dc:	61 15       	cp	r22, r1
     5de:	71 05       	cpc	r23, r1
     5e0:	81 f0       	breq	.+32     	; 0x602 <play_song+0x2e>
     5e2:	ec 01       	movw	r28, r24
     5e4:	8b 01       	movw	r16, r22
     5e6:	00 0f       	add	r16, r16
     5e8:	11 1f       	adc	r17, r17
     5ea:	60 0f       	add	r22, r16
     5ec:	71 1f       	adc	r23, r17
     5ee:	8c 01       	movw	r16, r24
     5f0:	06 0f       	add	r16, r22
     5f2:	17 1f       	adc	r17, r23
	{
		play_note(song[i]);
     5f4:	69 91       	ld	r22, Y+
     5f6:	79 91       	ld	r23, Y+
     5f8:	89 91       	ld	r24, Y+
     5fa:	e0 df       	rcall	.-64     	; 0x5bc <play_note>


void play_song(struct SongNote song[], unsigned int length)
{
	unsigned int i;
	for (i = 0; i < length; i++)
     5fc:	c0 17       	cp	r28, r16
     5fe:	d1 07       	cpc	r29, r17
     600:	c9 f7       	brne	.-14     	; 0x5f4 <play_song+0x20>
	{
		play_note(song[i]);
	}	
}
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	08 95       	ret

0000060c <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     60c:	bf 92       	push	r11
     60e:	cf 92       	push	r12
     610:	df 92       	push	r13
     612:	ef 92       	push	r14
     614:	ff 92       	push	r15
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	1f 92       	push	r1
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     624:	e0 e0       	ldi	r30, 0x00	; 0
     626:	f6 e0       	ldi	r31, 0x06	; 6
     628:	88 e0       	ldi	r24, 0x08	; 8
     62a:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     62c:	85 83       	std	Z+5, r24	; 0x05
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     62e:	0f 2e       	mov	r0, r31
     630:	fb e2       	ldi	r31, 0x2B	; 43
     632:	bf 2e       	mov	r11, r31
     634:	f0 2d       	mov	r31, r0
     636:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     638:	80 ea       	ldi	r24, 0xA0	; 160
     63a:	99 e0       	ldi	r25, 0x09	; 9
     63c:	54 d6       	rcall	.+3240   	; 0x12e6 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     63e:	c1 2c       	mov	r12, r1
     640:	d1 2c       	mov	r13, r1
     642:	76 01       	movw	r14, r12
     644:	00 e4       	ldi	r16, 0x40	; 64
     646:	12 e4       	ldi	r17, 0x42	; 66
     648:	2f e0       	ldi	r18, 0x0F	; 15
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	43 e0       	ldi	r20, 0x03	; 3
     64e:	be 01       	movw	r22, r28
     650:	6f 5f       	subi	r22, 0xFF	; 255
     652:	7f 4f       	sbci	r23, 0xFF	; 255
     654:	80 ea       	ldi	r24, 0xA0	; 160
     656:	99 e0       	ldi	r25, 0x09	; 9
     658:	75 d6       	rcall	.+3306   	; 0x1344 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     65a:	00 e6       	ldi	r16, 0x60	; 96
     65c:	16 e0       	ldi	r17, 0x06	; 6
     65e:	ff 24       	eor	r15, r15
     660:	f3 94       	inc	r15
     662:	f8 01       	movw	r30, r16
     664:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     666:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     668:	be 01       	movw	r22, r28
     66a:	6f 5f       	subi	r22, 0xFF	; 255
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	80 ea       	ldi	r24, 0xA0	; 160
     670:	99 e0       	ldi	r25, 0x09	; 9
     672:	82 d6       	rcall	.+3332   	; 0x1378 <usart_spi_select_device>
     674:	f8 01       	movw	r30, r16
     676:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     678:	e0 ea       	ldi	r30, 0xA0	; 160
     67a:	f9 e0       	ldi	r31, 0x09	; 9
     67c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     67e:	85 ff       	sbrs	r24, 5
     680:	fd cf       	rjmp	.-6      	; 0x67c <st7565r_init+0x70>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     682:	80 ea       	ldi	r24, 0xA0	; 160
     684:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     688:	e0 ea       	ldi	r30, 0xA0	; 160
     68a:	f9 e0       	ldi	r31, 0x09	; 9
     68c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     68e:	86 ff       	sbrs	r24, 6
     690:	fd cf       	rjmp	.-6      	; 0x68c <st7565r_init+0x80>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     692:	e0 ea       	ldi	r30, 0xA0	; 160
     694:	f9 e0       	ldi	r31, 0x09	; 9
     696:	80 e4       	ldi	r24, 0x40	; 64
     698:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     69a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     69c:	be 01       	movw	r22, r28
     69e:	6f 5f       	subi	r22, 0xFF	; 255
     6a0:	7f 4f       	sbci	r23, 0xFF	; 255
     6a2:	80 ea       	ldi	r24, 0xA0	; 160
     6a4:	99 e0       	ldi	r25, 0x09	; 9
     6a6:	7e d6       	rcall	.+3324   	; 0x13a4 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6a8:	8b e2       	ldi	r24, 0x2B	; 43
     6aa:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6ac:	be 01       	movw	r22, r28
     6ae:	6f 5f       	subi	r22, 0xFF	; 255
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	80 ea       	ldi	r24, 0xA0	; 160
     6b4:	99 e0       	ldi	r25, 0x09	; 9
     6b6:	60 d6       	rcall	.+3264   	; 0x1378 <usart_spi_select_device>
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6be:	e0 ea       	ldi	r30, 0xA0	; 160
     6c0:	f9 e0       	ldi	r31, 0x09	; 9
     6c2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6c4:	85 ff       	sbrs	r24, 5
     6c6:	fd cf       	rjmp	.-6      	; 0x6c2 <st7565r_init+0xb6>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6c8:	86 ea       	ldi	r24, 0xA6	; 166
     6ca:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6ce:	e0 ea       	ldi	r30, 0xA0	; 160
     6d0:	f9 e0       	ldi	r31, 0x09	; 9
     6d2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6d4:	86 ff       	sbrs	r24, 6
     6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <st7565r_init+0xc6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6d8:	e0 ea       	ldi	r30, 0xA0	; 160
     6da:	f9 e0       	ldi	r31, 0x09	; 9
     6dc:	80 e4       	ldi	r24, 0x40	; 64
     6de:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6e0:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6e2:	be 01       	movw	r22, r28
     6e4:	6f 5f       	subi	r22, 0xFF	; 255
     6e6:	7f 4f       	sbci	r23, 0xFF	; 255
     6e8:	80 ea       	ldi	r24, 0xA0	; 160
     6ea:	99 e0       	ldi	r25, 0x09	; 9
     6ec:	5b d6       	rcall	.+3254   	; 0x13a4 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6ee:	8b e2       	ldi	r24, 0x2B	; 43
     6f0:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6f2:	be 01       	movw	r22, r28
     6f4:	6f 5f       	subi	r22, 0xFF	; 255
     6f6:	7f 4f       	sbci	r23, 0xFF	; 255
     6f8:	80 ea       	ldi	r24, 0xA0	; 160
     6fa:	99 e0       	ldi	r25, 0x09	; 9
     6fc:	3d d6       	rcall	.+3194   	; 0x1378 <usart_spi_select_device>
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     704:	e0 ea       	ldi	r30, 0xA0	; 160
     706:	f9 e0       	ldi	r31, 0x09	; 9
     708:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     70a:	85 ff       	sbrs	r24, 5
     70c:	fd cf       	rjmp	.-6      	; 0x708 <st7565r_init+0xfc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     70e:	88 ec       	ldi	r24, 0xC8	; 200
     710:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     714:	e0 ea       	ldi	r30, 0xA0	; 160
     716:	f9 e0       	ldi	r31, 0x09	; 9
     718:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     71a:	86 ff       	sbrs	r24, 6
     71c:	fd cf       	rjmp	.-6      	; 0x718 <st7565r_init+0x10c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     71e:	e0 ea       	ldi	r30, 0xA0	; 160
     720:	f9 e0       	ldi	r31, 0x09	; 9
     722:	80 e4       	ldi	r24, 0x40	; 64
     724:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     726:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     728:	be 01       	movw	r22, r28
     72a:	6f 5f       	subi	r22, 0xFF	; 255
     72c:	7f 4f       	sbci	r23, 0xFF	; 255
     72e:	80 ea       	ldi	r24, 0xA0	; 160
     730:	99 e0       	ldi	r25, 0x09	; 9
     732:	38 d6       	rcall	.+3184   	; 0x13a4 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     734:	8b e2       	ldi	r24, 0x2B	; 43
     736:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     738:	be 01       	movw	r22, r28
     73a:	6f 5f       	subi	r22, 0xFF	; 255
     73c:	7f 4f       	sbci	r23, 0xFF	; 255
     73e:	80 ea       	ldi	r24, 0xA0	; 160
     740:	99 e0       	ldi	r25, 0x09	; 9
     742:	1a d6       	rcall	.+3124   	; 0x1378 <usart_spi_select_device>
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     74a:	e0 ea       	ldi	r30, 0xA0	; 160
     74c:	f9 e0       	ldi	r31, 0x09	; 9
     74e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     750:	85 ff       	sbrs	r24, 5
     752:	fd cf       	rjmp	.-6      	; 0x74e <st7565r_init+0x142>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     754:	82 ea       	ldi	r24, 0xA2	; 162
     756:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     75a:	e0 ea       	ldi	r30, 0xA0	; 160
     75c:	f9 e0       	ldi	r31, 0x09	; 9
     75e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     760:	86 ff       	sbrs	r24, 6
     762:	fd cf       	rjmp	.-6      	; 0x75e <st7565r_init+0x152>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     764:	e0 ea       	ldi	r30, 0xA0	; 160
     766:	f9 e0       	ldi	r31, 0x09	; 9
     768:	80 e4       	ldi	r24, 0x40	; 64
     76a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     76c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     76e:	be 01       	movw	r22, r28
     770:	6f 5f       	subi	r22, 0xFF	; 255
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	80 ea       	ldi	r24, 0xA0	; 160
     776:	99 e0       	ldi	r25, 0x09	; 9
     778:	15 d6       	rcall	.+3114   	; 0x13a4 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     77a:	8b e2       	ldi	r24, 0x2B	; 43
     77c:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     77e:	be 01       	movw	r22, r28
     780:	6f 5f       	subi	r22, 0xFF	; 255
     782:	7f 4f       	sbci	r23, 0xFF	; 255
     784:	80 ea       	ldi	r24, 0xA0	; 160
     786:	99 e0       	ldi	r25, 0x09	; 9
     788:	f7 d5       	rcall	.+3054   	; 0x1378 <usart_spi_select_device>
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     790:	e0 ea       	ldi	r30, 0xA0	; 160
     792:	f9 e0       	ldi	r31, 0x09	; 9
     794:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     796:	85 ff       	sbrs	r24, 5
     798:	fd cf       	rjmp	.-6      	; 0x794 <st7565r_init+0x188>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     79a:	8f e2       	ldi	r24, 0x2F	; 47
     79c:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7a0:	e0 ea       	ldi	r30, 0xA0	; 160
     7a2:	f9 e0       	ldi	r31, 0x09	; 9
     7a4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7a6:	86 ff       	sbrs	r24, 6
     7a8:	fd cf       	rjmp	.-6      	; 0x7a4 <st7565r_init+0x198>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7aa:	e0 ea       	ldi	r30, 0xA0	; 160
     7ac:	f9 e0       	ldi	r31, 0x09	; 9
     7ae:	80 e4       	ldi	r24, 0x40	; 64
     7b0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7b2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7b4:	be 01       	movw	r22, r28
     7b6:	6f 5f       	subi	r22, 0xFF	; 255
     7b8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ba:	80 ea       	ldi	r24, 0xA0	; 160
     7bc:	99 e0       	ldi	r25, 0x09	; 9
     7be:	f2 d5       	rcall	.+3044   	; 0x13a4 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7c0:	8b e2       	ldi	r24, 0x2B	; 43
     7c2:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7c4:	be 01       	movw	r22, r28
     7c6:	6f 5f       	subi	r22, 0xFF	; 255
     7c8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ca:	80 ea       	ldi	r24, 0xA0	; 160
     7cc:	99 e0       	ldi	r25, 0x09	; 9
     7ce:	d4 d5       	rcall	.+2984   	; 0x1378 <usart_spi_select_device>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7d6:	e0 ea       	ldi	r30, 0xA0	; 160
     7d8:	f9 e0       	ldi	r31, 0x09	; 9
     7da:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7dc:	85 ff       	sbrs	r24, 5
     7de:	fd cf       	rjmp	.-6      	; 0x7da <st7565r_init+0x1ce>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7e0:	88 ef       	ldi	r24, 0xF8	; 248
     7e2:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7e6:	e0 ea       	ldi	r30, 0xA0	; 160
     7e8:	f9 e0       	ldi	r31, 0x09	; 9
     7ea:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7ec:	86 ff       	sbrs	r24, 6
     7ee:	fd cf       	rjmp	.-6      	; 0x7ea <st7565r_init+0x1de>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7f0:	e0 ea       	ldi	r30, 0xA0	; 160
     7f2:	f9 e0       	ldi	r31, 0x09	; 9
     7f4:	80 e4       	ldi	r24, 0x40	; 64
     7f6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7f8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7fa:	be 01       	movw	r22, r28
     7fc:	6f 5f       	subi	r22, 0xFF	; 255
     7fe:	7f 4f       	sbci	r23, 0xFF	; 255
     800:	80 ea       	ldi	r24, 0xA0	; 160
     802:	99 e0       	ldi	r25, 0x09	; 9
     804:	cf d5       	rcall	.+2974   	; 0x13a4 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     806:	8b e2       	ldi	r24, 0x2B	; 43
     808:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     80a:	be 01       	movw	r22, r28
     80c:	6f 5f       	subi	r22, 0xFF	; 255
     80e:	7f 4f       	sbci	r23, 0xFF	; 255
     810:	80 ea       	ldi	r24, 0xA0	; 160
     812:	99 e0       	ldi	r25, 0x09	; 9
     814:	b1 d5       	rcall	.+2914   	; 0x1378 <usart_spi_select_device>
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     81c:	e0 ea       	ldi	r30, 0xA0	; 160
     81e:	f9 e0       	ldi	r31, 0x09	; 9
     820:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     822:	85 ff       	sbrs	r24, 5
     824:	fd cf       	rjmp	.-6      	; 0x820 <st7565r_init+0x214>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     826:	10 92 a0 09 	sts	0x09A0, r1
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     82a:	e0 ea       	ldi	r30, 0xA0	; 160
     82c:	f9 e0       	ldi	r31, 0x09	; 9
     82e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     830:	86 ff       	sbrs	r24, 6
     832:	fd cf       	rjmp	.-6      	; 0x82e <st7565r_init+0x222>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     834:	e0 ea       	ldi	r30, 0xA0	; 160
     836:	f9 e0       	ldi	r31, 0x09	; 9
     838:	80 e4       	ldi	r24, 0x40	; 64
     83a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     83c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     83e:	be 01       	movw	r22, r28
     840:	6f 5f       	subi	r22, 0xFF	; 255
     842:	7f 4f       	sbci	r23, 0xFF	; 255
     844:	80 ea       	ldi	r24, 0xA0	; 160
     846:	99 e0       	ldi	r25, 0x09	; 9
     848:	ad d5       	rcall	.+2906   	; 0x13a4 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     84a:	8b e2       	ldi	r24, 0x2B	; 43
     84c:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     84e:	be 01       	movw	r22, r28
     850:	6f 5f       	subi	r22, 0xFF	; 255
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	80 ea       	ldi	r24, 0xA0	; 160
     856:	99 e0       	ldi	r25, 0x09	; 9
     858:	8f d5       	rcall	.+2846   	; 0x1378 <usart_spi_select_device>
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     860:	e0 ea       	ldi	r30, 0xA0	; 160
     862:	f9 e0       	ldi	r31, 0x09	; 9
     864:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     866:	85 ff       	sbrs	r24, 5
     868:	fd cf       	rjmp	.-6      	; 0x864 <st7565r_init+0x258>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     86a:	81 e2       	ldi	r24, 0x21	; 33
     86c:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     870:	e0 ea       	ldi	r30, 0xA0	; 160
     872:	f9 e0       	ldi	r31, 0x09	; 9
     874:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     876:	86 ff       	sbrs	r24, 6
     878:	fd cf       	rjmp	.-6      	; 0x874 <st7565r_init+0x268>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     87a:	e0 ea       	ldi	r30, 0xA0	; 160
     87c:	f9 e0       	ldi	r31, 0x09	; 9
     87e:	80 e4       	ldi	r24, 0x40	; 64
     880:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     882:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     884:	be 01       	movw	r22, r28
     886:	6f 5f       	subi	r22, 0xFF	; 255
     888:	7f 4f       	sbci	r23, 0xFF	; 255
     88a:	80 ea       	ldi	r24, 0xA0	; 160
     88c:	99 e0       	ldi	r25, 0x09	; 9
     88e:	8a d5       	rcall	.+2836   	; 0x13a4 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     890:	8b e2       	ldi	r24, 0x2B	; 43
     892:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     894:	be 01       	movw	r22, r28
     896:	6f 5f       	subi	r22, 0xFF	; 255
     898:	7f 4f       	sbci	r23, 0xFF	; 255
     89a:	80 ea       	ldi	r24, 0xA0	; 160
     89c:	99 e0       	ldi	r25, 0x09	; 9
     89e:	6c d5       	rcall	.+2776   	; 0x1378 <usart_spi_select_device>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8a6:	e0 ea       	ldi	r30, 0xA0	; 160
     8a8:	f9 e0       	ldi	r31, 0x09	; 9
     8aa:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8ac:	85 ff       	sbrs	r24, 5
     8ae:	fd cf       	rjmp	.-6      	; 0x8aa <st7565r_init+0x29e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8b0:	81 e8       	ldi	r24, 0x81	; 129
     8b2:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8b6:	e0 ea       	ldi	r30, 0xA0	; 160
     8b8:	f9 e0       	ldi	r31, 0x09	; 9
     8ba:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8bc:	86 ff       	sbrs	r24, 6
     8be:	fd cf       	rjmp	.-6      	; 0x8ba <st7565r_init+0x2ae>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8c0:	e0 ea       	ldi	r30, 0xA0	; 160
     8c2:	f9 e0       	ldi	r31, 0x09	; 9
     8c4:	80 e4       	ldi	r24, 0x40	; 64
     8c6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8c8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8ca:	be 01       	movw	r22, r28
     8cc:	6f 5f       	subi	r22, 0xFF	; 255
     8ce:	7f 4f       	sbci	r23, 0xFF	; 255
     8d0:	80 ea       	ldi	r24, 0xA0	; 160
     8d2:	99 e0       	ldi	r25, 0x09	; 9
     8d4:	67 d5       	rcall	.+2766   	; 0x13a4 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8d6:	8b e2       	ldi	r24, 0x2B	; 43
     8d8:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8da:	be 01       	movw	r22, r28
     8dc:	6f 5f       	subi	r22, 0xFF	; 255
     8de:	7f 4f       	sbci	r23, 0xFF	; 255
     8e0:	80 ea       	ldi	r24, 0xA0	; 160
     8e2:	99 e0       	ldi	r25, 0x09	; 9
     8e4:	49 d5       	rcall	.+2706   	; 0x1378 <usart_spi_select_device>
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8ec:	e0 ea       	ldi	r30, 0xA0	; 160
     8ee:	f9 e0       	ldi	r31, 0x09	; 9
     8f0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8f2:	85 ff       	sbrs	r24, 5
     8f4:	fd cf       	rjmp	.-6      	; 0x8f0 <st7565r_init+0x2e4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8f6:	81 e2       	ldi	r24, 0x21	; 33
     8f8:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8fc:	e0 ea       	ldi	r30, 0xA0	; 160
     8fe:	f9 e0       	ldi	r31, 0x09	; 9
     900:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     902:	86 ff       	sbrs	r24, 6
     904:	fd cf       	rjmp	.-6      	; 0x900 <st7565r_init+0x2f4>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     906:	e0 ea       	ldi	r30, 0xA0	; 160
     908:	f9 e0       	ldi	r31, 0x09	; 9
     90a:	80 e4       	ldi	r24, 0x40	; 64
     90c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     90e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     910:	be 01       	movw	r22, r28
     912:	6f 5f       	subi	r22, 0xFF	; 255
     914:	7f 4f       	sbci	r23, 0xFF	; 255
     916:	80 ea       	ldi	r24, 0xA0	; 160
     918:	99 e0       	ldi	r25, 0x09	; 9
     91a:	44 d5       	rcall	.+2696   	; 0x13a4 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     91c:	8b e2       	ldi	r24, 0x2B	; 43
     91e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     920:	be 01       	movw	r22, r28
     922:	6f 5f       	subi	r22, 0xFF	; 255
     924:	7f 4f       	sbci	r23, 0xFF	; 255
     926:	80 ea       	ldi	r24, 0xA0	; 160
     928:	99 e0       	ldi	r25, 0x09	; 9
     92a:	26 d5       	rcall	.+2636   	; 0x1378 <usart_spi_select_device>
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     932:	e0 ea       	ldi	r30, 0xA0	; 160
     934:	f9 e0       	ldi	r31, 0x09	; 9
     936:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     938:	85 ff       	sbrs	r24, 5
     93a:	fd cf       	rjmp	.-6      	; 0x936 <st7565r_init+0x32a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     93c:	8f ea       	ldi	r24, 0xAF	; 175
     93e:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     942:	e0 ea       	ldi	r30, 0xA0	; 160
     944:	f9 e0       	ldi	r31, 0x09	; 9
     946:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     948:	86 ff       	sbrs	r24, 6
     94a:	fd cf       	rjmp	.-6      	; 0x946 <st7565r_init+0x33a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     94c:	e0 ea       	ldi	r30, 0xA0	; 160
     94e:	f9 e0       	ldi	r31, 0x09	; 9
     950:	80 e4       	ldi	r24, 0x40	; 64
     952:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     954:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     956:	be 01       	movw	r22, r28
     958:	6f 5f       	subi	r22, 0xFF	; 255
     95a:	7f 4f       	sbci	r23, 0xFF	; 255
     95c:	80 ea       	ldi	r24, 0xA0	; 160
     95e:	99 e0       	ldi	r25, 0x09	; 9
     960:	21 d5       	rcall	.+2626   	; 0x13a4 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     962:	0f 90       	pop	r0
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	bf 90       	pop	r11
     976:	08 95       	ret

00000978 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     978:	8f ef       	ldi	r24, 0xFF	; 255
     97a:	80 93 70 00 	sts	0x0070, r24
     97e:	80 93 71 00 	sts	0x0071, r24
     982:	80 93 72 00 	sts	0x0072, r24
     986:	80 93 73 00 	sts	0x0073, r24
     98a:	80 93 74 00 	sts	0x0074, r24
     98e:	80 93 75 00 	sts	0x0075, r24
     992:	80 93 76 00 	sts	0x0076, r24
     996:	08 95       	ret

00000998 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     998:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     99a:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     99c:	e8 2f       	mov	r30, r24
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	e0 59       	subi	r30, 0x90	; 144
     9a2:	ff 4f       	sbci	r31, 0xFF	; 255
     9a4:	60 95       	com	r22
     9a6:	80 81       	ld	r24, Z
     9a8:	68 23       	and	r22, r24
     9aa:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9ac:	9f bf       	out	0x3f, r25	; 63
     9ae:	08 95       	ret

000009b0 <gfx_mono_st7565r_put_page>:
 */
void gfx_mono_st7565r_get_page(gfx_mono_color_t *data, gfx_coord_t page,
		gfx_coord_t column, gfx_coord_t width)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_get_page(data, page, column, width);
     9b0:	6f 92       	push	r6
     9b2:	7f 92       	push	r7
     9b4:	8f 92       	push	r8
     9b6:	9f 92       	push	r9
     9b8:	af 92       	push	r10
     9ba:	bf 92       	push	r11
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	1f 92       	push	r1
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	8c 01       	movw	r16, r24
     9d4:	e6 2e       	mov	r14, r22
     9d6:	f4 2e       	mov	r15, r20
     9d8:	d2 2e       	mov	r13, r18
     9da:	eb d1       	rcall	.+982    	; 0xdb2 <gfx_mono_framebuffer_put_page>
     9dc:	8e 2d       	mov	r24, r14
     9de:	8f 70       	andi	r24, 0x0F	; 15
     9e0:	80 6b       	ori	r24, 0xB0	; 176
     9e2:	e8 2e       	mov	r14, r24
     9e4:	8b e2       	ldi	r24, 0x2B	; 43
     9e6:	89 83       	std	Y+1, r24	; 0x01
     9e8:	be 01       	movw	r22, r28
     9ea:	6f 5f       	subi	r22, 0xFF	; 255
     9ec:	7f 4f       	sbci	r23, 0xFF	; 255
     9ee:	80 ea       	ldi	r24, 0xA0	; 160
     9f0:	99 e0       	ldi	r25, 0x09	; 9
     9f2:	c2 d4       	rcall	.+2436   	; 0x1378 <usart_spi_select_device>
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	80 93 66 06 	sts	0x0666, r24
     9fa:	e0 ea       	ldi	r30, 0xA0	; 160
     9fc:	f9 e0       	ldi	r31, 0x09	; 9
     9fe:	81 81       	ldd	r24, Z+1	; 0x01
     a00:	85 ff       	sbrs	r24, 5
     a02:	fd cf       	rjmp	.-6      	; 0x9fe <gfx_mono_st7565r_put_page+0x4e>
     a04:	e0 92 a0 09 	sts	0x09A0, r14
     a08:	e0 ea       	ldi	r30, 0xA0	; 160
     a0a:	f9 e0       	ldi	r31, 0x09	; 9
     a0c:	91 81       	ldd	r25, Z+1	; 0x01
     a0e:	96 ff       	sbrs	r25, 6
     a10:	fd cf       	rjmp	.-6      	; 0xa0c <gfx_mono_st7565r_put_page+0x5c>
     a12:	e0 ea       	ldi	r30, 0xA0	; 160
     a14:	f9 e0       	ldi	r31, 0x09	; 9
     a16:	80 e4       	ldi	r24, 0x40	; 64
     a18:	81 83       	std	Z+1, r24	; 0x01
     a1a:	80 81       	ld	r24, Z
     a1c:	be 01       	movw	r22, r28
     a1e:	6f 5f       	subi	r22, 0xFF	; 255
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	80 ea       	ldi	r24, 0xA0	; 160
     a24:	99 e0       	ldi	r25, 0x09	; 9
     a26:	be d4       	rcall	.+2428   	; 0x13a4 <usart_spi_deselect_device>
     a28:	8f 2d       	mov	r24, r15
     a2a:	8f 77       	andi	r24, 0x7F	; 127
     a2c:	82 95       	swap	r24
     a2e:	8f 70       	andi	r24, 0x0F	; 15
     a30:	80 61       	ori	r24, 0x10	; 16
     a32:	e8 2e       	mov	r14, r24
     a34:	8b e2       	ldi	r24, 0x2B	; 43
     a36:	89 83       	std	Y+1, r24	; 0x01
     a38:	be 01       	movw	r22, r28
     a3a:	6f 5f       	subi	r22, 0xFF	; 255
     a3c:	7f 4f       	sbci	r23, 0xFF	; 255
     a3e:	80 ea       	ldi	r24, 0xA0	; 160
     a40:	99 e0       	ldi	r25, 0x09	; 9
     a42:	9a d4       	rcall	.+2356   	; 0x1378 <usart_spi_select_device>
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 93 66 06 	sts	0x0666, r24
     a4a:	e0 ea       	ldi	r30, 0xA0	; 160
     a4c:	f9 e0       	ldi	r31, 0x09	; 9
     a4e:	91 81       	ldd	r25, Z+1	; 0x01
     a50:	95 ff       	sbrs	r25, 5
     a52:	fd cf       	rjmp	.-6      	; 0xa4e <gfx_mono_st7565r_put_page+0x9e>
     a54:	e0 92 a0 09 	sts	0x09A0, r14
     a58:	e0 ea       	ldi	r30, 0xA0	; 160
     a5a:	f9 e0       	ldi	r31, 0x09	; 9
     a5c:	91 81       	ldd	r25, Z+1	; 0x01
     a5e:	96 ff       	sbrs	r25, 6
     a60:	fd cf       	rjmp	.-6      	; 0xa5c <gfx_mono_st7565r_put_page+0xac>
     a62:	e0 ea       	ldi	r30, 0xA0	; 160
     a64:	f9 e0       	ldi	r31, 0x09	; 9
     a66:	80 e4       	ldi	r24, 0x40	; 64
     a68:	81 83       	std	Z+1, r24	; 0x01
     a6a:	80 81       	ld	r24, Z
     a6c:	be 01       	movw	r22, r28
     a6e:	6f 5f       	subi	r22, 0xFF	; 255
     a70:	7f 4f       	sbci	r23, 0xFF	; 255
     a72:	80 ea       	ldi	r24, 0xA0	; 160
     a74:	99 e0       	ldi	r25, 0x09	; 9
     a76:	96 d4       	rcall	.+2348   	; 0x13a4 <usart_spi_deselect_device>
     a78:	8f 2d       	mov	r24, r15
     a7a:	8f 70       	andi	r24, 0x0F	; 15
     a7c:	f8 2e       	mov	r15, r24
     a7e:	8b e2       	ldi	r24, 0x2B	; 43
     a80:	89 83       	std	Y+1, r24	; 0x01
     a82:	be 01       	movw	r22, r28
     a84:	6f 5f       	subi	r22, 0xFF	; 255
     a86:	7f 4f       	sbci	r23, 0xFF	; 255
     a88:	80 ea       	ldi	r24, 0xA0	; 160
     a8a:	99 e0       	ldi	r25, 0x09	; 9
     a8c:	75 d4       	rcall	.+2282   	; 0x1378 <usart_spi_select_device>
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	80 93 66 06 	sts	0x0666, r24
     a94:	e0 ea       	ldi	r30, 0xA0	; 160
     a96:	f9 e0       	ldi	r31, 0x09	; 9
     a98:	91 81       	ldd	r25, Z+1	; 0x01
     a9a:	95 ff       	sbrs	r25, 5
     a9c:	fd cf       	rjmp	.-6      	; 0xa98 <gfx_mono_st7565r_put_page+0xe8>
     a9e:	f0 92 a0 09 	sts	0x09A0, r15
     aa2:	e0 ea       	ldi	r30, 0xA0	; 160
     aa4:	f9 e0       	ldi	r31, 0x09	; 9
     aa6:	91 81       	ldd	r25, Z+1	; 0x01
     aa8:	96 ff       	sbrs	r25, 6
     aaa:	fd cf       	rjmp	.-6      	; 0xaa6 <gfx_mono_st7565r_put_page+0xf6>
     aac:	e0 ea       	ldi	r30, 0xA0	; 160
     aae:	f9 e0       	ldi	r31, 0x09	; 9
     ab0:	80 e4       	ldi	r24, 0x40	; 64
     ab2:	81 83       	std	Z+1, r24	; 0x01
     ab4:	80 81       	ld	r24, Z
     ab6:	be 01       	movw	r22, r28
     ab8:	6f 5f       	subi	r22, 0xFF	; 255
     aba:	7f 4f       	sbci	r23, 0xFF	; 255
     abc:	80 ea       	ldi	r24, 0xA0	; 160
     abe:	99 e0       	ldi	r25, 0x09	; 9
     ac0:	71 d4       	rcall	.+2274   	; 0x13a4 <usart_spi_deselect_device>
     ac2:	78 01       	movw	r14, r16
     ac4:	da 94       	dec	r13
     ac6:	ad 2c       	mov	r10, r13
     ac8:	b1 2c       	mov	r11, r1
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	ae 1a       	sub	r10, r30
     ace:	be 0a       	sbc	r11, r30
     ad0:	a0 0e       	add	r10, r16
     ad2:	b1 1e       	adc	r11, r17
     ad4:	0f 2e       	mov	r0, r31
     ad6:	fb e2       	ldi	r31, 0x2B	; 43
     ad8:	6f 2e       	mov	r6, r31
     ada:	f0 2d       	mov	r31, r0
     adc:	00 ea       	ldi	r16, 0xA0	; 160
     ade:	19 e0       	ldi	r17, 0x09	; 9
     ae0:	0f 2e       	mov	r0, r31
     ae2:	f0 e6       	ldi	r31, 0x60	; 96
     ae4:	cf 2e       	mov	r12, r31
     ae6:	f6 e0       	ldi	r31, 0x06	; 6
     ae8:	df 2e       	mov	r13, r31
     aea:	f0 2d       	mov	r31, r0
     aec:	99 24       	eor	r9, r9
     aee:	93 94       	inc	r9
     af0:	68 94       	set
     af2:	77 24       	eor	r7, r7
     af4:	76 f8       	bld	r7, 6
     af6:	f7 01       	movw	r30, r14
     af8:	81 90       	ld	r8, Z+
     afa:	7f 01       	movw	r14, r30
     afc:	69 82       	std	Y+1, r6	; 0x01
     afe:	be 01       	movw	r22, r28
     b00:	6f 5f       	subi	r22, 0xFF	; 255
     b02:	7f 4f       	sbci	r23, 0xFF	; 255
     b04:	c8 01       	movw	r24, r16
     b06:	38 d4       	rcall	.+2160   	; 0x1378 <usart_spi_select_device>
     b08:	f6 01       	movw	r30, r12
     b0a:	95 82       	std	Z+5, r9	; 0x05
     b0c:	f8 01       	movw	r30, r16
     b0e:	91 81       	ldd	r25, Z+1	; 0x01
     b10:	95 ff       	sbrs	r25, 5
     b12:	fc cf       	rjmp	.-8      	; 0xb0c <gfx_mono_st7565r_put_page+0x15c>
     b14:	80 82       	st	Z, r8
     b16:	f8 01       	movw	r30, r16
     b18:	91 81       	ldd	r25, Z+1	; 0x01
     b1a:	96 ff       	sbrs	r25, 6
     b1c:	fc cf       	rjmp	.-8      	; 0xb16 <gfx_mono_st7565r_put_page+0x166>
     b1e:	71 82       	std	Z+1, r7	; 0x01
     b20:	80 81       	ld	r24, Z
     b22:	f6 01       	movw	r30, r12
     b24:	96 82       	std	Z+6, r9	; 0x06
     b26:	be 01       	movw	r22, r28
     b28:	6f 5f       	subi	r22, 0xFF	; 255
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	c8 01       	movw	r24, r16
     b2e:	3a d4       	rcall	.+2164   	; 0x13a4 <usart_spi_deselect_device>
     b30:	ea 14       	cp	r14, r10
     b32:	fb 04       	cpc	r15, r11
     b34:	01 f7       	brne	.-64     	; 0xaf6 <gfx_mono_st7565r_put_page+0x146>
     b36:	0f 90       	pop	r0
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	ff 90       	pop	r15
     b42:	ef 90       	pop	r14
     b44:	df 90       	pop	r13
     b46:	cf 90       	pop	r12
     b48:	bf 90       	pop	r11
     b4a:	af 90       	pop	r10
     b4c:	9f 90       	pop	r9
     b4e:	8f 90       	pop	r8
     b50:	7f 90       	pop	r7
     b52:	6f 90       	pop	r6
     b54:	08 95       	ret

00000b56 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     b56:	ff 92       	push	r15
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	1f 92       	push	r1
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	08 2f       	mov	r16, r24
     b68:	f6 2e       	mov	r15, r22
     b6a:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     b6c:	36 d1       	rcall	.+620    	; 0xdda <gfx_mono_framebuffer_put_byte>
 * \param address the page address
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
     b6e:	0f 70       	andi	r16, 0x0F	; 15
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     b70:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     b72:	8b e2       	ldi	r24, 0x2B	; 43
     b74:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b76:	be 01       	movw	r22, r28
     b78:	6f 5f       	subi	r22, 0xFF	; 255
     b7a:	7f 4f       	sbci	r23, 0xFF	; 255
     b7c:	80 ea       	ldi	r24, 0xA0	; 160
     b7e:	99 e0       	ldi	r25, 0x09	; 9
     b80:	fb d3       	rcall	.+2038   	; 0x1378 <usart_spi_select_device>
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     b88:	e0 ea       	ldi	r30, 0xA0	; 160
     b8a:	f9 e0       	ldi	r31, 0x09	; 9
     b8c:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     b8e:	95 ff       	sbrs	r25, 5
     b90:	fd cf       	rjmp	.-6      	; 0xb8c <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     b92:	00 93 a0 09 	sts	0x09A0, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     b96:	e0 ea       	ldi	r30, 0xA0	; 160
     b98:	f9 e0       	ldi	r31, 0x09	; 9
     b9a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     b9c:	86 ff       	sbrs	r24, 6
     b9e:	fd cf       	rjmp	.-6      	; 0xb9a <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     ba0:	e0 ea       	ldi	r30, 0xA0	; 160
     ba2:	f9 e0       	ldi	r31, 0x09	; 9
     ba4:	80 e4       	ldi	r24, 0x40	; 64
     ba6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     ba8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     baa:	be 01       	movw	r22, r28
     bac:	6f 5f       	subi	r22, 0xFF	; 255
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	80 ea       	ldi	r24, 0xA0	; 160
     bb2:	99 e0       	ldi	r25, 0x09	; 9
     bb4:	f7 d3       	rcall	.+2030   	; 0x13a4 <usart_spi_deselect_device>
 * \param address the column address
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
     bb6:	0f 2d       	mov	r16, r15
     bb8:	0f 77       	andi	r16, 0x7F	; 127
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     bba:	02 95       	swap	r16
     bbc:	0f 70       	andi	r16, 0x0F	; 15
     bbe:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     bc0:	8b e2       	ldi	r24, 0x2B	; 43
     bc2:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     bc4:	be 01       	movw	r22, r28
     bc6:	6f 5f       	subi	r22, 0xFF	; 255
     bc8:	7f 4f       	sbci	r23, 0xFF	; 255
     bca:	80 ea       	ldi	r24, 0xA0	; 160
     bcc:	99 e0       	ldi	r25, 0x09	; 9
     bce:	d4 d3       	rcall	.+1960   	; 0x1378 <usart_spi_select_device>
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     bd6:	e0 ea       	ldi	r30, 0xA0	; 160
     bd8:	f9 e0       	ldi	r31, 0x09	; 9
     bda:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     bdc:	85 ff       	sbrs	r24, 5
     bde:	fd cf       	rjmp	.-6      	; 0xbda <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     be0:	00 93 a0 09 	sts	0x09A0, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     be4:	e0 ea       	ldi	r30, 0xA0	; 160
     be6:	f9 e0       	ldi	r31, 0x09	; 9
     be8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     bea:	86 ff       	sbrs	r24, 6
     bec:	fd cf       	rjmp	.-6      	; 0xbe8 <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     bee:	e0 ea       	ldi	r30, 0xA0	; 160
     bf0:	f9 e0       	ldi	r31, 0x09	; 9
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     bf6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     bf8:	be 01       	movw	r22, r28
     bfa:	6f 5f       	subi	r22, 0xFF	; 255
     bfc:	7f 4f       	sbci	r23, 0xFF	; 255
     bfe:	80 ea       	ldi	r24, 0xA0	; 160
     c00:	99 e0       	ldi	r25, 0x09	; 9
     c02:	d0 d3       	rcall	.+1952   	; 0x13a4 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     c04:	0f 2d       	mov	r16, r15
     c06:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     c08:	8b e2       	ldi	r24, 0x2B	; 43
     c0a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     c0c:	be 01       	movw	r22, r28
     c0e:	6f 5f       	subi	r22, 0xFF	; 255
     c10:	7f 4f       	sbci	r23, 0xFF	; 255
     c12:	80 ea       	ldi	r24, 0xA0	; 160
     c14:	99 e0       	ldi	r25, 0x09	; 9
     c16:	b0 d3       	rcall	.+1888   	; 0x1378 <usart_spi_select_device>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     c1e:	e0 ea       	ldi	r30, 0xA0	; 160
     c20:	f9 e0       	ldi	r31, 0x09	; 9
     c22:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     c24:	85 ff       	sbrs	r24, 5
     c26:	fd cf       	rjmp	.-6      	; 0xc22 <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     c28:	00 93 a0 09 	sts	0x09A0, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     c2c:	e0 ea       	ldi	r30, 0xA0	; 160
     c2e:	f9 e0       	ldi	r31, 0x09	; 9
     c30:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     c32:	86 ff       	sbrs	r24, 6
     c34:	fd cf       	rjmp	.-6      	; 0xc30 <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     c36:	e0 ea       	ldi	r30, 0xA0	; 160
     c38:	f9 e0       	ldi	r31, 0x09	; 9
     c3a:	80 e4       	ldi	r24, 0x40	; 64
     c3c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     c3e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     c40:	be 01       	movw	r22, r28
     c42:	6f 5f       	subi	r22, 0xFF	; 255
     c44:	7f 4f       	sbci	r23, 0xFF	; 255
     c46:	80 ea       	ldi	r24, 0xA0	; 160
     c48:	99 e0       	ldi	r25, 0x09	; 9
     c4a:	ac d3       	rcall	.+1880   	; 0x13a4 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     c4c:	8b e2       	ldi	r24, 0x2B	; 43
     c4e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     c50:	be 01       	movw	r22, r28
     c52:	6f 5f       	subi	r22, 0xFF	; 255
     c54:	7f 4f       	sbci	r23, 0xFF	; 255
     c56:	80 ea       	ldi	r24, 0xA0	; 160
     c58:	99 e0       	ldi	r25, 0x09	; 9
     c5a:	8e d3       	rcall	.+1820   	; 0x1378 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	80 93 65 06 	sts	0x0665, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     c62:	e0 ea       	ldi	r30, 0xA0	; 160
     c64:	f9 e0       	ldi	r31, 0x09	; 9
     c66:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     c68:	85 ff       	sbrs	r24, 5
     c6a:	fd cf       	rjmp	.-6      	; 0xc66 <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     c6c:	10 93 a0 09 	sts	0x09A0, r17
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     c70:	e0 ea       	ldi	r30, 0xA0	; 160
     c72:	f9 e0       	ldi	r31, 0x09	; 9
     c74:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     c76:	86 ff       	sbrs	r24, 6
     c78:	fd cf       	rjmp	.-6      	; 0xc74 <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     c7a:	e0 ea       	ldi	r30, 0xA0	; 160
     c7c:	f9 e0       	ldi	r31, 0x09	; 9
     c7e:	80 e4       	ldi	r24, 0x40	; 64
     c80:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     c82:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	80 93 66 06 	sts	0x0666, r24
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     c8a:	be 01       	movw	r22, r28
     c8c:	6f 5f       	subi	r22, 0xFF	; 255
     c8e:	7f 4f       	sbci	r23, 0xFF	; 255
     c90:	80 ea       	ldi	r24, 0xA0	; 160
     c92:	99 e0       	ldi	r25, 0x09	; 9
     c94:	87 d3       	rcall	.+1806   	; 0x13a4 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     c96:	0f 90       	pop	r0
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	08 95       	ret

00000ca4 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	1f 92       	push	r1
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     cb2:	80 e6       	ldi	r24, 0x60	; 96
     cb4:	90 e2       	ldi	r25, 0x20	; 32
     cb6:	78 d0       	rcall	.+240    	; 0xda8 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     cb8:	a9 dc       	rcall	.-1710   	; 0x60c <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     cba:	8b e2       	ldi	r24, 0x2B	; 43
     cbc:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     cbe:	be 01       	movw	r22, r28
     cc0:	6f 5f       	subi	r22, 0xFF	; 255
     cc2:	7f 4f       	sbci	r23, 0xFF	; 255
     cc4:	80 ea       	ldi	r24, 0xA0	; 160
     cc6:	99 e0       	ldi	r25, 0x09	; 9
     cc8:	57 d3       	rcall	.+1710   	; 0x1378 <usart_spi_select_device>
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     cd0:	e0 ea       	ldi	r30, 0xA0	; 160
     cd2:	f9 e0       	ldi	r31, 0x09	; 9
     cd4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     cd6:	85 ff       	sbrs	r24, 5
     cd8:	fd cf       	rjmp	.-6      	; 0xcd4 <gfx_mono_st7565r_init+0x30>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     cda:	80 e4       	ldi	r24, 0x40	; 64
     cdc:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     ce0:	e0 ea       	ldi	r30, 0xA0	; 160
     ce2:	f9 e0       	ldi	r31, 0x09	; 9
     ce4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     ce6:	86 ff       	sbrs	r24, 6
     ce8:	fd cf       	rjmp	.-6      	; 0xce4 <gfx_mono_st7565r_init+0x40>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     cea:	e0 ea       	ldi	r30, 0xA0	; 160
     cec:	f9 e0       	ldi	r31, 0x09	; 9
     cee:	80 e4       	ldi	r24, 0x40	; 64
     cf0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     cf2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     cf4:	be 01       	movw	r22, r28
     cf6:	6f 5f       	subi	r22, 0xFF	; 255
     cf8:	7f 4f       	sbci	r23, 0xFF	; 255
     cfa:	80 ea       	ldi	r24, 0xA0	; 160
     cfc:	99 e0       	ldi	r25, 0x09	; 9
     cfe:	52 d3       	rcall	.+1700   	; 0x13a4 <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     d00:	00 e0       	ldi	r16, 0x00	; 0
     d02:	0a c0       	rjmp	.+20     	; 0xd18 <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	61 2f       	mov	r22, r17
     d08:	80 2f       	mov	r24, r16
     d0a:	25 df       	rcall	.-438    	; 0xb56 <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     d0c:	1f 5f       	subi	r17, 0xFF	; 255
     d0e:	10 38       	cpi	r17, 0x80	; 128
     d10:	c9 f7       	brne	.-14     	; 0xd04 <gfx_mono_st7565r_init+0x60>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     d12:	0f 5f       	subi	r16, 0xFF	; 255
     d14:	04 30       	cpi	r16, 0x04	; 4
     d16:	11 f0       	breq	.+4      	; 0xd1c <gfx_mono_st7565r_init+0x78>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     d18:	10 e0       	ldi	r17, 0x00	; 0
     d1a:	f4 cf       	rjmp	.-24     	; 0xd04 <gfx_mono_st7565r_init+0x60>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     d1c:	0f 90       	pop	r0
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	08 95       	ret

00000d28 <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     d28:	ff 92       	push	r15
     d2a:	0f 93       	push	r16
     d2c:	1f 93       	push	r17
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     d32:	88 23       	and	r24, r24
     d34:	8c f1       	brlt	.+98     	; 0xd98 <gfx_mono_st7565r_draw_pixel+0x70>
     d36:	60 32       	cpi	r22, 0x20	; 32
     d38:	78 f5       	brcc	.+94     	; 0xd98 <gfx_mono_st7565r_draw_pixel+0x70>
     d3a:	d4 2f       	mov	r29, r20
     d3c:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     d3e:	f6 2e       	mov	r15, r22
     d40:	f6 94       	lsr	r15
     d42:	f6 94       	lsr	r15
     d44:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     d46:	2f 2d       	mov	r18, r15
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	31 95       	neg	r19
     d4c:	21 95       	neg	r18
     d4e:	31 09       	sbc	r19, r1
     d50:	22 0f       	add	r18, r18
     d52:	33 1f       	adc	r19, r19
     d54:	22 0f       	add	r18, r18
     d56:	33 1f       	adc	r19, r19
     d58:	22 0f       	add	r18, r18
     d5a:	33 1f       	adc	r19, r19
     d5c:	26 0f       	add	r18, r22
     d5e:	31 1d       	adc	r19, r1
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	8b 01       	movw	r16, r22
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <gfx_mono_st7565r_draw_pixel+0x44>
     d68:	00 0f       	add	r16, r16
     d6a:	11 1f       	adc	r17, r17
     d6c:	2a 95       	dec	r18
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <gfx_mono_st7565r_draw_pixel+0x40>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     d70:	68 2f       	mov	r22, r24
     d72:	8f 2d       	mov	r24, r15
     d74:	40 d0       	rcall	.+128    	; 0xdf6 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     d76:	d1 30       	cpi	r29, 0x01	; 1
     d78:	21 f0       	breq	.+8      	; 0xd82 <gfx_mono_st7565r_draw_pixel+0x5a>
     d7a:	28 f0       	brcs	.+10     	; 0xd86 <gfx_mono_st7565r_draw_pixel+0x5e>
     d7c:	d2 30       	cpi	r29, 0x02	; 2
     d7e:	39 f0       	breq	.+14     	; 0xd8e <gfx_mono_st7565r_draw_pixel+0x66>
     d80:	07 c0       	rjmp	.+14     	; 0xd90 <gfx_mono_st7565r_draw_pixel+0x68>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     d82:	80 2b       	or	r24, r16
		break;
     d84:	05 c0       	rjmp	.+10     	; 0xd90 <gfx_mono_st7565r_draw_pixel+0x68>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     d86:	60 2f       	mov	r22, r16
     d88:	60 95       	com	r22
     d8a:	86 23       	and	r24, r22
		break;
     d8c:	01 c0       	rjmp	.+2      	; 0xd90 <gfx_mono_st7565r_draw_pixel+0x68>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     d8e:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     d90:	48 2f       	mov	r20, r24
     d92:	6c 2f       	mov	r22, r28
     d94:	8f 2d       	mov	r24, r15
     d96:	df de       	rcall	.-578    	; 0xb56 <gfx_mono_st7565r_put_byte>
}
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	08 95       	ret

00000da4 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     da4:	28 c0       	rjmp	.+80     	; 0xdf6 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     da6:	08 95       	ret

00000da8 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     da8:	80 93 60 22 	sts	0x2260, r24
     dac:	90 93 61 22 	sts	0x2261, r25
     db0:	08 95       	ret

00000db2 <gfx_mono_framebuffer_put_page>:
     db2:	dc 01       	movw	r26, r24
     db4:	e4 2f       	mov	r30, r20
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	af 01       	movw	r20, r30
     dba:	80 e8       	ldi	r24, 0x80	; 128
     dbc:	68 9f       	mul	r22, r24
     dbe:	40 0d       	add	r20, r0
     dc0:	51 1d       	adc	r21, r1
     dc2:	11 24       	eor	r1, r1
     dc4:	e0 91 60 22 	lds	r30, 0x2260
     dc8:	f0 91 61 22 	lds	r31, 0x2261
     dcc:	e4 0f       	add	r30, r20
     dce:	f5 1f       	adc	r31, r21
     dd0:	8d 91       	ld	r24, X+
     dd2:	81 93       	st	Z+, r24
     dd4:	21 50       	subi	r18, 0x01	; 1
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <gfx_mono_framebuffer_put_page+0x1e>
     dd8:	08 95       	ret

00000dda <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     dda:	20 e8       	ldi	r18, 0x80	; 128
     ddc:	82 9f       	mul	r24, r18
     dde:	c0 01       	movw	r24, r0
     de0:	11 24       	eor	r1, r1
     de2:	86 0f       	add	r24, r22
     de4:	91 1d       	adc	r25, r1
     de6:	e0 91 60 22 	lds	r30, 0x2260
     dea:	f0 91 61 22 	lds	r31, 0x2261
     dee:	e8 0f       	add	r30, r24
     df0:	f9 1f       	adc	r31, r25
     df2:	40 83       	st	Z, r20
     df4:	08 95       	ret

00000df6 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     df6:	20 e8       	ldi	r18, 0x80	; 128
     df8:	82 9f       	mul	r24, r18
     dfa:	c0 01       	movw	r24, r0
     dfc:	11 24       	eor	r1, r1
     dfe:	86 0f       	add	r24, r22
     e00:	91 1d       	adc	r25, r1
     e02:	e0 91 60 22 	lds	r30, 0x2260
     e06:	f0 91 61 22 	lds	r31, 0x2261
     e0a:	e8 0f       	add	r30, r24
     e0c:	f9 1f       	adc	r31, r25
}
     e0e:	80 81       	ld	r24, Z
     e10:	08 95       	ret

00000e12 <gfx_mono_generic_draw_horizontal_line>:
		}

		/* Next X. */
		++offset_x;
	}
}
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	e4 2f       	mov	r30, r20
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	e8 0f       	add	r30, r24
     e22:	f1 1d       	adc	r31, r1
     e24:	e1 38       	cpi	r30, 0x81	; 129
     e26:	f1 05       	cpc	r31, r1
     e28:	1c f0       	brlt	.+6      	; 0xe30 <gfx_mono_generic_draw_horizontal_line+0x1e>
     e2a:	c0 e8       	ldi	r28, 0x80	; 128
     e2c:	4c 2f       	mov	r20, r28
     e2e:	48 1b       	sub	r20, r24
     e30:	44 23       	and	r20, r20
     e32:	09 f4       	brne	.+2      	; 0xe36 <gfx_mono_generic_draw_horizontal_line+0x24>
     e34:	53 c0       	rjmp	.+166    	; 0xedc <gfx_mono_generic_draw_horizontal_line+0xca>
     e36:	d6 2f       	mov	r29, r22
     e38:	d6 95       	lsr	r29
     e3a:	d6 95       	lsr	r29
     e3c:	d6 95       	lsr	r29
     e3e:	ed 2f       	mov	r30, r29
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	f1 95       	neg	r31
     e44:	e1 95       	neg	r30
     e46:	f1 09       	sbc	r31, r1
     e48:	ee 0f       	add	r30, r30
     e4a:	ff 1f       	adc	r31, r31
     e4c:	ee 0f       	add	r30, r30
     e4e:	ff 1f       	adc	r31, r31
     e50:	ee 0f       	add	r30, r30
     e52:	ff 1f       	adc	r31, r31
     e54:	df 01       	movw	r26, r30
     e56:	a6 0f       	add	r26, r22
     e58:	b1 1d       	adc	r27, r1
     e5a:	bd 01       	movw	r22, r26
     e5c:	e1 e0       	ldi	r30, 0x01	; 1
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	df 01       	movw	r26, r30
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <gfx_mono_generic_draw_horizontal_line+0x56>
     e64:	aa 0f       	add	r26, r26
     e66:	bb 1f       	adc	r27, r27
     e68:	6a 95       	dec	r22
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <gfx_mono_generic_draw_horizontal_line+0x52>
     e6c:	fa 2e       	mov	r15, r26
     e6e:	21 30       	cpi	r18, 0x01	; 1
     e70:	21 f0       	breq	.+8      	; 0xe7a <gfx_mono_generic_draw_horizontal_line+0x68>
     e72:	98 f0       	brcs	.+38     	; 0xe9a <gfx_mono_generic_draw_horizontal_line+0x88>
     e74:	22 30       	cpi	r18, 0x02	; 2
     e76:	19 f1       	breq	.+70     	; 0xebe <gfx_mono_generic_draw_horizontal_line+0xac>
     e78:	31 c0       	rjmp	.+98     	; 0xedc <gfx_mono_generic_draw_horizontal_line+0xca>
     e7a:	c4 2f       	mov	r28, r20
     e7c:	1f ef       	ldi	r17, 0xFF	; 255
     e7e:	18 0f       	add	r17, r24
     e80:	01 2f       	mov	r16, r17
     e82:	0c 0f       	add	r16, r28
     e84:	60 2f       	mov	r22, r16
     e86:	8d 2f       	mov	r24, r29
     e88:	8d df       	rcall	.-230    	; 0xda4 <gfx_mono_st7565r_get_byte>
     e8a:	48 2f       	mov	r20, r24
     e8c:	4f 29       	or	r20, r15
     e8e:	60 2f       	mov	r22, r16
     e90:	8d 2f       	mov	r24, r29
     e92:	61 de       	rcall	.-830    	; 0xb56 <gfx_mono_st7565r_put_byte>
     e94:	c1 50       	subi	r28, 0x01	; 1
     e96:	a1 f7       	brne	.-24     	; 0xe80 <gfx_mono_generic_draw_horizontal_line+0x6e>
     e98:	21 c0       	rjmp	.+66     	; 0xedc <gfx_mono_generic_draw_horizontal_line+0xca>
     e9a:	c4 2f       	mov	r28, r20
     e9c:	1f ef       	ldi	r17, 0xFF	; 255
     e9e:	18 0f       	add	r17, r24
     ea0:	fa 2e       	mov	r15, r26
     ea2:	f0 94       	com	r15
     ea4:	01 2f       	mov	r16, r17
     ea6:	0c 0f       	add	r16, r28
     ea8:	60 2f       	mov	r22, r16
     eaa:	8d 2f       	mov	r24, r29
     eac:	7b df       	rcall	.-266    	; 0xda4 <gfx_mono_st7565r_get_byte>
     eae:	48 2f       	mov	r20, r24
     eb0:	4f 21       	and	r20, r15
     eb2:	60 2f       	mov	r22, r16
     eb4:	8d 2f       	mov	r24, r29
     eb6:	4f de       	rcall	.-866    	; 0xb56 <gfx_mono_st7565r_put_byte>
     eb8:	c1 50       	subi	r28, 0x01	; 1
     eba:	a1 f7       	brne	.-24     	; 0xea4 <gfx_mono_generic_draw_horizontal_line+0x92>
     ebc:	0f c0       	rjmp	.+30     	; 0xedc <gfx_mono_generic_draw_horizontal_line+0xca>
     ebe:	c4 2f       	mov	r28, r20
     ec0:	1f ef       	ldi	r17, 0xFF	; 255
     ec2:	18 0f       	add	r17, r24
     ec4:	01 2f       	mov	r16, r17
     ec6:	0c 0f       	add	r16, r28
     ec8:	60 2f       	mov	r22, r16
     eca:	8d 2f       	mov	r24, r29
     ecc:	6b df       	rcall	.-298    	; 0xda4 <gfx_mono_st7565r_get_byte>
     ece:	48 2f       	mov	r20, r24
     ed0:	4f 25       	eor	r20, r15
     ed2:	60 2f       	mov	r22, r16
     ed4:	8d 2f       	mov	r24, r29
     ed6:	3f de       	rcall	.-898    	; 0xb56 <gfx_mono_st7565r_put_byte>
     ed8:	c1 50       	subi	r28, 0x01	; 1
     eda:	a1 f7       	brne	.-24     	; 0xec4 <gfx_mono_generic_draw_horizontal_line+0xb2>
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	ff 90       	pop	r15
     ee6:	08 95       	ret

00000ee8 <gfx_mono_generic_draw_filled_rect>:
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	22 23       	and	r18, r18
     ef4:	69 f0       	breq	.+26     	; 0xf10 <gfx_mono_generic_draw_filled_rect+0x28>
     ef6:	c2 2f       	mov	r28, r18
     ef8:	f4 2e       	mov	r15, r20
     efa:	18 2f       	mov	r17, r24
     efc:	df ef       	ldi	r29, 0xFF	; 255
     efe:	d6 0f       	add	r29, r22
     f00:	6d 2f       	mov	r22, r29
     f02:	6c 0f       	add	r22, r28
     f04:	20 2f       	mov	r18, r16
     f06:	4f 2d       	mov	r20, r15
     f08:	81 2f       	mov	r24, r17
     f0a:	83 df       	rcall	.-250    	; 0xe12 <gfx_mono_generic_draw_horizontal_line>
     f0c:	c1 50       	subi	r28, 0x01	; 1
     f0e:	c1 f7       	brne	.-16     	; 0xf00 <gfx_mono_generic_draw_filled_rect+0x18>
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	ff 90       	pop	r15
     f1a:	08 95       	ret

00000f1c <gfx_mono_generic_put_bitmap>:
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
		gfx_coord_t y)
{
     f1c:	bf 92       	push	r11
     f1e:	cf 92       	push	r12
     f20:	df 92       	push	r13
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	7c 01       	movw	r14, r24
     f30:	d6 2f       	mov	r29, r22
	gfx_coord_t num_pages = bitmap->height / 8;
     f32:	dc 01       	movw	r26, r24
     f34:	11 96       	adiw	r26, 0x01	; 1
     f36:	cc 90       	ld	r12, X
     f38:	11 97       	sbiw	r26, 0x01	; 1
     f3a:	c6 94       	lsr	r12
     f3c:	c6 94       	lsr	r12
     f3e:	c6 94       	lsr	r12
	gfx_coord_t page = y / 8;
     f40:	b4 2e       	mov	r11, r20
     f42:	b6 94       	lsr	r11
     f44:	b6 94       	lsr	r11
     f46:	b6 94       	lsr	r11
	gfx_coord_t column;
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
     f48:	12 96       	adiw	r26, 0x02	; 2
     f4a:	8c 91       	ld	r24, X
     f4c:	88 23       	and	r24, r24
     f4e:	31 f0       	breq	.+12     	; 0xf5c <gfx_mono_generic_put_bitmap+0x40>
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	09 f0       	breq	.+2      	; 0xf56 <gfx_mono_generic_put_bitmap+0x3a>
     f54:	43 c0       	rjmp	.+134    	; 0xfdc <gfx_mono_generic_put_bitmap+0xc0>
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
     f56:	c1 10       	cpse	r12, r1
     f58:	24 c0       	rjmp	.+72     	; 0xfa2 <gfx_mono_generic_put_bitmap+0x86>
     f5a:	40 c0       	rjmp	.+128    	; 0xfdc <gfx_mono_generic_put_bitmap+0xc0>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
     f5c:	c1 10       	cpse	r12, r1
     f5e:	28 c0       	rjmp	.+80     	; 0xfb0 <gfx_mono_generic_put_bitmap+0x94>
     f60:	3d c0       	rjmp	.+122    	; 0xfdc <gfx_mono_generic_put_bitmap+0xc0>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
     f62:	c0 e0       	ldi	r28, 0x00	; 0
     f64:	db 2c       	mov	r13, r11
     f66:	d0 0e       	add	r13, r16
				temp = PROGMEM_READ_BYTE(bitmap->data.progmem
     f68:	90 9f       	mul	r25, r16
     f6a:	f0 01       	movw	r30, r0
     f6c:	91 9f       	mul	r25, r17
     f6e:	f0 0d       	add	r31, r0
     f70:	11 24       	eor	r1, r1
     f72:	ec 0f       	add	r30, r28
     f74:	f1 1d       	adc	r31, r1
     f76:	d7 01       	movw	r26, r14
     f78:	13 96       	adiw	r26, 0x03	; 3
     f7a:	4d 91       	ld	r20, X+
     f7c:	5c 91       	ld	r21, X
     f7e:	14 97       	sbiw	r26, 0x04	; 4
     f80:	e4 0f       	add	r30, r20
     f82:	f5 1f       	adc	r31, r21
     f84:	44 91       	lpm	r20, Z
     f86:	6c 2f       	mov	r22, r28
     f88:	6d 0f       	add	r22, r29
						+ (i * bitmap->width)
						+ column);
				gfx_mono_put_byte(i + page, column + x, temp);
     f8a:	8d 2d       	mov	r24, r13
     f8c:	e4 dd       	rcall	.-1080   	; 0xb56 <gfx_mono_st7565r_put_byte>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
     f8e:	cf 5f       	subi	r28, 0xFF	; 255
     f90:	f7 01       	movw	r30, r14
     f92:	90 81       	ld	r25, Z
     f94:	c9 17       	cp	r28, r25
     f96:	40 f3       	brcs	.-48     	; 0xf68 <gfx_mono_generic_put_bitmap+0x4c>
     f98:	0f 5f       	subi	r16, 0xFF	; 255
     f9a:	1f 4f       	sbci	r17, 0xFF	; 255
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
     f9c:	0c 15       	cp	r16, r12
     f9e:	18 f0       	brcs	.+6      	; 0xfa6 <gfx_mono_generic_put_bitmap+0x8a>
     fa0:	1d c0       	rjmp	.+58     	; 0xfdc <gfx_mono_generic_put_bitmap+0xc0>
     fa2:	00 e0       	ldi	r16, 0x00	; 0
     fa4:	10 e0       	ldi	r17, 0x00	; 0
			for (column = 0; column < bitmap->width; column++) {
     fa6:	d7 01       	movw	r26, r14
     fa8:	9c 91       	ld	r25, X
     faa:	91 11       	cpse	r25, r1
     fac:	da cf       	rjmp	.-76     	; 0xf62 <gfx_mono_generic_put_bitmap+0x46>
     fae:	f4 cf       	rjmp	.-24     	; 0xf98 <gfx_mono_generic_put_bitmap+0x7c>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
     fb0:	00 e0       	ldi	r16, 0x00	; 0
     fb2:	10 e0       	ldi	r17, 0x00	; 0
			gfx_mono_put_page(bitmap->data.pixmap
     fb4:	f7 01       	movw	r30, r14
     fb6:	20 81       	ld	r18, Z
     fb8:	6b 2d       	mov	r22, r11
     fba:	60 0f       	add	r22, r16
     fbc:	20 9f       	mul	r18, r16
     fbe:	c0 01       	movw	r24, r0
     fc0:	21 9f       	mul	r18, r17
     fc2:	90 0d       	add	r25, r0
     fc4:	11 24       	eor	r1, r1
     fc6:	03 80       	ldd	r0, Z+3	; 0x03
     fc8:	f4 81       	ldd	r31, Z+4	; 0x04
     fca:	e0 2d       	mov	r30, r0
     fcc:	4d 2f       	mov	r20, r29
     fce:	8e 0f       	add	r24, r30
     fd0:	9f 1f       	adc	r25, r31
     fd2:	ee dc       	rcall	.-1572   	; 0x9b0 <gfx_mono_st7565r_put_page>
     fd4:	0f 5f       	subi	r16, 0xFF	; 255
     fd6:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
     fd8:	0c 15       	cp	r16, r12
     fda:	60 f3       	brcs	.-40     	; 0xfb4 <gfx_mono_generic_put_bitmap+0x98>
		break;

	default:
		break;
	}
}
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	ff 90       	pop	r15
     fe6:	ef 90       	pop	r14
     fe8:	df 90       	pop	r13
     fea:	cf 90       	pop	r12
     fec:	bf 90       	pop	r11
     fee:	08 95       	ret

00000ff0 <menu_draw>:
 *
 * \param menu     a menu struct with menu settings
 * \param redraw   clear screen before drawing menu
 */
static void menu_draw(struct gfx_mono_menu *menu, bool redraw)
{
     ff0:	ef 92       	push	r14
     ff2:	ff 92       	push	r15
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	7c 01       	movw	r14, r24
	static bool redraw_state;
	uint8_t i;
	uint8_t line = 1;
	uint8_t menu_page = menu->current_selection /
     ffe:	dc 01       	movw	r26, r24
    1000:	15 96       	adiw	r26, 0x05	; 5
    1002:	8c 91       	ld	r24, X
    1004:	15 97       	sbiw	r26, 0x05	; 5
    1006:	0b ea       	ldi	r16, 0xAB	; 171
    1008:	80 9f       	mul	r24, r16
    100a:	01 2d       	mov	r16, r1
    100c:	11 24       	eor	r1, r1
    100e:	d0 2f       	mov	r29, r16
    1010:	d6 95       	lsr	r29
			GFX_MONO_MENU_ELEMENTS_PER_SCREEN;

	if (menu->current_page != menu_page || redraw == true) {
    1012:	16 96       	adiw	r26, 0x06	; 6
    1014:	8c 91       	ld	r24, X
    1016:	8d 13       	cpse	r24, r29
    1018:	02 c0       	rjmp	.+4      	; 0x101e <menu_draw+0x2e>
    101a:	66 23       	and	r22, r22
    101c:	49 f0       	breq	.+18     	; 0x1030 <menu_draw+0x40>
		/* clear screen if we have changed the page or menu and prepare
		 * redraw */
		gfx_mono_draw_filled_rect(0, SYSFONT_LINESPACING,
    101e:	00 e0       	ldi	r16, 0x00	; 0
    1020:	28 e1       	ldi	r18, 0x18	; 24
    1022:	40 e8       	ldi	r20, 0x80	; 128
    1024:	68 e0       	ldi	r22, 0x08	; 8
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	5f df       	rcall	.-322    	; 0xee8 <gfx_mono_generic_draw_filled_rect>
				GFX_MONO_LCD_WIDTH,
				GFX_MONO_LCD_HEIGHT - SYSFONT_LINESPACING,
				GFX_PIXEL_CLR);
		redraw_state = true;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	80 93 62 22 	sts	0x2262, r24
	}

	menu->current_page = menu_page;
    1030:	f7 01       	movw	r30, r14
    1032:	d6 83       	std	Z+6, r29	; 0x06

	/* Clear old indicator icon */
	gfx_mono_draw_filled_rect(0, SYSFONT_LINESPACING,
    1034:	00 e0       	ldi	r16, 0x00	; 0
    1036:	28 e1       	ldi	r18, 0x18	; 24
    1038:	44 e0       	ldi	r20, 0x04	; 4
    103a:	68 e0       	ldi	r22, 0x08	; 8
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	54 df       	rcall	.-344    	; 0xee8 <gfx_mono_generic_draw_filled_rect>
			GFX_MONO_MENU_INDICATOR_WIDTH, GFX_MONO_LCD_HEIGHT -
			SYSFONT_LINESPACING, GFX_PIXEL_CLR);

	/* Put indicator icon on current selection */
	gfx_mono_put_bitmap(&menu_bitmap_indicator, 0,
    1040:	d7 01       	movw	r26, r14
    1042:	15 96       	adiw	r26, 0x05	; 5
    1044:	4c 91       	ld	r20, X
    1046:	8b ea       	ldi	r24, 0xAB	; 171
    1048:	48 9f       	mul	r20, r24
    104a:	81 2d       	mov	r24, r1
    104c:	11 24       	eor	r1, r1
    104e:	86 95       	lsr	r24
    1050:	98 2f       	mov	r25, r24
    1052:	99 0f       	add	r25, r25
    1054:	89 0f       	add	r24, r25
    1056:	48 1b       	sub	r20, r24
    1058:	44 0f       	add	r20, r20
    105a:	44 0f       	add	r20, r20
    105c:	44 0f       	add	r20, r20
    105e:	48 5f       	subi	r20, 0xF8	; 248
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	89 e2       	ldi	r24, 0x29	; 41
    1064:	90 e2       	ldi	r25, 0x20	; 32
    1066:	5a df       	rcall	.-332    	; 0xf1c <gfx_mono_generic_put_bitmap>
			SYSFONT_LINESPACING * ((menu->current_selection %
			GFX_MONO_MENU_ELEMENTS_PER_SCREEN) + 1));

	/* Print visible options if page or menu has changed */
	if (redraw_state == true) {
    1068:	80 91 62 22 	lds	r24, 0x2262
    106c:	88 23       	and	r24, r24
    106e:	a9 f1       	breq	.+106    	; 0x10da <menu_draw+0xea>
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
    1070:	cd 2f       	mov	r28, r29
    1072:	cc 0f       	add	r28, r28
    1074:	cd 0f       	add	r28, r29
				i < menu_page *
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN +
    1076:	0d 2f       	mov	r16, r29
    1078:	10 e0       	ldi	r17, 0x00	; 0
    107a:	0f 5f       	subi	r16, 0xFF	; 255
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	c8 01       	movw	r24, r16
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	08 0f       	add	r16, r24
    1086:	19 1f       	adc	r17, r25
			GFX_MONO_MENU_ELEMENTS_PER_SCREEN) + 1));

	/* Print visible options if page or menu has changed */
	if (redraw_state == true) {
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
				i < menu_page *
    1088:	8c 2f       	mov	r24, r28
    108a:	90 e0       	ldi	r25, 0x00	; 0
			SYSFONT_LINESPACING * ((menu->current_selection %
			GFX_MONO_MENU_ELEMENTS_PER_SCREEN) + 1));

	/* Print visible options if page or menu has changed */
	if (redraw_state == true) {
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
    108c:	80 17       	cp	r24, r16
    108e:	91 07       	cpc	r25, r17
    1090:	14 f5       	brge	.+68     	; 0x10d6 <menu_draw+0xe6>
				i < menu_page *
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN +
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN &&
    1092:	f7 01       	movw	r30, r14
    1094:	84 81       	ldd	r24, Z+4	; 0x04
    1096:	c8 17       	cp	r28, r24
    1098:	f0 f4       	brcc	.+60     	; 0x10d6 <menu_draw+0xe6>
    109a:	d8 e0       	ldi	r29, 0x08	; 8
				i < menu->num_elements; i++) {
			gfx_mono_draw_progmem_string(
					(char PROGMEM_PTR_T)menu->strings[i],
    109c:	ec 2f       	mov	r30, r28
    109e:	f0 e0       	ldi	r31, 0x00	; 0
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
				i < menu_page *
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN +
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN &&
				i < menu->num_elements; i++) {
			gfx_mono_draw_progmem_string(
    10a0:	ee 0f       	add	r30, r30
    10a2:	ff 1f       	adc	r31, r31
    10a4:	d7 01       	movw	r26, r14
    10a6:	12 96       	adiw	r26, 0x02	; 2
    10a8:	8d 91       	ld	r24, X+
    10aa:	9c 91       	ld	r25, X
    10ac:	13 97       	sbiw	r26, 0x03	; 3
    10ae:	e8 0f       	add	r30, r24
    10b0:	f9 1f       	adc	r31, r25
    10b2:	2e e2       	ldi	r18, 0x2E	; 46
    10b4:	30 e2       	ldi	r19, 0x20	; 32
    10b6:	4d 2f       	mov	r20, r29
    10b8:	65 e0       	ldi	r22, 0x05	; 5
    10ba:	80 81       	ld	r24, Z
    10bc:	91 81       	ldd	r25, Z+1	; 0x01
    10be:	e4 d0       	rcall	.+456    	; 0x1288 <gfx_mono_draw_progmem_string>
	if (redraw_state == true) {
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
				i < menu_page *
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN +
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN &&
				i < menu->num_elements; i++) {
    10c0:	cf 5f       	subi	r28, 0xFF	; 255
			GFX_MONO_MENU_ELEMENTS_PER_SCREEN) + 1));

	/* Print visible options if page or menu has changed */
	if (redraw_state == true) {
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
				i < menu_page *
    10c2:	8c 2f       	mov	r24, r28
    10c4:	90 e0       	ldi	r25, 0x00	; 0
			SYSFONT_LINESPACING * ((menu->current_selection %
			GFX_MONO_MENU_ELEMENTS_PER_SCREEN) + 1));

	/* Print visible options if page or menu has changed */
	if (redraw_state == true) {
		for (i = menu_page * GFX_MONO_MENU_ELEMENTS_PER_SCREEN;
    10c6:	80 17       	cp	r24, r16
    10c8:	91 07       	cpc	r25, r17
    10ca:	2c f4       	brge	.+10     	; 0x10d6 <menu_draw+0xe6>
    10cc:	d8 5f       	subi	r29, 0xF8	; 248
				i < menu_page *
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN +
				GFX_MONO_MENU_ELEMENTS_PER_SCREEN &&
    10ce:	f7 01       	movw	r30, r14
    10d0:	84 81       	ldd	r24, Z+4	; 0x04
    10d2:	c8 17       	cp	r28, r24
    10d4:	18 f3       	brcs	.-58     	; 0x109c <menu_draw+0xac>
					(char PROGMEM_PTR_T)menu->strings[i],
					GFX_MONO_MENU_INDICATOR_WIDTH + 1,
					line * SYSFONT_LINESPACING, &sysfont);
			line++;
		}
		redraw_state = false;
    10d6:	10 92 62 22 	sts	0x2262, r1
	}
}
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	ff 90       	pop	r15
    10e4:	ef 90       	pop	r14
    10e6:	08 95       	ret

000010e8 <gfx_mono_menu_init>:
 *
 * \param menu  menu struct with menu options
 *
 */
void gfx_mono_menu_init(struct gfx_mono_menu *menu)
{
    10e8:	0f 93       	push	r16
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	ec 01       	movw	r28, r24
	/* Clear screen */
	gfx_mono_draw_filled_rect(0, 0,
    10f0:	00 e0       	ldi	r16, 0x00	; 0
    10f2:	20 e2       	ldi	r18, 0x20	; 32
    10f4:	40 e8       	ldi	r20, 0x80	; 128
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	f6 de       	rcall	.-532    	; 0xee8 <gfx_mono_generic_draw_filled_rect>
			GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT, GFX_PIXEL_CLR);

	/* Draw the menu title on the top of the screen */
	gfx_mono_draw_progmem_string((char PROGMEM_PTR_T)menu->title,
    10fc:	2e e2       	ldi	r18, 0x2E	; 46
    10fe:	30 e2       	ldi	r19, 0x20	; 32
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	88 81       	ld	r24, Y
    1106:	99 81       	ldd	r25, Y+1	; 0x01
    1108:	bf d0       	rcall	.+382    	; 0x1288 <gfx_mono_draw_progmem_string>
			0, 0, &sysfont);

	/* Draw menu options below */
	menu_draw(menu, true);
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	ce 01       	movw	r24, r28
    110e:	70 df       	rcall	.-288    	; 0xff0 <menu_draw>
}
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	0f 91       	pop	r16
    1116:	08 95       	ret

00001118 <gfx_mono_menu_process_key>:
 *
 * \retval selected menu option or status code
 */
uint8_t gfx_mono_menu_process_key(struct gfx_mono_menu *menu, uint8_t keycode)
{
	switch (keycode) {
    1118:	6d 30       	cpi	r22, 0x0D	; 13
    111a:	59 f1       	breq	.+86     	; 0x1172 <gfx_mono_menu_process_key+0x5a>
    111c:	18 f4       	brcc	.+6      	; 0x1124 <gfx_mono_menu_process_key+0xc>
    111e:	68 30       	cpi	r22, 0x08	; 8
    1120:	59 f1       	breq	.+86     	; 0x1178 <gfx_mono_menu_process_key+0x60>
    1122:	05 c0       	rjmp	.+10     	; 0x112e <gfx_mono_menu_process_key+0x16>
    1124:	fc 01       	movw	r30, r24
    1126:	66 32       	cpi	r22, 0x26	; 38
    1128:	b1 f0       	breq	.+44     	; 0x1156 <gfx_mono_menu_process_key+0x3e>
    112a:	68 32       	cpi	r22, 0x28	; 40
    112c:	11 f0       	breq	.+4      	; 0x1132 <gfx_mono_menu_process_key+0x1a>
		/* User pressed "back" key, inform user */
		return GFX_MONO_MENU_EVENT_EXIT;

	default:
		/* Unknown key event */
		return GFX_MONO_MENU_EVENT_IDLE;
    112e:	8f ef       	ldi	r24, 0xFF	; 255
    1130:	08 95       	ret
 */
uint8_t gfx_mono_menu_process_key(struct gfx_mono_menu *menu, uint8_t keycode)
{
	switch (keycode) {
	case GFX_MONO_MENU_KEYCODE_DOWN:
		if (menu->current_selection == menu->num_elements - 1) {
    1132:	25 81       	ldd	r18, Z+5	; 0x05
    1134:	42 2f       	mov	r20, r18
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	84 81       	ldd	r24, Z+4	; 0x04
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	48 17       	cp	r20, r24
    1140:	59 07       	cpc	r21, r25
    1142:	11 f4       	brne	.+4      	; 0x1148 <gfx_mono_menu_process_key+0x30>
			menu->current_selection = 0;
    1144:	15 82       	std	Z+5, r1	; 0x05
    1146:	02 c0       	rjmp	.+4      	; 0x114c <gfx_mono_menu_process_key+0x34>
		} else {
			menu->current_selection++;
    1148:	2f 5f       	subi	r18, 0xFF	; 255
    114a:	25 83       	std	Z+5, r18	; 0x05
		}

		/* Update menu on display */
		menu_draw(menu, false);
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	cf 01       	movw	r24, r30
    1150:	4f df       	rcall	.-354    	; 0xff0 <menu_draw>
		/* Nothing selected yet */
		return GFX_MONO_MENU_EVENT_IDLE;
    1152:	8f ef       	ldi	r24, 0xFF	; 255
    1154:	08 95       	ret

	case GFX_MONO_MENU_KEYCODE_UP:
		if (menu->current_selection) {
    1156:	85 81       	ldd	r24, Z+5	; 0x05
    1158:	88 23       	and	r24, r24
    115a:	19 f0       	breq	.+6      	; 0x1162 <gfx_mono_menu_process_key+0x4a>
			menu->current_selection--;
    115c:	81 50       	subi	r24, 0x01	; 1
    115e:	85 83       	std	Z+5, r24	; 0x05
    1160:	03 c0       	rjmp	.+6      	; 0x1168 <gfx_mono_menu_process_key+0x50>
		} else {
			menu->current_selection = menu->num_elements - 1;
    1162:	84 81       	ldd	r24, Z+4	; 0x04
    1164:	81 50       	subi	r24, 0x01	; 1
    1166:	85 83       	std	Z+5, r24	; 0x05
		}

		/* Update menu on display */
		menu_draw(menu, false);
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	cf 01       	movw	r24, r30
    116c:	41 df       	rcall	.-382    	; 0xff0 <menu_draw>
		/* Nothing selected yet */
		return GFX_MONO_MENU_EVENT_IDLE;
    116e:	8f ef       	ldi	r24, 0xFF	; 255
    1170:	08 95       	ret

	case GFX_MONO_MENU_KEYCODE_ENTER:
		/* Got what we want. Return selection. */
		return menu->current_selection;
    1172:	fc 01       	movw	r30, r24
    1174:	85 81       	ldd	r24, Z+5	; 0x05
    1176:	08 95       	ret

	case GFX_MONO_MENU_KEYCODE_BACK:
		/* User pressed "back" key, inform user */
		return GFX_MONO_MENU_EVENT_EXIT;
    1178:	8e ef       	ldi	r24, 0xFE	; 254

	default:
		/* Unknown key event */
		return GFX_MONO_MENU_EVENT_IDLE;
	}
}
    117a:	08 95       	ret

0000117c <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    117c:	af 92       	push	r10
    117e:	bf 92       	push	r11
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	c8 2f       	mov	r28, r24
    1192:	e6 2e       	mov	r14, r22
    1194:	b4 2e       	mov	r11, r20
    1196:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    1198:	00 e0       	ldi	r16, 0x00	; 0
    119a:	f9 01       	movw	r30, r18
    119c:	24 81       	ldd	r18, Z+4	; 0x04
    119e:	43 81       	ldd	r20, Z+3	; 0x03
    11a0:	6b 2d       	mov	r22, r11
    11a2:	8e 2d       	mov	r24, r14
    11a4:	a1 de       	rcall	.-702    	; 0xee8 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    11a6:	f6 01       	movw	r30, r12
    11a8:	80 81       	ld	r24, Z
    11aa:	81 11       	cpse	r24, r1
    11ac:	39 c0       	rjmp	.+114    	; 0x1220 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    11ae:	83 81       	ldd	r24, Z+3	; 0x03
    11b0:	28 2f       	mov	r18, r24
    11b2:	26 95       	lsr	r18
    11b4:	26 95       	lsr	r18
    11b6:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    11b8:	87 70       	andi	r24, 0x07	; 7
    11ba:	09 f0       	breq	.+2      	; 0x11be <gfx_mono_draw_char+0x42>
		char_row_size++;
    11bc:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    11be:	f6 01       	movw	r30, r12
    11c0:	a4 80       	ldd	r10, Z+4	; 0x04
    11c2:	2a 9d       	mul	r18, r10
    11c4:	90 01       	movw	r18, r0
    11c6:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
    11c8:	8c 2f       	mov	r24, r28
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	45 81       	ldd	r20, Z+5	; 0x05
    11ce:	84 1b       	sub	r24, r20
    11d0:	91 09       	sbc	r25, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
    11d2:	28 9f       	mul	r18, r24
    11d4:	a0 01       	movw	r20, r0
    11d6:	29 9f       	mul	r18, r25
    11d8:	50 0d       	add	r21, r0
    11da:	38 9f       	mul	r19, r24
    11dc:	50 0d       	add	r21, r0
    11de:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    11e0:	01 81       	ldd	r16, Z+1	; 0x01
    11e2:	12 81       	ldd	r17, Z+2	; 0x02
    11e4:	04 0f       	add	r16, r20
    11e6:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    11e8:	f6 01       	movw	r30, r12
    11ea:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    11ec:	ff 20       	and	r15, r15
    11ee:	a1 f0       	breq	.+40     	; 0x1218 <gfx_mono_draw_char+0x9c>
    11f0:	d0 e0       	ldi	r29, 0x00	; 0
    11f2:	c0 e0       	ldi	r28, 0x00	; 0
    11f4:	8c 2f       	mov	r24, r28
    11f6:	8e 0d       	add	r24, r14
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    11f8:	9c 2f       	mov	r25, r28
    11fa:	97 70       	andi	r25, 0x07	; 7
    11fc:	21 f4       	brne	.+8      	; 0x1206 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    11fe:	f8 01       	movw	r30, r16
    1200:	d4 91       	lpm	r29, Z
				glyph_data++;
    1202:	0f 5f       	subi	r16, 0xFF	; 255
    1204:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    1206:	dd 23       	and	r29, r29
    1208:	1c f4       	brge	.+6      	; 0x1210 <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
    120a:	41 e0       	ldi	r20, 0x01	; 1
    120c:	6b 2d       	mov	r22, r11
    120e:	8c dd       	rcall	.-1256   	; 0xd28 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    1210:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    1212:	cf 5f       	subi	r28, 0xFF	; 255
    1214:	cf 11       	cpse	r28, r15
    1216:	ee cf       	rjmp	.-36     	; 0x11f4 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    1218:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    121a:	aa 94       	dec	r10
	} while (rows_left > 0);
    121c:	a1 10       	cpse	r10, r1
    121e:	e4 cf       	rjmp	.-56     	; 0x11e8 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	ff 90       	pop	r15
    122a:	ef 90       	pop	r14
    122c:	df 90       	pop	r13
    122e:	cf 90       	pop	r12
    1230:	bf 90       	pop	r11
    1232:	af 90       	pop	r10
    1234:	08 95       	ret

00001236 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    1236:	df 92       	push	r13
    1238:	ef 92       	push	r14
    123a:	ff 92       	push	r15
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	04 2f       	mov	r16, r20
    1246:	79 01       	movw	r14, r18
    1248:	ec 01       	movw	r28, r24
    124a:	16 2f       	mov	r17, r22

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    124c:	d6 2e       	mov	r13, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    124e:	89 91       	ld	r24, Y+
    1250:	8a 30       	cpi	r24, 0x0A	; 10
    1252:	31 f4       	brne	.+12     	; 0x1260 <gfx_mono_draw_string+0x2a>
    1254:	f7 01       	movw	r30, r14
    1256:	84 81       	ldd	r24, Z+4	; 0x04
    1258:	8f 5f       	subi	r24, 0xFF	; 255
			x = start_of_string_position_x;
			y += font->height + 1;
    125a:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    125c:	1d 2d       	mov	r17, r13
    125e:	09 c0       	rjmp	.+18     	; 0x1272 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    1260:	8d 30       	cpi	r24, 0x0D	; 13
    1262:	39 f0       	breq	.+14     	; 0x1272 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    1264:	97 01       	movw	r18, r14
    1266:	40 2f       	mov	r20, r16
    1268:	61 2f       	mov	r22, r17
    126a:	88 df       	rcall	.-240    	; 0x117c <gfx_mono_draw_char>
			x += font->width;
    126c:	f7 01       	movw	r30, r14
    126e:	83 81       	ldd	r24, Z+3	; 0x03
    1270:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    1272:	88 81       	ld	r24, Y
    1274:	81 11       	cpse	r24, r1
    1276:	eb cf       	rjmp	.-42     	; 0x124e <gfx_mono_draw_string+0x18>
}
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	ff 90       	pop	r15
    1282:	ef 90       	pop	r14
    1284:	df 90       	pop	r13
    1286:	08 95       	ret

00001288 <gfx_mono_draw_progmem_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_progmem_string(char PROGMEM_PTR_T str, gfx_coord_t x,
		gfx_coord_t y, const struct font *font)
{
    1288:	df 92       	push	r13
    128a:	ef 92       	push	r14
    128c:	ff 92       	push	r15
    128e:	0f 93       	push	r16
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	ec 01       	movw	r28, r24
    1298:	04 2f       	mov	r16, r20
    129a:	79 01       	movw	r14, r18

	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;

	/* Draw characters until trailing null byte */
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);
    129c:	fc 01       	movw	r30, r24
    129e:	94 91       	lpm	r25, Z
    12a0:	89 2f       	mov	r24, r25

	while (temp_char) {
    12a2:	99 23       	and	r25, r25
    12a4:	c1 f0       	breq	.+48     	; 0x12d6 <gfx_mono_draw_progmem_string+0x4e>
    12a6:	16 2f       	mov	r17, r22
		/* Handle '\n' as newline, draw normal characters. */
		if (temp_char == '\n') {
			x = start_of_string_position_x;
    12a8:	d6 2e       	mov	r13, r22
	/* Draw characters until trailing null byte */
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);

	while (temp_char) {
		/* Handle '\n' as newline, draw normal characters. */
		if (temp_char == '\n') {
    12aa:	8a 30       	cpi	r24, 0x0A	; 10
    12ac:	31 f4       	brne	.+12     	; 0x12ba <gfx_mono_draw_progmem_string+0x32>
    12ae:	f7 01       	movw	r30, r14
    12b0:	84 81       	ldd	r24, Z+4	; 0x04
    12b2:	8f 5f       	subi	r24, 0xFF	; 255
			x = start_of_string_position_x;
			y += font->height + 1;
    12b4:	08 0f       	add	r16, r24
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);

	while (temp_char) {
		/* Handle '\n' as newline, draw normal characters. */
		if (temp_char == '\n') {
			x = start_of_string_position_x;
    12b6:	1d 2d       	mov	r17, r13
    12b8:	09 c0       	rjmp	.+18     	; 0x12cc <gfx_mono_draw_progmem_string+0x44>
			y += font->height + 1;
		} else if (temp_char == '\r') {
    12ba:	8d 30       	cpi	r24, 0x0D	; 13
    12bc:	39 f0       	breq	.+14     	; 0x12cc <gfx_mono_draw_progmem_string+0x44>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(temp_char, x, y, font);
    12be:	97 01       	movw	r18, r14
    12c0:	40 2f       	mov	r20, r16
    12c2:	61 2f       	mov	r22, r17
    12c4:	5b df       	rcall	.-330    	; 0x117c <gfx_mono_draw_char>
			x += font->width;
    12c6:	f7 01       	movw	r30, r14
    12c8:	83 81       	ldd	r24, Z+3	; 0x03
    12ca:	18 0f       	add	r17, r24
		}

		temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)(++str));
    12cc:	21 96       	adiw	r28, 0x01	; 1
    12ce:	fe 01       	movw	r30, r28
    12d0:	84 91       	lpm	r24, Z
	const gfx_coord_t start_of_string_position_x = x;

	/* Draw characters until trailing null byte */
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);

	while (temp_char) {
    12d2:	81 11       	cpse	r24, r1
    12d4:	ea cf       	rjmp	.-44     	; 0x12aa <gfx_mono_draw_progmem_string+0x22>
			x += font->width;
		}

		temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)(++str));
	}
}
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	ff 90       	pop	r15
    12e0:	ef 90       	pop	r14
    12e2:	df 90       	pop	r13
    12e4:	08 95       	ret

000012e6 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    12e6:	80 3a       	cpi	r24, 0xA0	; 160
    12e8:	28 e0       	ldi	r18, 0x08	; 8
    12ea:	92 07       	cpc	r25, r18
    12ec:	21 f4       	brne	.+8      	; 0x12f6 <usart_spi_init+0x10>
    12ee:	60 e1       	ldi	r22, 0x10	; 16
    12f0:	83 e0       	ldi	r24, 0x03	; 3
    12f2:	52 cb       	rjmp	.-2396   	; 0x998 <sysclk_enable_module>
    12f4:	08 95       	ret
    12f6:	80 3b       	cpi	r24, 0xB0	; 176
    12f8:	28 e0       	ldi	r18, 0x08	; 8
    12fa:	92 07       	cpc	r25, r18
    12fc:	21 f4       	brne	.+8      	; 0x1306 <usart_spi_init+0x20>
    12fe:	60 e2       	ldi	r22, 0x20	; 32
    1300:	83 e0       	ldi	r24, 0x03	; 3
    1302:	4a cb       	rjmp	.-2412   	; 0x998 <sysclk_enable_module>
    1304:	08 95       	ret
    1306:	80 3a       	cpi	r24, 0xA0	; 160
    1308:	29 e0       	ldi	r18, 0x09	; 9
    130a:	92 07       	cpc	r25, r18
    130c:	21 f4       	brne	.+8      	; 0x1316 <usart_spi_init+0x30>
    130e:	60 e1       	ldi	r22, 0x10	; 16
    1310:	84 e0       	ldi	r24, 0x04	; 4
    1312:	42 cb       	rjmp	.-2428   	; 0x998 <sysclk_enable_module>
    1314:	08 95       	ret
    1316:	80 3b       	cpi	r24, 0xB0	; 176
    1318:	29 e0       	ldi	r18, 0x09	; 9
    131a:	92 07       	cpc	r25, r18
    131c:	21 f4       	brne	.+8      	; 0x1326 <usart_spi_init+0x40>
    131e:	60 e2       	ldi	r22, 0x20	; 32
    1320:	84 e0       	ldi	r24, 0x04	; 4
    1322:	3a cb       	rjmp	.-2444   	; 0x998 <sysclk_enable_module>
    1324:	08 95       	ret
    1326:	80 3a       	cpi	r24, 0xA0	; 160
    1328:	2a e0       	ldi	r18, 0x0A	; 10
    132a:	92 07       	cpc	r25, r18
    132c:	21 f4       	brne	.+8      	; 0x1336 <usart_spi_init+0x50>
    132e:	60 e1       	ldi	r22, 0x10	; 16
    1330:	85 e0       	ldi	r24, 0x05	; 5
    1332:	32 cb       	rjmp	.-2460   	; 0x998 <sysclk_enable_module>
    1334:	08 95       	ret
    1336:	80 3a       	cpi	r24, 0xA0	; 160
    1338:	9b 40       	sbci	r25, 0x0B	; 11
    133a:	19 f4       	brne	.+6      	; 0x1342 <usart_spi_init+0x5c>
    133c:	60 e1       	ldi	r22, 0x10	; 16
    133e:	86 e0       	ldi	r24, 0x06	; 6
    1340:	2b cb       	rjmp	.-2474   	; 0x998 <sysclk_enable_module>
    1342:	08 95       	ret

00001344 <usart_spi_setup_device>:
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	00 d0       	rcall	.+0      	; 0x134e <usart_spi_setup_device+0xa>
    134e:	00 d0       	rcall	.+0      	; 0x1350 <usart_spi_setup_device+0xc>
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	09 83       	std	Y+1, r16	; 0x01
    1356:	1a 83       	std	Y+2, r17	; 0x02
    1358:	2b 83       	std	Y+3, r18	; 0x03
    135a:	3c 83       	std	Y+4, r19	; 0x04
    135c:	4d 83       	std	Y+5, r20	; 0x05
    135e:	1e 82       	std	Y+6, r1	; 0x06
    1360:	be 01       	movw	r22, r28
    1362:	6f 5f       	subi	r22, 0xFF	; 255
    1364:	7f 4f       	sbci	r23, 0xFF	; 255
    1366:	5e d3       	rcall	.+1724   	; 0x1a24 <usart_init_spi>
    1368:	26 96       	adiw	r28, 0x06	; 6
    136a:	cd bf       	out	0x3d, r28	; 61
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	08 95       	ret

00001378 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    1378:	fb 01       	movw	r30, r22
    137a:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    137c:	e8 2f       	mov	r30, r24
    137e:	e6 95       	lsr	r30
    1380:	e6 95       	lsr	r30
    1382:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    1384:	40 e2       	ldi	r20, 0x20	; 32
    1386:	e4 9f       	mul	r30, r20
    1388:	f0 01       	movw	r30, r0
    138a:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    138c:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    138e:	87 70       	andi	r24, 0x07	; 7
    1390:	21 e0       	ldi	r18, 0x01	; 1
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	a9 01       	movw	r20, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <usart_spi_select_device+0x24>
    1398:	44 0f       	add	r20, r20
    139a:	55 1f       	adc	r21, r21
    139c:	8a 95       	dec	r24
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    13a0:	46 83       	std	Z+6, r20	; 0x06
    13a2:	08 95       	ret

000013a4 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    13a4:	fb 01       	movw	r30, r22
    13a6:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    13a8:	e8 2f       	mov	r30, r24
    13aa:	e6 95       	lsr	r30
    13ac:	e6 95       	lsr	r30
    13ae:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    13b0:	40 e2       	ldi	r20, 0x20	; 32
    13b2:	e4 9f       	mul	r30, r20
    13b4:	f0 01       	movw	r30, r0
    13b6:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    13b8:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    13ba:	87 70       	andi	r24, 0x07	; 7
    13bc:	21 e0       	ldi	r18, 0x01	; 1
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	a9 01       	movw	r20, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <usart_spi_deselect_device+0x24>
    13c4:	44 0f       	add	r20, r20
    13c6:	55 1f       	adc	r21, r21
    13c8:	8a 95       	dec	r24
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    13cc:	45 83       	std	Z+5, r20	; 0x05
    13ce:	08 95       	ret

000013d0 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	fc 01       	movw	r30, r24
    13d6:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    13dc:	c6 2f       	mov	r28, r22
    13de:	d0 e0       	ldi	r29, 0x00	; 0
    13e0:	de 01       	movw	r26, r28
    13e2:	02 2e       	mov	r0, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <ioport_configure_port_pin+0x1a>
    13e6:	b5 95       	asr	r27
    13e8:	a7 95       	ror	r26
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <ioport_configure_port_pin+0x16>
    13ee:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    13f0:	50 83       	st	Z, r21
    13f2:	2f 5f       	subi	r18, 0xFF	; 255
    13f4:	3f 4f       	sbci	r19, 0xFF	; 255
    13f6:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    13f8:	28 30       	cpi	r18, 0x08	; 8
    13fa:	31 05       	cpc	r19, r1
    13fc:	89 f7       	brne	.-30     	; 0x13e0 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    13fe:	40 ff       	sbrs	r20, 0
    1400:	0a c0       	rjmp	.+20     	; 0x1416 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    1402:	41 ff       	sbrs	r20, 1
    1404:	03 c0       	rjmp	.+6      	; 0x140c <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1406:	fc 01       	movw	r30, r24
    1408:	65 83       	std	Z+5, r22	; 0x05
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    140c:	fc 01       	movw	r30, r24
    140e:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1410:	fc 01       	movw	r30, r24
    1412:	61 83       	std	Z+1, r22	; 0x01
    1414:	02 c0       	rjmp	.+4      	; 0x141a <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1416:	fc 01       	movw	r30, r24
    1418:	62 83       	std	Z+2, r22	; 0x02
	}
}
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	08 95       	ret

00001420 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1420:	43 e0       	ldi	r20, 0x03	; 3
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	80 ee       	ldi	r24, 0xE0	; 224
    1428:	97 e0       	ldi	r25, 0x07	; 7
    142a:	d2 df       	rcall	.-92     	; 0x13d0 <ioport_configure_port_pin>
    142c:	43 e0       	ldi	r20, 0x03	; 3
    142e:	50 e0       	ldi	r21, 0x00	; 0
    1430:	62 e0       	ldi	r22, 0x02	; 2
    1432:	80 ee       	ldi	r24, 0xE0	; 224
    1434:	97 e0       	ldi	r25, 0x07	; 7
    1436:	cc df       	rcall	.-104    	; 0x13d0 <ioport_configure_port_pin>
    1438:	43 e0       	ldi	r20, 0x03	; 3
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	60 e1       	ldi	r22, 0x10	; 16
    143e:	80 e6       	ldi	r24, 0x60	; 96
    1440:	96 e0       	ldi	r25, 0x06	; 6
    1442:	c6 df       	rcall	.-116    	; 0x13d0 <ioport_configure_port_pin>
    1444:	41 e0       	ldi	r20, 0x01	; 1
    1446:	50 e4       	ldi	r21, 0x40	; 64
    1448:	60 e2       	ldi	r22, 0x20	; 32
    144a:	80 e6       	ldi	r24, 0x60	; 96
    144c:	96 e0       	ldi	r25, 0x06	; 6
    144e:	c0 df       	rcall	.-128    	; 0x13d0 <ioport_configure_port_pin>
    1450:	40 e0       	ldi	r20, 0x00	; 0
    1452:	5b e1       	ldi	r21, 0x1B	; 27
    1454:	60 e2       	ldi	r22, 0x20	; 32
    1456:	80 e8       	ldi	r24, 0x80	; 128
    1458:	96 e0       	ldi	r25, 0x06	; 6
    145a:	ba df       	rcall	.-140    	; 0x13d0 <ioport_configure_port_pin>
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	5b e1       	ldi	r21, 0x1B	; 27
    1460:	62 e0       	ldi	r22, 0x02	; 2
    1462:	80 ea       	ldi	r24, 0xA0	; 160
    1464:	96 e0       	ldi	r25, 0x06	; 6
    1466:	b4 df       	rcall	.-152    	; 0x13d0 <ioport_configure_port_pin>
    1468:	40 e0       	ldi	r20, 0x00	; 0
    146a:	5b e1       	ldi	r21, 0x1B	; 27
    146c:	64 e0       	ldi	r22, 0x04	; 4
    146e:	80 ea       	ldi	r24, 0xA0	; 160
    1470:	96 e0       	ldi	r25, 0x06	; 6
    1472:	ae df       	rcall	.-164    	; 0x13d0 <ioport_configure_port_pin>
    1474:	43 e0       	ldi	r20, 0x03	; 3
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	62 e0       	ldi	r22, 0x02	; 2
    147a:	80 e6       	ldi	r24, 0x60	; 96
    147c:	96 e0       	ldi	r25, 0x06	; 6
    147e:	a8 df       	rcall	.-176    	; 0x13d0 <ioport_configure_port_pin>
    1480:	43 e0       	ldi	r20, 0x03	; 3
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	68 e0       	ldi	r22, 0x08	; 8
    1486:	80 e6       	ldi	r24, 0x60	; 96
    1488:	96 e0       	ldi	r25, 0x06	; 6
    148a:	a2 df       	rcall	.-188    	; 0x13d0 <ioport_configure_port_pin>
    148c:	43 e0       	ldi	r20, 0x03	; 3
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	68 e0       	ldi	r22, 0x08	; 8
    1492:	80 ea       	ldi	r24, 0xA0	; 160
    1494:	96 e0       	ldi	r25, 0x06	; 6
    1496:	9c df       	rcall	.-200    	; 0x13d0 <ioport_configure_port_pin>
    1498:	43 e0       	ldi	r20, 0x03	; 3
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	80 e6       	ldi	r24, 0x60	; 96
    14a0:	96 e0       	ldi	r25, 0x06	; 6
    14a2:	96 df       	rcall	.-212    	; 0x13d0 <ioport_configure_port_pin>
    14a4:	43 e0       	ldi	r20, 0x03	; 3
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	68 e0       	ldi	r22, 0x08	; 8
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	96 e0       	ldi	r25, 0x06	; 6
    14ae:	90 df       	rcall	.-224    	; 0x13d0 <ioport_configure_port_pin>
    14b0:	41 e0       	ldi	r20, 0x01	; 1
    14b2:	50 e0       	ldi	r21, 0x00	; 0
    14b4:	60 e1       	ldi	r22, 0x10	; 16
    14b6:	80 e8       	ldi	r24, 0x80	; 128
    14b8:	96 e0       	ldi	r25, 0x06	; 6
    14ba:	8a df       	rcall	.-236    	; 0x13d0 <ioport_configure_port_pin>
    14bc:	43 e0       	ldi	r20, 0x03	; 3
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	62 e0       	ldi	r22, 0x02	; 2
    14c2:	80 e6       	ldi	r24, 0x60	; 96
    14c4:	96 e0       	ldi	r25, 0x06	; 6
    14c6:	84 df       	rcall	.-248    	; 0x13d0 <ioport_configure_port_pin>
    14c8:	43 e0       	ldi	r20, 0x03	; 3
    14ca:	50 e0       	ldi	r21, 0x00	; 0
    14cc:	68 e0       	ldi	r22, 0x08	; 8
    14ce:	80 e6       	ldi	r24, 0x60	; 96
    14d0:	96 e0       	ldi	r25, 0x06	; 6
    14d2:	7e df       	rcall	.-260    	; 0x13d0 <ioport_configure_port_pin>
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	64 e0       	ldi	r22, 0x04	; 4
    14da:	80 e6       	ldi	r24, 0x60	; 96
    14dc:	96 e0       	ldi	r25, 0x06	; 6
    14de:	78 df       	rcall	.-272    	; 0x13d0 <ioport_configure_port_pin>
    14e0:	43 e0       	ldi	r20, 0x03	; 3
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	60 e1       	ldi	r22, 0x10	; 16
    14e6:	80 ea       	ldi	r24, 0xA0	; 160
    14e8:	96 e0       	ldi	r25, 0x06	; 6
    14ea:	72 df       	rcall	.-284    	; 0x13d0 <ioport_configure_port_pin>
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	61 e0       	ldi	r22, 0x01	; 1
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	96 e0       	ldi	r25, 0x06	; 6
    14f6:	6c df       	rcall	.-296    	; 0x13d0 <ioport_configure_port_pin>
    14f8:	40 e0       	ldi	r20, 0x00	; 0
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	64 e0       	ldi	r22, 0x04	; 4
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	96 e0       	ldi	r25, 0x06	; 6
    1502:	66 df       	rcall	.-308    	; 0x13d0 <ioport_configure_port_pin>
    1504:	40 e0       	ldi	r20, 0x00	; 0
    1506:	50 e0       	ldi	r21, 0x00	; 0
    1508:	62 e0       	ldi	r22, 0x02	; 2
    150a:	80 e2       	ldi	r24, 0x20	; 32
    150c:	96 e0       	ldi	r25, 0x06	; 6
    150e:	60 df       	rcall	.-320    	; 0x13d0 <ioport_configure_port_pin>
    1510:	43 e0       	ldi	r20, 0x03	; 3
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	68 e0       	ldi	r22, 0x08	; 8
    1516:	80 e4       	ldi	r24, 0x40	; 64
    1518:	96 e0       	ldi	r25, 0x06	; 6
    151a:	5a df       	rcall	.-332    	; 0x13d0 <ioport_configure_port_pin>
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	64 e0       	ldi	r22, 0x04	; 4
    1522:	80 e4       	ldi	r24, 0x40	; 64
    1524:	96 e0       	ldi	r25, 0x06	; 6
    1526:	54 df       	rcall	.-344    	; 0x13d0 <ioport_configure_port_pin>
    1528:	43 e0       	ldi	r20, 0x03	; 3
    152a:	50 e0       	ldi	r21, 0x00	; 0
    152c:	68 e0       	ldi	r22, 0x08	; 8
    152e:	80 e6       	ldi	r24, 0x60	; 96
    1530:	96 e0       	ldi	r25, 0x06	; 6
    1532:	4e df       	rcall	.-356    	; 0x13d0 <ioport_configure_port_pin>
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	64 e0       	ldi	r22, 0x04	; 4
    153a:	80 e6       	ldi	r24, 0x60	; 96
    153c:	96 e0       	ldi	r25, 0x06	; 6
    153e:	48 df       	rcall	.-368    	; 0x13d0 <ioport_configure_port_pin>
    1540:	43 e0       	ldi	r20, 0x03	; 3
    1542:	50 e0       	ldi	r21, 0x00	; 0
    1544:	68 e0       	ldi	r22, 0x08	; 8
    1546:	80 e8       	ldi	r24, 0x80	; 128
    1548:	96 e0       	ldi	r25, 0x06	; 6
    154a:	42 df       	rcall	.-380    	; 0x13d0 <ioport_configure_port_pin>
    154c:	40 e0       	ldi	r20, 0x00	; 0
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	64 e0       	ldi	r22, 0x04	; 4
    1552:	80 e8       	ldi	r24, 0x80	; 128
    1554:	96 e0       	ldi	r25, 0x06	; 6
    1556:	3c cf       	rjmp	.-392    	; 0x13d0 <ioport_configure_port_pin>
    1558:	08 95       	ret

0000155a <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    155a:	fc 01       	movw	r30, r24
    155c:	91 81       	ldd	r25, Z+1	; 0x01
    155e:	95 ff       	sbrs	r25, 5
    1560:	fd cf       	rjmp	.-6      	; 0x155c <usart_putchar+0x2>
    1562:	60 83       	st	Z, r22
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	08 95       	ret

0000156a <usart_getchar>:
    156a:	fc 01       	movw	r30, r24
    156c:	91 81       	ldd	r25, Z+1	; 0x01
    156e:	99 23       	and	r25, r25
    1570:	ec f7       	brge	.-6      	; 0x156c <usart_getchar+0x2>
    1572:	80 81       	ld	r24, Z
    1574:	08 95       	ret

00001576 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1576:	2f 92       	push	r2
    1578:	3f 92       	push	r3
    157a:	4f 92       	push	r4
    157c:	5f 92       	push	r5
    157e:	6f 92       	push	r6
    1580:	7f 92       	push	r7
    1582:	8f 92       	push	r8
    1584:	9f 92       	push	r9
    1586:	af 92       	push	r10
    1588:	bf 92       	push	r11
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	1c 01       	movw	r2, r24
    159a:	2a 01       	movw	r4, r20
    159c:	3b 01       	movw	r6, r22
    159e:	48 01       	movw	r8, r16
    15a0:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    15a2:	d9 01       	movw	r26, r18
    15a4:	c8 01       	movw	r24, r16
    15a6:	68 94       	set
    15a8:	12 f8       	bld	r1, 2
    15aa:	b6 95       	lsr	r27
    15ac:	a7 95       	ror	r26
    15ae:	97 95       	ror	r25
    15b0:	87 95       	ror	r24
    15b2:	16 94       	lsr	r1
    15b4:	d1 f7       	brne	.-12     	; 0x15aa <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    15b6:	b9 01       	movw	r22, r18
    15b8:	a8 01       	movw	r20, r16
    15ba:	03 2e       	mov	r0, r19
    15bc:	36 e1       	ldi	r19, 0x16	; 22
    15be:	76 95       	lsr	r23
    15c0:	67 95       	ror	r22
    15c2:	57 95       	ror	r21
    15c4:	47 95       	ror	r20
    15c6:	3a 95       	dec	r19
    15c8:	d1 f7       	brne	.-12     	; 0x15be <usart_set_baudrate+0x48>
    15ca:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    15cc:	f1 01       	movw	r30, r2
    15ce:	24 81       	ldd	r18, Z+4	; 0x04
    15d0:	22 fd       	sbrc	r18, 2
    15d2:	08 c0       	rjmp	.+16     	; 0x15e4 <usart_set_baudrate+0x6e>
		max_rate /= 2;
    15d4:	b6 95       	lsr	r27
    15d6:	a7 95       	ror	r26
    15d8:	97 95       	ror	r25
    15da:	87 95       	ror	r24
		min_rate /= 2;
    15dc:	76 95       	lsr	r23
    15de:	67 95       	ror	r22
    15e0:	57 95       	ror	r21
    15e2:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    15e4:	84 15       	cp	r24, r4
    15e6:	95 05       	cpc	r25, r5
    15e8:	a6 05       	cpc	r26, r6
    15ea:	b7 05       	cpc	r27, r7
    15ec:	08 f4       	brcc	.+2      	; 0x15f0 <usart_set_baudrate+0x7a>
    15ee:	aa c0       	rjmp	.+340    	; 0x1744 <usart_set_baudrate+0x1ce>
    15f0:	44 16       	cp	r4, r20
    15f2:	55 06       	cpc	r5, r21
    15f4:	66 06       	cpc	r6, r22
    15f6:	77 06       	cpc	r7, r23
    15f8:	08 f4       	brcc	.+2      	; 0x15fc <usart_set_baudrate+0x86>
    15fa:	a6 c0       	rjmp	.+332    	; 0x1748 <usart_set_baudrate+0x1d2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    15fc:	f1 01       	movw	r30, r2
    15fe:	84 81       	ldd	r24, Z+4	; 0x04
    1600:	82 fd       	sbrc	r24, 2
    1602:	04 c0       	rjmp	.+8      	; 0x160c <usart_set_baudrate+0x96>
		baud *= 2;
    1604:	44 0c       	add	r4, r4
    1606:	55 1c       	adc	r5, r5
    1608:	66 1c       	adc	r6, r6
    160a:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    160c:	c5 01       	movw	r24, r10
    160e:	b4 01       	movw	r22, r8
    1610:	a3 01       	movw	r20, r6
    1612:	92 01       	movw	r18, r4
    1614:	f4 d4       	rcall	.+2536   	; 0x1ffe <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1616:	2f 3f       	cpi	r18, 0xFF	; 255
    1618:	31 05       	cpc	r19, r1
    161a:	41 05       	cpc	r20, r1
    161c:	51 05       	cpc	r21, r1
    161e:	08 f4       	brcc	.+2      	; 0x1622 <usart_set_baudrate+0xac>
    1620:	95 c0       	rjmp	.+298    	; 0x174c <usart_set_baudrate+0x1d6>
    1622:	c1 2c       	mov	r12, r1
    1624:	d1 2c       	mov	r13, r1
    1626:	76 01       	movw	r14, r12
    1628:	ca 94       	dec	r12
    162a:	c9 ef       	ldi	r28, 0xF9	; 249
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <usart_set_baudrate+0xc2>
    162e:	2c 15       	cp	r18, r12
    1630:	3d 05       	cpc	r19, r13
    1632:	4e 05       	cpc	r20, r14
    1634:	5f 05       	cpc	r21, r15
    1636:	68 f0       	brcs	.+26     	; 0x1652 <usart_set_baudrate+0xdc>
			break;
		}

		limit <<= 1;
    1638:	cc 0c       	add	r12, r12
    163a:	dd 1c       	adc	r13, r13
    163c:	ee 1c       	adc	r14, r14
    163e:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    1640:	cd 3f       	cpi	r28, 0xFD	; 253
    1642:	14 f4       	brge	.+4      	; 0x1648 <usart_set_baudrate+0xd2>
			limit |= 1;
    1644:	68 94       	set
    1646:	c0 f8       	bld	r12, 0
    1648:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    164a:	c7 30       	cpi	r28, 0x07	; 7
    164c:	81 f7       	brne	.-32     	; 0x162e <usart_set_baudrate+0xb8>
    164e:	8c 2f       	mov	r24, r28
    1650:	54 c0       	rjmp	.+168    	; 0x16fa <usart_set_baudrate+0x184>
    1652:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1654:	cc 23       	and	r28, r28
    1656:	0c f0       	brlt	.+2      	; 0x165a <usart_set_baudrate+0xe4>
    1658:	50 c0       	rjmp	.+160    	; 0x16fa <usart_set_baudrate+0x184>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    165a:	d3 01       	movw	r26, r6
    165c:	c2 01       	movw	r24, r4
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	aa 1f       	adc	r26, r26
    1664:	bb 1f       	adc	r27, r27
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	aa 1f       	adc	r26, r26
    166c:	bb 1f       	adc	r27, r27
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	aa 1f       	adc	r26, r26
    1674:	bb 1f       	adc	r27, r27
    1676:	85 01       	movw	r16, r10
    1678:	74 01       	movw	r14, r8
    167a:	e8 1a       	sub	r14, r24
    167c:	f9 0a       	sbc	r15, r25
    167e:	0a 0b       	sbc	r16, r26
    1680:	1b 0b       	sbc	r17, r27
    1682:	d8 01       	movw	r26, r16
    1684:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1686:	ce 3f       	cpi	r28, 0xFE	; 254
    1688:	ec f4       	brge	.+58     	; 0x16c4 <usart_set_baudrate+0x14e>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    168a:	2d ef       	ldi	r18, 0xFD	; 253
    168c:	3f ef       	ldi	r19, 0xFF	; 255
    168e:	2c 1b       	sub	r18, r28
    1690:	31 09       	sbc	r19, r1
    1692:	c7 fd       	sbrc	r28, 7
    1694:	33 95       	inc	r19
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <usart_set_baudrate+0x12a>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	aa 1f       	adc	r26, r26
    169e:	bb 1f       	adc	r27, r27
    16a0:	2a 95       	dec	r18
    16a2:	d2 f7       	brpl	.-12     	; 0x1698 <usart_set_baudrate+0x122>
    16a4:	73 01       	movw	r14, r6
    16a6:	62 01       	movw	r12, r4
    16a8:	f6 94       	lsr	r15
    16aa:	e7 94       	ror	r14
    16ac:	d7 94       	ror	r13
    16ae:	c7 94       	ror	r12
    16b0:	bc 01       	movw	r22, r24
    16b2:	cd 01       	movw	r24, r26
    16b4:	6c 0d       	add	r22, r12
    16b6:	7d 1d       	adc	r23, r13
    16b8:	8e 1d       	adc	r24, r14
    16ba:	9f 1d       	adc	r25, r15
    16bc:	a3 01       	movw	r20, r6
    16be:	92 01       	movw	r18, r4
    16c0:	9e d4       	rcall	.+2364   	; 0x1ffe <__udivmodsi4>
    16c2:	36 c0       	rjmp	.+108    	; 0x1730 <usart_set_baudrate+0x1ba>
		} else {
			baud <<= exp + 3;
    16c4:	23 e0       	ldi	r18, 0x03	; 3
    16c6:	2c 0f       	add	r18, r28
    16c8:	83 01       	movw	r16, r6
    16ca:	72 01       	movw	r14, r4
    16cc:	04 c0       	rjmp	.+8      	; 0x16d6 <usart_set_baudrate+0x160>
    16ce:	ee 0c       	add	r14, r14
    16d0:	ff 1c       	adc	r15, r15
    16d2:	00 1f       	adc	r16, r16
    16d4:	11 1f       	adc	r17, r17
    16d6:	2a 95       	dec	r18
    16d8:	d2 f7       	brpl	.-12     	; 0x16ce <usart_set_baudrate+0x158>
    16da:	a8 01       	movw	r20, r16
    16dc:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
    16de:	67 01       	movw	r12, r14
    16e0:	78 01       	movw	r14, r16
    16e2:	f6 94       	lsr	r15
    16e4:	e7 94       	ror	r14
    16e6:	d7 94       	ror	r13
    16e8:	c7 94       	ror	r12
    16ea:	bc 01       	movw	r22, r24
    16ec:	cd 01       	movw	r24, r26
    16ee:	6c 0d       	add	r22, r12
    16f0:	7d 1d       	adc	r23, r13
    16f2:	8e 1d       	adc	r24, r14
    16f4:	9f 1d       	adc	r25, r15
    16f6:	83 d4       	rcall	.+2310   	; 0x1ffe <__udivmodsi4>
    16f8:	1b c0       	rjmp	.+54     	; 0x1730 <usart_set_baudrate+0x1ba>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    16fa:	8d 5f       	subi	r24, 0xFD	; 253
    16fc:	a3 01       	movw	r20, r6
    16fe:	92 01       	movw	r18, r4
    1700:	04 c0       	rjmp	.+8      	; 0x170a <usart_set_baudrate+0x194>
    1702:	22 0f       	add	r18, r18
    1704:	33 1f       	adc	r19, r19
    1706:	44 1f       	adc	r20, r20
    1708:	55 1f       	adc	r21, r21
    170a:	8a 95       	dec	r24
    170c:	d2 f7       	brpl	.-12     	; 0x1702 <usart_set_baudrate+0x18c>
		div = (cpu_hz + baud / 2) / baud - 1;
    170e:	da 01       	movw	r26, r20
    1710:	c9 01       	movw	r24, r18
    1712:	b6 95       	lsr	r27
    1714:	a7 95       	ror	r26
    1716:	97 95       	ror	r25
    1718:	87 95       	ror	r24
    171a:	bc 01       	movw	r22, r24
    171c:	cd 01       	movw	r24, r26
    171e:	68 0d       	add	r22, r8
    1720:	79 1d       	adc	r23, r9
    1722:	8a 1d       	adc	r24, r10
    1724:	9b 1d       	adc	r25, r11
    1726:	6b d4       	rcall	.+2262   	; 0x1ffe <__udivmodsi4>
    1728:	21 50       	subi	r18, 0x01	; 1
    172a:	31 09       	sbc	r19, r1
    172c:	41 09       	sbc	r20, r1
    172e:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1730:	83 2f       	mov	r24, r19
    1732:	8f 70       	andi	r24, 0x0F	; 15
    1734:	c2 95       	swap	r28
    1736:	c0 7f       	andi	r28, 0xF0	; 240
    1738:	c8 2b       	or	r28, r24
    173a:	f1 01       	movw	r30, r2
    173c:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    173e:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	1c c0       	rjmp	.+56     	; 0x177c <usart_set_baudrate+0x206>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	1a c0       	rjmp	.+52     	; 0x177c <usart_set_baudrate+0x206>
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	18 c0       	rjmp	.+48     	; 0x177c <usart_set_baudrate+0x206>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    174c:	d3 01       	movw	r26, r6
    174e:	c2 01       	movw	r24, r4
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	aa 1f       	adc	r26, r26
    1756:	bb 1f       	adc	r27, r27
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	aa 1f       	adc	r26, r26
    175e:	bb 1f       	adc	r27, r27
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	aa 1f       	adc	r26, r26
    1766:	bb 1f       	adc	r27, r27
    1768:	85 01       	movw	r16, r10
    176a:	74 01       	movw	r14, r8
    176c:	e8 1a       	sub	r14, r24
    176e:	f9 0a       	sbc	r15, r25
    1770:	0a 0b       	sbc	r16, r26
    1772:	1b 0b       	sbc	r17, r27
    1774:	d8 01       	movw	r26, r16
    1776:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1778:	c9 ef       	ldi	r28, 0xF9	; 249
    177a:	87 cf       	rjmp	.-242    	; 0x168a <usart_set_baudrate+0x114>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    177c:	cf 91       	pop	r28
    177e:	1f 91       	pop	r17
    1780:	0f 91       	pop	r16
    1782:	ff 90       	pop	r15
    1784:	ef 90       	pop	r14
    1786:	df 90       	pop	r13
    1788:	cf 90       	pop	r12
    178a:	bf 90       	pop	r11
    178c:	af 90       	pop	r10
    178e:	9f 90       	pop	r9
    1790:	8f 90       	pop	r8
    1792:	7f 90       	pop	r7
    1794:	6f 90       	pop	r6
    1796:	5f 90       	pop	r5
    1798:	4f 90       	pop	r4
    179a:	3f 90       	pop	r3
    179c:	2f 90       	pop	r2
    179e:	08 95       	ret

000017a0 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    17a0:	0f 93       	push	r16
    17a2:	1f 93       	push	r17
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	ec 01       	movw	r28, r24
    17aa:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <usart_init_rs232+0x12>
    17b0:	e6 c0       	rjmp	.+460    	; 0x197e <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    17b2:	80 3c       	cpi	r24, 0xC0	; 192
    17b4:	91 05       	cpc	r25, r1
    17b6:	21 f4       	brne	.+8      	; 0x17c0 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    17b8:	60 e1       	ldi	r22, 0x10	; 16
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	ed d8       	rcall	.-3622   	; 0x998 <sysclk_enable_module>
    17be:	df c0       	rjmp	.+446    	; 0x197e <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    17c0:	c0 38       	cpi	r28, 0x80	; 128
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	d8 07       	cpc	r29, r24
    17c6:	21 f4       	brne	.+8      	; 0x17d0 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    17c8:	62 e0       	ldi	r22, 0x02	; 2
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	e5 d8       	rcall	.-3638   	; 0x998 <sysclk_enable_module>
    17ce:	d7 c0       	rjmp	.+430    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    17d0:	c1 15       	cp	r28, r1
    17d2:	e1 e0       	ldi	r30, 0x01	; 1
    17d4:	de 07       	cpc	r29, r30
    17d6:	21 f4       	brne	.+8      	; 0x17e0 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    17d8:	61 e0       	ldi	r22, 0x01	; 1
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	dd d8       	rcall	.-3654   	; 0x998 <sysclk_enable_module>
    17de:	cf c0       	rjmp	.+414    	; 0x197e <usart_init_rs232+0x1de>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    17e0:	c0 38       	cpi	r28, 0x80	; 128
    17e2:	f3 e0       	ldi	r31, 0x03	; 3
    17e4:	df 07       	cpc	r29, r31
    17e6:	21 f4       	brne	.+8      	; 0x17f0 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    17e8:	61 e0       	ldi	r22, 0x01	; 1
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	d5 d8       	rcall	.-3670   	; 0x998 <sysclk_enable_module>
    17ee:	c7 c0       	rjmp	.+398    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    17f0:	c0 39       	cpi	r28, 0x90	; 144
    17f2:	83 e0       	ldi	r24, 0x03	; 3
    17f4:	d8 07       	cpc	r29, r24
    17f6:	21 f4       	brne	.+8      	; 0x1800 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    17f8:	61 e0       	ldi	r22, 0x01	; 1
    17fa:	82 e0       	ldi	r24, 0x02	; 2
    17fc:	cd d8       	rcall	.-3686   	; 0x998 <sysclk_enable_module>
    17fe:	bf c0       	rjmp	.+382    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1800:	c1 15       	cp	r28, r1
    1802:	e2 e0       	ldi	r30, 0x02	; 2
    1804:	de 07       	cpc	r29, r30
    1806:	21 f4       	brne	.+8      	; 0x1810 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1808:	62 e0       	ldi	r22, 0x02	; 2
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	c5 d8       	rcall	.-3702   	; 0x998 <sysclk_enable_module>
    180e:	b7 c0       	rjmp	.+366    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1810:	c0 34       	cpi	r28, 0x40	; 64
    1812:	f2 e0       	ldi	r31, 0x02	; 2
    1814:	df 07       	cpc	r29, r31
    1816:	21 f4       	brne	.+8      	; 0x1820 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1818:	62 e0       	ldi	r22, 0x02	; 2
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	bd d8       	rcall	.-3718   	; 0x998 <sysclk_enable_module>
    181e:	af c0       	rjmp	.+350    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1820:	c0 32       	cpi	r28, 0x20	; 32
    1822:	83 e0       	ldi	r24, 0x03	; 3
    1824:	d8 07       	cpc	r29, r24
    1826:	21 f4       	brne	.+8      	; 0x1830 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1828:	64 e0       	ldi	r22, 0x04	; 4
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	b5 d8       	rcall	.-3734   	; 0x998 <sysclk_enable_module>
    182e:	a7 c0       	rjmp	.+334    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1830:	c1 15       	cp	r28, r1
    1832:	e8 e0       	ldi	r30, 0x08	; 8
    1834:	de 07       	cpc	r29, r30
    1836:	21 f4       	brne	.+8      	; 0x1840 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	ad d8       	rcall	.-3750   	; 0x998 <sysclk_enable_module>
    183e:	9f c0       	rjmp	.+318    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1840:	c1 15       	cp	r28, r1
    1842:	f9 e0       	ldi	r31, 0x09	; 9
    1844:	df 07       	cpc	r29, r31
    1846:	21 f4       	brne	.+8      	; 0x1850 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1848:	61 e0       	ldi	r22, 0x01	; 1
    184a:	84 e0       	ldi	r24, 0x04	; 4
    184c:	a5 d8       	rcall	.-3766   	; 0x998 <sysclk_enable_module>
    184e:	97 c0       	rjmp	.+302    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1850:	c1 15       	cp	r28, r1
    1852:	8a e0       	ldi	r24, 0x0A	; 10
    1854:	d8 07       	cpc	r29, r24
    1856:	21 f4       	brne	.+8      	; 0x1860 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	85 e0       	ldi	r24, 0x05	; 5
    185c:	9d d8       	rcall	.-3782   	; 0x998 <sysclk_enable_module>
    185e:	8f c0       	rjmp	.+286    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1860:	c1 15       	cp	r28, r1
    1862:	eb e0       	ldi	r30, 0x0B	; 11
    1864:	de 07       	cpc	r29, r30
    1866:	21 f4       	brne	.+8      	; 0x1870 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1868:	61 e0       	ldi	r22, 0x01	; 1
    186a:	86 e0       	ldi	r24, 0x06	; 6
    186c:	95 d8       	rcall	.-3798   	; 0x998 <sysclk_enable_module>
    186e:	87 c0       	rjmp	.+270    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1870:	c0 34       	cpi	r28, 0x40	; 64
    1872:	f8 e0       	ldi	r31, 0x08	; 8
    1874:	df 07       	cpc	r29, r31
    1876:	21 f4       	brne	.+8      	; 0x1880 <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1878:	62 e0       	ldi	r22, 0x02	; 2
    187a:	83 e0       	ldi	r24, 0x03	; 3
    187c:	8d d8       	rcall	.-3814   	; 0x998 <sysclk_enable_module>
    187e:	7f c0       	rjmp	.+254    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1880:	c0 34       	cpi	r28, 0x40	; 64
    1882:	89 e0       	ldi	r24, 0x09	; 9
    1884:	d8 07       	cpc	r29, r24
    1886:	21 f4       	brne	.+8      	; 0x1890 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1888:	62 e0       	ldi	r22, 0x02	; 2
    188a:	84 e0       	ldi	r24, 0x04	; 4
    188c:	85 d8       	rcall	.-3830   	; 0x998 <sysclk_enable_module>
    188e:	77 c0       	rjmp	.+238    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1890:	c0 34       	cpi	r28, 0x40	; 64
    1892:	ea e0       	ldi	r30, 0x0A	; 10
    1894:	de 07       	cpc	r29, r30
    1896:	21 f4       	brne	.+8      	; 0x18a0 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1898:	62 e0       	ldi	r22, 0x02	; 2
    189a:	85 e0       	ldi	r24, 0x05	; 5
    189c:	7d d8       	rcall	.-3846   	; 0x998 <sysclk_enable_module>
    189e:	6f c0       	rjmp	.+222    	; 0x197e <usart_init_rs232+0x1de>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    18a0:	c0 39       	cpi	r28, 0x90	; 144
    18a2:	f8 e0       	ldi	r31, 0x08	; 8
    18a4:	df 07       	cpc	r29, r31
    18a6:	21 f4       	brne	.+8      	; 0x18b0 <usart_init_rs232+0x110>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    18a8:	64 e0       	ldi	r22, 0x04	; 4
    18aa:	83 e0       	ldi	r24, 0x03	; 3
    18ac:	75 d8       	rcall	.-3862   	; 0x998 <sysclk_enable_module>
    18ae:	67 c0       	rjmp	.+206    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    18b0:	c0 39       	cpi	r28, 0x90	; 144
    18b2:	89 e0       	ldi	r24, 0x09	; 9
    18b4:	d8 07       	cpc	r29, r24
    18b6:	21 f4       	brne	.+8      	; 0x18c0 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    18b8:	64 e0       	ldi	r22, 0x04	; 4
    18ba:	84 e0       	ldi	r24, 0x04	; 4
    18bc:	6d d8       	rcall	.-3878   	; 0x998 <sysclk_enable_module>
    18be:	5f c0       	rjmp	.+190    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    18c0:	c0 39       	cpi	r28, 0x90	; 144
    18c2:	ea e0       	ldi	r30, 0x0A	; 10
    18c4:	de 07       	cpc	r29, r30
    18c6:	21 f4       	brne	.+8      	; 0x18d0 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    18c8:	64 e0       	ldi	r22, 0x04	; 4
    18ca:	85 e0       	ldi	r24, 0x05	; 5
    18cc:	65 d8       	rcall	.-3894   	; 0x998 <sysclk_enable_module>
    18ce:	57 c0       	rjmp	.+174    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    18d0:	c0 39       	cpi	r28, 0x90	; 144
    18d2:	fb e0       	ldi	r31, 0x0B	; 11
    18d4:	df 07       	cpc	r29, r31
    18d6:	21 f4       	brne	.+8      	; 0x18e0 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    18d8:	64 e0       	ldi	r22, 0x04	; 4
    18da:	86 e0       	ldi	r24, 0x06	; 6
    18dc:	5d d8       	rcall	.-3910   	; 0x998 <sysclk_enable_module>
    18de:	4f c0       	rjmp	.+158    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    18e0:	c0 3c       	cpi	r28, 0xC0	; 192
    18e2:	88 e0       	ldi	r24, 0x08	; 8
    18e4:	d8 07       	cpc	r29, r24
    18e6:	21 f4       	brne	.+8      	; 0x18f0 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    18e8:	68 e0       	ldi	r22, 0x08	; 8
    18ea:	83 e0       	ldi	r24, 0x03	; 3
    18ec:	55 d8       	rcall	.-3926   	; 0x998 <sysclk_enable_module>
    18ee:	47 c0       	rjmp	.+142    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    18f0:	c0 3c       	cpi	r28, 0xC0	; 192
    18f2:	e9 e0       	ldi	r30, 0x09	; 9
    18f4:	de 07       	cpc	r29, r30
    18f6:	21 f4       	brne	.+8      	; 0x1900 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    18f8:	68 e0       	ldi	r22, 0x08	; 8
    18fa:	84 e0       	ldi	r24, 0x04	; 4
    18fc:	4d d8       	rcall	.-3942   	; 0x998 <sysclk_enable_module>
    18fe:	3f c0       	rjmp	.+126    	; 0x197e <usart_init_rs232+0x1de>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1900:	c0 3a       	cpi	r28, 0xA0	; 160
    1902:	f8 e0       	ldi	r31, 0x08	; 8
    1904:	df 07       	cpc	r29, r31
    1906:	21 f4       	brne	.+8      	; 0x1910 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1908:	60 e1       	ldi	r22, 0x10	; 16
    190a:	83 e0       	ldi	r24, 0x03	; 3
    190c:	45 d8       	rcall	.-3958   	; 0x998 <sysclk_enable_module>
    190e:	37 c0       	rjmp	.+110    	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1910:	c0 3a       	cpi	r28, 0xA0	; 160
    1912:	89 e0       	ldi	r24, 0x09	; 9
    1914:	d8 07       	cpc	r29, r24
    1916:	21 f4       	brne	.+8      	; 0x1920 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1918:	60 e1       	ldi	r22, 0x10	; 16
    191a:	84 e0       	ldi	r24, 0x04	; 4
    191c:	3d d8       	rcall	.-3974   	; 0x998 <sysclk_enable_module>
    191e:	2f c0       	rjmp	.+94     	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1920:	c0 3a       	cpi	r28, 0xA0	; 160
    1922:	ea e0       	ldi	r30, 0x0A	; 10
    1924:	de 07       	cpc	r29, r30
    1926:	21 f4       	brne	.+8      	; 0x1930 <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1928:	60 e1       	ldi	r22, 0x10	; 16
    192a:	85 e0       	ldi	r24, 0x05	; 5
    192c:	35 d8       	rcall	.-3990   	; 0x998 <sysclk_enable_module>
    192e:	27 c0       	rjmp	.+78     	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1930:	c0 3a       	cpi	r28, 0xA0	; 160
    1932:	fb e0       	ldi	r31, 0x0B	; 11
    1934:	df 07       	cpc	r29, r31
    1936:	21 f4       	brne	.+8      	; 0x1940 <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1938:	60 e1       	ldi	r22, 0x10	; 16
    193a:	86 e0       	ldi	r24, 0x06	; 6
    193c:	2d d8       	rcall	.-4006   	; 0x998 <sysclk_enable_module>
    193e:	1f c0       	rjmp	.+62     	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1940:	c0 3b       	cpi	r28, 0xB0	; 176
    1942:	88 e0       	ldi	r24, 0x08	; 8
    1944:	d8 07       	cpc	r29, r24
    1946:	21 f4       	brne	.+8      	; 0x1950 <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1948:	60 e2       	ldi	r22, 0x20	; 32
    194a:	83 e0       	ldi	r24, 0x03	; 3
    194c:	25 d8       	rcall	.-4022   	; 0x998 <sysclk_enable_module>
    194e:	17 c0       	rjmp	.+46     	; 0x197e <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1950:	c0 3b       	cpi	r28, 0xB0	; 176
    1952:	e9 e0       	ldi	r30, 0x09	; 9
    1954:	de 07       	cpc	r29, r30
    1956:	21 f4       	brne	.+8      	; 0x1960 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1958:	60 e2       	ldi	r22, 0x20	; 32
    195a:	84 e0       	ldi	r24, 0x04	; 4
    195c:	1d d8       	rcall	.-4038   	; 0x998 <sysclk_enable_module>
    195e:	0f c0       	rjmp	.+30     	; 0x197e <usart_init_rs232+0x1de>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1960:	c0 38       	cpi	r28, 0x80	; 128
    1962:	f4 e0       	ldi	r31, 0x04	; 4
    1964:	df 07       	cpc	r29, r31
    1966:	21 f4       	brne	.+8      	; 0x1970 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1968:	60 e4       	ldi	r22, 0x40	; 64
    196a:	83 e0       	ldi	r24, 0x03	; 3
    196c:	15 d8       	rcall	.-4054   	; 0x998 <sysclk_enable_module>
    196e:	07 c0       	rjmp	.+14     	; 0x197e <usart_init_rs232+0x1de>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1970:	c0 3a       	cpi	r28, 0xA0	; 160
    1972:	84 e0       	ldi	r24, 0x04	; 4
    1974:	d8 07       	cpc	r29, r24
    1976:	19 f4       	brne	.+6      	; 0x197e <usart_init_rs232+0x1de>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1978:	60 e4       	ldi	r22, 0x40	; 64
    197a:	85 e0       	ldi	r24, 0x05	; 5
    197c:	0d d8       	rcall	.-4070   	; 0x998 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	8f 73       	andi	r24, 0x3F	; 63
    1982:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1984:	f8 01       	movw	r30, r16
    1986:	94 81       	ldd	r25, Z+4	; 0x04
    1988:	85 81       	ldd	r24, Z+5	; 0x05
    198a:	89 2b       	or	r24, r25
    198c:	96 81       	ldd	r25, Z+6	; 0x06
    198e:	91 11       	cpse	r25, r1
    1990:	98 e0       	ldi	r25, 0x08	; 8
    1992:	89 2b       	or	r24, r25
    1994:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1996:	f8 01       	movw	r30, r16
    1998:	40 81       	ld	r20, Z
    199a:	51 81       	ldd	r21, Z+1	; 0x01
    199c:	62 81       	ldd	r22, Z+2	; 0x02
    199e:	73 81       	ldd	r23, Z+3	; 0x03
    19a0:	00 e8       	ldi	r16, 0x80	; 128
    19a2:	14 e8       	ldi	r17, 0x84	; 132
    19a4:	2e e1       	ldi	r18, 0x1E	; 30
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	ce 01       	movw	r24, r28
    19aa:	e5 dd       	rcall	.-1078   	; 0x1576 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	98 60       	ori	r25, 0x08	; 8
    19b0:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    19b2:	9c 81       	ldd	r25, Y+4	; 0x04
    19b4:	90 61       	ori	r25, 0x10	; 16
    19b6:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	08 95       	ret

000019c2 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    19c2:	cf 92       	push	r12
    19c4:	df 92       	push	r13
    19c6:	ef 92       	push	r14
    19c8:	ff 92       	push	r15
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    19d4:	d9 01       	movw	r26, r18
    19d6:	c8 01       	movw	r24, r16
    19d8:	b6 95       	lsr	r27
    19da:	a7 95       	ror	r26
    19dc:	97 95       	ror	r25
    19de:	87 95       	ror	r24
    19e0:	48 17       	cp	r20, r24
    19e2:	59 07       	cpc	r21, r25
    19e4:	6a 07       	cpc	r22, r26
    19e6:	7b 07       	cpc	r23, r27
    19e8:	70 f4       	brcc	.+28     	; 0x1a06 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    19ea:	6a 01       	movw	r12, r20
    19ec:	7b 01       	movw	r14, r22
    19ee:	cc 0c       	add	r12, r12
    19f0:	dd 1c       	adc	r13, r13
    19f2:	ee 1c       	adc	r14, r14
    19f4:	ff 1c       	adc	r15, r15
    19f6:	c9 01       	movw	r24, r18
    19f8:	b8 01       	movw	r22, r16
    19fa:	a7 01       	movw	r20, r14
    19fc:	96 01       	movw	r18, r12
    19fe:	ff d2       	rcall	.+1534   	; 0x1ffe <__udivmodsi4>
    1a00:	21 50       	subi	r18, 0x01	; 1
    1a02:	31 09       	sbc	r19, r1
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    1a0a:	83 2f       	mov	r24, r19
    1a0c:	8f 70       	andi	r24, 0x0F	; 15
    1a0e:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    1a10:	2e 83       	std	Y+6, r18	; 0x06
}
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	ff 90       	pop	r15
    1a1c:	ef 90       	pop	r14
    1a1e:	df 90       	pop	r13
    1a20:	cf 90       	pop	r12
    1a22:	08 95       	ret

00001a24 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	ec 01       	movw	r28, r24
    1a32:	7b 01       	movw	r14, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <usart_init_spi+0x16>
    1a38:	98 c1       	rjmp	.+816    	; 0x1d6a <usart_init_spi+0x346>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1a3a:	80 3c       	cpi	r24, 0xC0	; 192
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	29 f4       	brne	.+10     	; 0x1a4a <usart_init_spi+0x26>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1a40:	60 e1       	ldi	r22, 0x10	; 16
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1a48:	90 c1       	rjmp	.+800    	; 0x1d6a <usart_init_spi+0x346>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1a4a:	80 38       	cpi	r24, 0x80	; 128
    1a4c:	91 40       	sbci	r25, 0x01	; 1
    1a4e:	29 f4       	brne	.+10     	; 0x1a5a <usart_init_spi+0x36>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1a50:	62 e0       	ldi	r22, 0x02	; 2
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1a58:	88 c1       	rjmp	.+784    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1a5a:	c1 15       	cp	r28, r1
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	d8 07       	cpc	r29, r24
    1a60:	29 f4       	brne	.+10     	; 0x1a6c <usart_init_spi+0x48>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1a62:	61 e0       	ldi	r22, 0x01	; 1
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1a6a:	7f c1       	rjmp	.+766    	; 0x1d6a <usart_init_spi+0x346>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1a6c:	c0 38       	cpi	r28, 0x80	; 128
    1a6e:	e3 e0       	ldi	r30, 0x03	; 3
    1a70:	de 07       	cpc	r29, r30
    1a72:	29 f4       	brne	.+10     	; 0x1a7e <usart_init_spi+0x5a>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1a7c:	76 c1       	rjmp	.+748    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1a7e:	c0 39       	cpi	r28, 0x90	; 144
    1a80:	f3 e0       	ldi	r31, 0x03	; 3
    1a82:	df 07       	cpc	r29, r31
    1a84:	29 f4       	brne	.+10     	; 0x1a90 <usart_init_spi+0x6c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1a86:	61 e0       	ldi	r22, 0x01	; 1
    1a88:	82 e0       	ldi	r24, 0x02	; 2
    1a8a:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1a8e:	6d c1       	rjmp	.+730    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1a90:	c1 15       	cp	r28, r1
    1a92:	32 e0       	ldi	r19, 0x02	; 2
    1a94:	d3 07       	cpc	r29, r19
    1a96:	29 f4       	brne	.+10     	; 0x1aa2 <usart_init_spi+0x7e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1a98:	62 e0       	ldi	r22, 0x02	; 2
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1aa0:	64 c1       	rjmp	.+712    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1aa2:	c0 34       	cpi	r28, 0x40	; 64
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	d8 07       	cpc	r29, r24
    1aa8:	29 f4       	brne	.+10     	; 0x1ab4 <usart_init_spi+0x90>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1aaa:	62 e0       	ldi	r22, 0x02	; 2
    1aac:	82 e0       	ldi	r24, 0x02	; 2
    1aae:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1ab2:	5b c1       	rjmp	.+694    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1ab4:	c0 32       	cpi	r28, 0x20	; 32
    1ab6:	e3 e0       	ldi	r30, 0x03	; 3
    1ab8:	de 07       	cpc	r29, r30
    1aba:	29 f4       	brne	.+10     	; 0x1ac6 <usart_init_spi+0xa2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1abc:	64 e0       	ldi	r22, 0x04	; 4
    1abe:	82 e0       	ldi	r24, 0x02	; 2
    1ac0:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1ac4:	52 c1       	rjmp	.+676    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1ac6:	c1 15       	cp	r28, r1
    1ac8:	f8 e0       	ldi	r31, 0x08	; 8
    1aca:	df 07       	cpc	r29, r31
    1acc:	29 f4       	brne	.+10     	; 0x1ad8 <usart_init_spi+0xb4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1ace:	61 e0       	ldi	r22, 0x01	; 1
    1ad0:	83 e0       	ldi	r24, 0x03	; 3
    1ad2:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1ad6:	49 c1       	rjmp	.+658    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1ad8:	c1 15       	cp	r28, r1
    1ada:	39 e0       	ldi	r19, 0x09	; 9
    1adc:	d3 07       	cpc	r29, r19
    1ade:	29 f4       	brne	.+10     	; 0x1aea <usart_init_spi+0xc6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1ae0:	61 e0       	ldi	r22, 0x01	; 1
    1ae2:	84 e0       	ldi	r24, 0x04	; 4
    1ae4:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1ae8:	40 c1       	rjmp	.+640    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1aea:	c1 15       	cp	r28, r1
    1aec:	8a e0       	ldi	r24, 0x0A	; 10
    1aee:	d8 07       	cpc	r29, r24
    1af0:	29 f4       	brne	.+10     	; 0x1afc <usart_init_spi+0xd8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	85 e0       	ldi	r24, 0x05	; 5
    1af6:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1afa:	37 c1       	rjmp	.+622    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1afc:	c1 15       	cp	r28, r1
    1afe:	eb e0       	ldi	r30, 0x0B	; 11
    1b00:	de 07       	cpc	r29, r30
    1b02:	29 f4       	brne	.+10     	; 0x1b0e <usart_init_spi+0xea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1b04:	61 e0       	ldi	r22, 0x01	; 1
    1b06:	86 e0       	ldi	r24, 0x06	; 6
    1b08:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1b0c:	2e c1       	rjmp	.+604    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1b0e:	c0 34       	cpi	r28, 0x40	; 64
    1b10:	f8 e0       	ldi	r31, 0x08	; 8
    1b12:	df 07       	cpc	r29, r31
    1b14:	29 f4       	brne	.+10     	; 0x1b20 <usart_init_spi+0xfc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1b16:	62 e0       	ldi	r22, 0x02	; 2
    1b18:	83 e0       	ldi	r24, 0x03	; 3
    1b1a:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1b1e:	25 c1       	rjmp	.+586    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1b20:	c0 34       	cpi	r28, 0x40	; 64
    1b22:	39 e0       	ldi	r19, 0x09	; 9
    1b24:	d3 07       	cpc	r29, r19
    1b26:	29 f4       	brne	.+10     	; 0x1b32 <usart_init_spi+0x10e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1b28:	62 e0       	ldi	r22, 0x02	; 2
    1b2a:	84 e0       	ldi	r24, 0x04	; 4
    1b2c:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1b30:	1c c1       	rjmp	.+568    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1b32:	c0 34       	cpi	r28, 0x40	; 64
    1b34:	8a e0       	ldi	r24, 0x0A	; 10
    1b36:	d8 07       	cpc	r29, r24
    1b38:	29 f4       	brne	.+10     	; 0x1b44 <usart_init_spi+0x120>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1b3a:	62 e0       	ldi	r22, 0x02	; 2
    1b3c:	85 e0       	ldi	r24, 0x05	; 5
    1b3e:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1b42:	13 c1       	rjmp	.+550    	; 0x1d6a <usart_init_spi+0x346>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1b44:	c0 39       	cpi	r28, 0x90	; 144
    1b46:	e8 e0       	ldi	r30, 0x08	; 8
    1b48:	de 07       	cpc	r29, r30
    1b4a:	29 f4       	brne	.+10     	; 0x1b56 <usart_init_spi+0x132>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1b4c:	64 e0       	ldi	r22, 0x04	; 4
    1b4e:	83 e0       	ldi	r24, 0x03	; 3
    1b50:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1b54:	0a c1       	rjmp	.+532    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1b56:	c0 39       	cpi	r28, 0x90	; 144
    1b58:	f9 e0       	ldi	r31, 0x09	; 9
    1b5a:	df 07       	cpc	r29, r31
    1b5c:	29 f4       	brne	.+10     	; 0x1b68 <usart_init_spi+0x144>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1b5e:	64 e0       	ldi	r22, 0x04	; 4
    1b60:	84 e0       	ldi	r24, 0x04	; 4
    1b62:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1b66:	01 c1       	rjmp	.+514    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1b68:	c0 39       	cpi	r28, 0x90	; 144
    1b6a:	3a e0       	ldi	r19, 0x0A	; 10
    1b6c:	d3 07       	cpc	r29, r19
    1b6e:	29 f4       	brne	.+10     	; 0x1b7a <usart_init_spi+0x156>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1b70:	64 e0       	ldi	r22, 0x04	; 4
    1b72:	85 e0       	ldi	r24, 0x05	; 5
    1b74:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1b78:	f8 c0       	rjmp	.+496    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1b7a:	c0 39       	cpi	r28, 0x90	; 144
    1b7c:	8b e0       	ldi	r24, 0x0B	; 11
    1b7e:	d8 07       	cpc	r29, r24
    1b80:	29 f4       	brne	.+10     	; 0x1b8c <usart_init_spi+0x168>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1b82:	64 e0       	ldi	r22, 0x04	; 4
    1b84:	86 e0       	ldi	r24, 0x06	; 6
    1b86:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1b8a:	ef c0       	rjmp	.+478    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1b8c:	c0 3c       	cpi	r28, 0xC0	; 192
    1b8e:	e8 e0       	ldi	r30, 0x08	; 8
    1b90:	de 07       	cpc	r29, r30
    1b92:	29 f4       	brne	.+10     	; 0x1b9e <usart_init_spi+0x17a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1b94:	68 e0       	ldi	r22, 0x08	; 8
    1b96:	83 e0       	ldi	r24, 0x03	; 3
    1b98:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1b9c:	e6 c0       	rjmp	.+460    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1b9e:	c0 3c       	cpi	r28, 0xC0	; 192
    1ba0:	f9 e0       	ldi	r31, 0x09	; 9
    1ba2:	df 07       	cpc	r29, r31
    1ba4:	29 f4       	brne	.+10     	; 0x1bb0 <usart_init_spi+0x18c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1ba6:	68 e0       	ldi	r22, 0x08	; 8
    1ba8:	84 e0       	ldi	r24, 0x04	; 4
    1baa:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1bae:	dd c0       	rjmp	.+442    	; 0x1d6a <usart_init_spi+0x346>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1bb0:	c0 3a       	cpi	r28, 0xA0	; 160
    1bb2:	38 e0       	ldi	r19, 0x08	; 8
    1bb4:	d3 07       	cpc	r29, r19
    1bb6:	69 f4       	brne	.+26     	; 0x1bd2 <usart_init_spi+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1bb8:	60 e1       	ldi	r22, 0x10	; 16
    1bba:	83 e0       	ldi	r24, 0x03	; 3
    1bbc:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1bc0:	e0 ea       	ldi	r30, 0xA0	; 160
    1bc2:	f8 e0       	ldi	r31, 0x08	; 8
    1bc4:	84 81       	ldd	r24, Z+4	; 0x04
    1bc6:	8f 7e       	andi	r24, 0xEF	; 239
    1bc8:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1bca:	f7 01       	movw	r30, r14
    1bcc:	24 81       	ldd	r18, Z+4	; 0x04
    1bce:	22 50       	subi	r18, 0x02	; 2
    1bd0:	4a c0       	rjmp	.+148    	; 0x1c66 <usart_init_spi+0x242>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1bd2:	c0 3a       	cpi	r28, 0xA0	; 160
    1bd4:	f9 e0       	ldi	r31, 0x09	; 9
    1bd6:	df 07       	cpc	r29, r31
    1bd8:	29 f4       	brne	.+10     	; 0x1be4 <usart_init_spi+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1bda:	60 e1       	ldi	r22, 0x10	; 16
    1bdc:	84 e0       	ldi	r24, 0x04	; 4
    1bde:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1be2:	c3 c0       	rjmp	.+390    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1be4:	c0 3a       	cpi	r28, 0xA0	; 160
    1be6:	3a e0       	ldi	r19, 0x0A	; 10
    1be8:	d3 07       	cpc	r29, r19
    1bea:	29 f4       	brne	.+10     	; 0x1bf6 <usart_init_spi+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1bec:	60 e1       	ldi	r22, 0x10	; 16
    1bee:	85 e0       	ldi	r24, 0x05	; 5
    1bf0:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1bf4:	ba c0       	rjmp	.+372    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1bf6:	c0 3a       	cpi	r28, 0xA0	; 160
    1bf8:	8b e0       	ldi	r24, 0x0B	; 11
    1bfa:	d8 07       	cpc	r29, r24
    1bfc:	29 f4       	brne	.+10     	; 0x1c08 <usart_init_spi+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1bfe:	60 e1       	ldi	r22, 0x10	; 16
    1c00:	86 e0       	ldi	r24, 0x06	; 6
    1c02:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1c06:	b1 c0       	rjmp	.+354    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1c08:	c0 3b       	cpi	r28, 0xB0	; 176
    1c0a:	e8 e0       	ldi	r30, 0x08	; 8
    1c0c:	de 07       	cpc	r29, r30
    1c0e:	29 f4       	brne	.+10     	; 0x1c1a <usart_init_spi+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1c10:	60 e2       	ldi	r22, 0x20	; 32
    1c12:	83 e0       	ldi	r24, 0x03	; 3
    1c14:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1c18:	a8 c0       	rjmp	.+336    	; 0x1d6a <usart_init_spi+0x346>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1c1a:	c0 3b       	cpi	r28, 0xB0	; 176
    1c1c:	f9 e0       	ldi	r31, 0x09	; 9
    1c1e:	df 07       	cpc	r29, r31
    1c20:	29 f4       	brne	.+10     	; 0x1c2c <usart_init_spi+0x208>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1c22:	60 e2       	ldi	r22, 0x20	; 32
    1c24:	84 e0       	ldi	r24, 0x04	; 4
    1c26:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1c2a:	9f c0       	rjmp	.+318    	; 0x1d6a <usart_init_spi+0x346>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1c2c:	c0 38       	cpi	r28, 0x80	; 128
    1c2e:	34 e0       	ldi	r19, 0x04	; 4
    1c30:	d3 07       	cpc	r29, r19
    1c32:	29 f4       	brne	.+10     	; 0x1c3e <usart_init_spi+0x21a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1c34:	60 e4       	ldi	r22, 0x40	; 64
    1c36:	83 e0       	ldi	r24, 0x03	; 3
    1c38:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1c3c:	96 c0       	rjmp	.+300    	; 0x1d6a <usart_init_spi+0x346>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1c3e:	c0 3a       	cpi	r28, 0xA0	; 160
    1c40:	84 e0       	ldi	r24, 0x04	; 4
    1c42:	d8 07       	cpc	r29, r24
    1c44:	29 f4       	brne	.+10     	; 0x1c50 <usart_init_spi+0x22c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1c46:	60 e4       	ldi	r22, 0x40	; 64
    1c48:	85 e0       	ldi	r24, 0x05	; 5
    1c4a:	0e 94 cc 04 	call	0x998	; 0x998 <sysclk_enable_module>
    1c4e:	8d c0       	rjmp	.+282    	; 0x1d6a <usart_init_spi+0x346>
    1c50:	8c 81       	ldd	r24, Y+4	; 0x04
    1c52:	8f 7e       	andi	r24, 0xEF	; 239
    1c54:	8c 83       	std	Y+4, r24	; 0x04
    1c56:	fb 01       	movw	r30, r22
    1c58:	24 81       	ldd	r18, Z+4	; 0x04
    1c5a:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	c0 3a       	cpi	r28, 0xA0	; 160
    1c60:	f8 e0       	ldi	r31, 0x08	; 8
    1c62:	df 07       	cpc	r29, r31
    1c64:	31 f4       	brne	.+12     	; 0x1c72 <usart_init_spi+0x24e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1c66:	80 91 4e 06 	lds	r24, 0x064E
    1c6a:	84 fd       	sbrc	r24, 4
    1c6c:	86 c0       	rjmp	.+268    	; 0x1d7a <usart_init_spi+0x356>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1c6e:	11 e1       	ldi	r17, 0x11	; 17
    1c70:	85 c0       	rjmp	.+266    	; 0x1d7c <usart_init_spi+0x358>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1c72:	80 3b       	cpi	r24, 0xB0	; 176
    1c74:	38 e0       	ldi	r19, 0x08	; 8
    1c76:	93 07       	cpc	r25, r19
    1c78:	79 f0       	breq	.+30     	; 0x1c98 <usart_init_spi+0x274>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1c7a:	80 3a       	cpi	r24, 0xA0	; 160
    1c7c:	e9 e0       	ldi	r30, 0x09	; 9
    1c7e:	9e 07       	cpc	r25, r30
    1c80:	31 f4       	brne	.+12     	; 0x1c8e <usart_init_spi+0x26a>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1c82:	30 91 6e 06 	lds	r19, 0x066E
    1c86:	34 fd       	sbrc	r19, 4
    1c88:	7c c0       	rjmp	.+248    	; 0x1d82 <usart_init_spi+0x35e>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1c8a:	19 e1       	ldi	r17, 0x19	; 25
    1c8c:	10 c0       	rjmp	.+32     	; 0x1cae <usart_init_spi+0x28a>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    1c8e:	80 3b       	cpi	r24, 0xB0	; 176
    1c90:	f9 e0       	ldi	r31, 0x09	; 9
    1c92:	9f 07       	cpc	r25, r31
    1c94:	a9 f0       	breq	.+42     	; 0x1cc0 <usart_init_spi+0x29c>
    1c96:	01 c0       	rjmp	.+2      	; 0x1c9a <usart_init_spi+0x276>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1c98:	15 e1       	ldi	r17, 0x15	; 21
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    1c9a:	80 3a       	cpi	r24, 0xA0	; 160
    1c9c:	3a e0       	ldi	r19, 0x0A	; 10
    1c9e:	93 07       	cpc	r25, r19
    1ca0:	31 f4       	brne	.+12     	; 0x1cae <usart_init_spi+0x28a>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    1ca2:	80 91 8e 06 	lds	r24, 0x068E
    1ca6:	84 fd       	sbrc	r24, 4
    1ca8:	6e c0       	rjmp	.+220    	; 0x1d86 <usart_init_spi+0x362>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    1caa:	11 e2       	ldi	r17, 0x21	; 33
    1cac:	0c c0       	rjmp	.+24     	; 0x1cc6 <usart_init_spi+0x2a2>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1cae:	80 3a       	cpi	r24, 0xA0	; 160
    1cb0:	9b 40       	sbci	r25, 0x0B	; 11
    1cb2:	49 f4       	brne	.+18     	; 0x1cc6 <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    1cb4:	80 91 ae 06 	lds	r24, 0x06AE
    1cb8:	84 fd       	sbrc	r24, 4
    1cba:	04 c0       	rjmp	.+8      	; 0x1cc4 <usart_init_spi+0x2a0>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    1cbc:	19 e2       	ldi	r17, 0x29	; 41
    1cbe:	03 c0       	rjmp	.+6      	; 0x1cc6 <usart_init_spi+0x2a2>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1cc0:	1d e1       	ldi	r17, 0x1D	; 29
    1cc2:	01 c0       	rjmp	.+2      	; 0x1cc6 <usart_init_spi+0x2a2>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    1cc4:	1d e2       	ldi	r17, 0x2D	; 45
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    1cc6:	e1 2f       	mov	r30, r17
    1cc8:	e6 95       	lsr	r30
    1cca:	e6 95       	lsr	r30
    1ccc:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    1cce:	30 e2       	ldi	r19, 0x20	; 32
    1cd0:	e3 9f       	mul	r30, r19
    1cd2:	f0 01       	movw	r30, r0
    1cd4:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1cd6:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1cd8:	17 70       	andi	r17, 0x07	; 7
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	01 2e       	mov	r0, r17
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <usart_init_spi+0x2c2>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	0a 94       	dec	r0
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <usart_init_spi+0x2be>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1cea:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    1cec:	22 30       	cpi	r18, 0x02	; 2
    1cee:	10 f0       	brcs	.+4      	; 0x1cf4 <usart_init_spi+0x2d0>
    1cf0:	40 e0       	ldi	r20, 0x00	; 0
    1cf2:	01 c0       	rjmp	.+2      	; 0x1cf6 <usart_init_spi+0x2d2>
    1cf4:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    1cf6:	df 01       	movw	r26, r30
    1cf8:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1cfa:	a1 0f       	add	r26, r17
    1cfc:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1cfe:	3f b7       	in	r19, 0x3f	; 63
	cpu_irq_disable();
    1d00:	f8 94       	cli
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1d02:	2c 91       	ld	r18, X
    1d04:	27 70       	andi	r18, 0x07	; 7
    1d06:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    1d08:	9c 91       	ld	r25, X
    1d0a:	94 2b       	or	r25, r20
    1d0c:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1d0e:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1d10:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1d12:	8d 81       	ldd	r24, Y+5	; 0x05
    1d14:	80 6c       	ori	r24, 0xC0	; 192
    1d16:	8d 83       	std	Y+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    1d18:	f7 01       	movw	r30, r14
    1d1a:	84 81       	ldd	r24, Z+4	; 0x04
    1d1c:	8d 7f       	andi	r24, 0xFD	; 253
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	21 f4       	brne	.+8      	; 0x1d2a <usart_init_spi+0x306>
		usart->CTRLC |= USART_UCPHA_bm;
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	82 60       	ori	r24, 0x02	; 2
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	03 c0       	rjmp	.+6      	; 0x1d30 <usart_init_spi+0x30c>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	8d 7f       	andi	r24, 0xFD	; 253
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
	}
	if (opt->data_order) {
    1d30:	f7 01       	movw	r30, r14
    1d32:	85 81       	ldd	r24, Z+5	; 0x05
    1d34:	88 23       	and	r24, r24
    1d36:	21 f0       	breq	.+8      	; 0x1d40 <usart_init_spi+0x31c>
		(usart)->CTRLC |= USART_DORD_bm;
    1d38:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3a:	84 60       	ori	r24, 0x04	; 4
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	03 c0       	rjmp	.+6      	; 0x1d46 <usart_init_spi+0x322>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1d40:	8d 81       	ldd	r24, Y+5	; 0x05
    1d42:	8b 7f       	andi	r24, 0xFB	; 251
    1d44:	8d 83       	std	Y+5, r24	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1d46:	f7 01       	movw	r30, r14
    1d48:	40 81       	ld	r20, Z
    1d4a:	51 81       	ldd	r21, Z+1	; 0x01
    1d4c:	62 81       	ldd	r22, Z+2	; 0x02
    1d4e:	73 81       	ldd	r23, Z+3	; 0x03
    1d50:	00 e8       	ldi	r16, 0x80	; 128
    1d52:	14 e8       	ldi	r17, 0x84	; 132
    1d54:	2e e1       	ldi	r18, 0x1E	; 30
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	ce 01       	movw	r24, r28
    1d5a:	33 de       	rcall	.-922    	; 0x19c2 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5e:	88 60       	ori	r24, 0x08	; 8
    1d60:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1d62:	8c 81       	ldd	r24, Y+4	; 0x04
    1d64:	80 61       	ori	r24, 0x10	; 16
    1d66:	8c 83       	std	Y+4, r24	; 0x04
    1d68:	10 c0       	rjmp	.+32     	; 0x1d8a <usart_init_spi+0x366>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6c:	8f 7e       	andi	r24, 0xEF	; 239
    1d6e:	8c 83       	std	Y+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1d70:	f7 01       	movw	r30, r14
    1d72:	24 81       	ldd	r18, Z+4	; 0x04
    1d74:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1d76:	ce 01       	movw	r24, r28
    1d78:	7c cf       	rjmp	.-264    	; 0x1c72 <usart_init_spi+0x24e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1d7a:	15 e1       	ldi	r17, 0x15	; 21
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1d7c:	80 ea       	ldi	r24, 0xA0	; 160
    1d7e:	98 e0       	ldi	r25, 0x08	; 8
    1d80:	86 cf       	rjmp	.-244    	; 0x1c8e <usart_init_spi+0x26a>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1d82:	1d e1       	ldi	r17, 0x1D	; 29
    1d84:	94 cf       	rjmp	.-216    	; 0x1cae <usart_init_spi+0x28a>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1d86:	15 e2       	ldi	r17, 0x25	; 37
    1d88:	9e cf       	rjmp	.-196    	; 0x1cc6 <usart_init_spi+0x2a2>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	ff 90       	pop	r15
    1d94:	ef 90       	pop	r14
    1d96:	08 95       	ret

00001d98 <keyboard_get_key_state>:

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    1d98:	20 91 88 06 	lds	r18, 0x0688
void keyboard_get_key_state(struct keyboard_event *keybuffer)
{
	// Variable to hold the key mask
	static uint8_t key_state;

	if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_0)) &&
    1d9c:	25 fd       	sbrc	r18, 5
    1d9e:	0d c0       	rjmp	.+26     	; 0x1dba <keyboard_get_key_state+0x22>
			!(key_state & KEYBOARD_ENTER_MASK)) {
    1da0:	20 91 63 22 	lds	r18, 0x2263
void keyboard_get_key_state(struct keyboard_event *keybuffer)
{
	// Variable to hold the key mask
	static uint8_t key_state;

	if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_0)) &&
    1da4:	20 fd       	sbrc	r18, 0
    1da6:	62 c0       	rjmp	.+196    	; 0x1e6c <keyboard_get_key_state+0xd4>
			!(key_state & KEYBOARD_ENTER_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_ENTER_MASK;
    1da8:	21 60       	ori	r18, 0x01	; 1
    1daa:	20 93 63 22 	sts	0x2263, r18
		keybuffer->keycode = KEYBOARD_ENTER;
    1dae:	2d e0       	ldi	r18, 0x0D	; 13
    1db0:	fc 01       	movw	r30, r24
    1db2:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_PRESS;
    1db4:	21 e0       	ldi	r18, 0x01	; 1
    1db6:	21 83       	std	Z+1, r18	; 0x01
    1db8:	08 95       	ret
    1dba:	20 91 88 06 	lds	r18, 0x0688
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_0))
    1dbe:	25 ff       	sbrs	r18, 5
    1dc0:	0d c0       	rjmp	.+26     	; 0x1ddc <keyboard_get_key_state+0x44>
			&& (key_state & KEYBOARD_ENTER_MASK)) {
    1dc2:	20 91 63 22 	lds	r18, 0x2263
    1dc6:	20 ff       	sbrs	r18, 0
    1dc8:	09 c0       	rjmp	.+18     	; 0x1ddc <keyboard_get_key_state+0x44>
		// Key released
		key_state &= ~KEYBOARD_ENTER_MASK;
    1dca:	2e 7f       	andi	r18, 0xFE	; 254
    1dcc:	20 93 63 22 	sts	0x2263, r18
		keybuffer->keycode = KEYBOARD_ENTER;
    1dd0:	2d e0       	ldi	r18, 0x0D	; 13
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_RELEASE;
    1dd6:	22 e0       	ldi	r18, 0x02	; 2
    1dd8:	21 83       	std	Z+1, r18	; 0x01
    1dda:	08 95       	ret
    1ddc:	20 91 a8 06 	lds	r18, 0x06A8
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_1)) &&
    1de0:	21 fd       	sbrc	r18, 1
    1de2:	0d c0       	rjmp	.+26     	; 0x1dfe <keyboard_get_key_state+0x66>
			!(key_state & KEYBOARD_UP_MASK)) {
    1de4:	20 91 63 22 	lds	r18, 0x2263
			&& (key_state & KEYBOARD_ENTER_MASK)) {
		// Key released
		key_state &= ~KEYBOARD_ENTER_MASK;
		keybuffer->keycode = KEYBOARD_ENTER;
		keybuffer->type = KEYBOARD_RELEASE;
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_1)) &&
    1de8:	21 fd       	sbrc	r18, 1
    1dea:	45 c0       	rjmp	.+138    	; 0x1e76 <keyboard_get_key_state+0xde>
			!(key_state & KEYBOARD_UP_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_UP_MASK;
    1dec:	22 60       	ori	r18, 0x02	; 2
    1dee:	20 93 63 22 	sts	0x2263, r18
		keybuffer->keycode = KEYBOARD_UP;
    1df2:	26 e2       	ldi	r18, 0x26	; 38
    1df4:	fc 01       	movw	r30, r24
    1df6:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_PRESS;
    1df8:	21 e0       	ldi	r18, 0x01	; 1
    1dfa:	21 83       	std	Z+1, r18	; 0x01
    1dfc:	08 95       	ret
    1dfe:	20 91 a8 06 	lds	r18, 0x06A8
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_1))
    1e02:	21 ff       	sbrs	r18, 1
    1e04:	0d c0       	rjmp	.+26     	; 0x1e20 <keyboard_get_key_state+0x88>
			&& (key_state & KEYBOARD_UP_MASK)) {
    1e06:	20 91 63 22 	lds	r18, 0x2263
    1e0a:	21 ff       	sbrs	r18, 1
    1e0c:	09 c0       	rjmp	.+18     	; 0x1e20 <keyboard_get_key_state+0x88>
		// Key released
		key_state &= ~KEYBOARD_UP_MASK;
    1e0e:	2d 7f       	andi	r18, 0xFD	; 253
    1e10:	20 93 63 22 	sts	0x2263, r18
		keybuffer->keycode = KEYBOARD_UP;
    1e14:	26 e2       	ldi	r18, 0x26	; 38
    1e16:	fc 01       	movw	r30, r24
    1e18:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_RELEASE;
    1e1a:	22 e0       	ldi	r18, 0x02	; 2
    1e1c:	21 83       	std	Z+1, r18	; 0x01
    1e1e:	08 95       	ret
    1e20:	20 91 a8 06 	lds	r18, 0x06A8
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_2)) &&
    1e24:	22 fd       	sbrc	r18, 2
    1e26:	0d c0       	rjmp	.+26     	; 0x1e42 <keyboard_get_key_state+0xaa>
			!(key_state & KEYBOARD_DOWN_MASK)) {
    1e28:	20 91 63 22 	lds	r18, 0x2263
			&& (key_state & KEYBOARD_UP_MASK)) {
		// Key released
		key_state &= ~KEYBOARD_UP_MASK;
		keybuffer->keycode = KEYBOARD_UP;
		keybuffer->type = KEYBOARD_RELEASE;
	} else if ((gpio_pin_is_low(GPIO_PUSH_BUTTON_2)) &&
    1e2c:	22 fd       	sbrc	r18, 2
    1e2e:	28 c0       	rjmp	.+80     	; 0x1e80 <keyboard_get_key_state+0xe8>
			!(key_state & KEYBOARD_DOWN_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_DOWN_MASK;
    1e30:	24 60       	ori	r18, 0x04	; 4
    1e32:	20 93 63 22 	sts	0x2263, r18
		keybuffer->keycode = KEYBOARD_DOWN;
    1e36:	28 e2       	ldi	r18, 0x28	; 40
    1e38:	fc 01       	movw	r30, r24
    1e3a:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_PRESS;
    1e3c:	21 e0       	ldi	r18, 0x01	; 1
    1e3e:	21 83       	std	Z+1, r18	; 0x01
    1e40:	08 95       	ret
    1e42:	20 91 a8 06 	lds	r18, 0x06A8
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_2))
    1e46:	22 ff       	sbrs	r18, 2
    1e48:	0d c0       	rjmp	.+26     	; 0x1e64 <keyboard_get_key_state+0xcc>
			&& (key_state & KEYBOARD_DOWN_MASK)) {
    1e4a:	20 91 63 22 	lds	r18, 0x2263
    1e4e:	22 ff       	sbrs	r18, 2
    1e50:	09 c0       	rjmp	.+18     	; 0x1e64 <keyboard_get_key_state+0xcc>
		// Key released
		key_state &= ~KEYBOARD_DOWN_MASK;
    1e52:	2b 7f       	andi	r18, 0xFB	; 251
    1e54:	20 93 63 22 	sts	0x2263, r18
		keybuffer->keycode = KEYBOARD_DOWN;
    1e58:	28 e2       	ldi	r18, 0x28	; 40
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	20 83       	st	Z, r18
		keybuffer->type = KEYBOARD_RELEASE;
    1e5e:	22 e0       	ldi	r18, 0x02	; 2
    1e60:	21 83       	std	Z+1, r18	; 0x01
    1e62:	08 95       	ret
	} else {
		keybuffer->keycode = KEYBOARD_NO_KEY;
    1e64:	fc 01       	movw	r30, r24
    1e66:	10 82       	st	Z, r1
		keybuffer->type = KEYBOARD_NO_EVENT;
    1e68:	11 82       	std	Z+1, r1	; 0x01
    1e6a:	08 95       	ret
    1e6c:	30 91 88 06 	lds	r19, 0x0688
			!(key_state & KEYBOARD_ENTER_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_ENTER_MASK;
		keybuffer->keycode = KEYBOARD_ENTER;
		keybuffer->type = KEYBOARD_PRESS;
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_0))
    1e70:	35 fd       	sbrc	r19, 5
    1e72:	ab cf       	rjmp	.-170    	; 0x1dca <keyboard_get_key_state+0x32>
    1e74:	b3 cf       	rjmp	.-154    	; 0x1ddc <keyboard_get_key_state+0x44>
    1e76:	30 91 a8 06 	lds	r19, 0x06A8
			!(key_state & KEYBOARD_UP_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_UP_MASK;
		keybuffer->keycode = KEYBOARD_UP;
		keybuffer->type = KEYBOARD_PRESS;
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_1))
    1e7a:	31 fd       	sbrc	r19, 1
    1e7c:	c8 cf       	rjmp	.-112    	; 0x1e0e <keyboard_get_key_state+0x76>
    1e7e:	d0 cf       	rjmp	.-96     	; 0x1e20 <keyboard_get_key_state+0x88>
    1e80:	30 91 a8 06 	lds	r19, 0x06A8
			!(key_state & KEYBOARD_DOWN_MASK)) {
		// Key pressed
		key_state |= KEYBOARD_DOWN_MASK;
		keybuffer->keycode = KEYBOARD_DOWN;
		keybuffer->type = KEYBOARD_PRESS;
	} else if ((gpio_pin_is_high(GPIO_PUSH_BUTTON_2))
    1e84:	32 fd       	sbrc	r19, 2
    1e86:	e5 cf       	rjmp	.-54     	; 0x1e52 <keyboard_get_key_state+0xba>
    1e88:	ed cf       	rjmp	.-38     	; 0x1e64 <keyboard_get_key_state+0xcc>

00001e8a <play_song_with_input>:
	gfx_mono_draw_string("Currently Playing: ", 1, 2, &sysfont);
	gfx_mono_draw_progmem_string((char PROGMEM_PTR_T)main_menu_strings[song_choice], 1, 10, &sysfont);

}

static void play_song_with_input(struct SongNote song[], uint8_t song_length) {
    1e8a:	ef 92       	push	r14
    1e8c:	ff 92       	push	r15
    1e8e:	0f 93       	push	r16
    1e90:	1f 93       	push	r17
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	1f 92       	push	r1
    1e98:	1f 92       	push	r1
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	7c 01       	movw	r14, r24
			&& (key.type == KEYBOARD_RELEASE))
		{
			break;
		}

		play_song(song, song_length);
    1ea0:	06 2f       	mov	r16, r22
    1ea2:	10 e0       	ldi	r17, 0x00	; 0

static void play_song_with_input(struct SongNote song[], uint8_t song_length) {
	struct keyboard_event key;
	
	while(true) {
		keyboard_get_key_state(&key);
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	01 96       	adiw	r24, 0x01	; 1
    1ea8:	77 df       	rcall	.-274    	; 0x1d98 <keyboard_get_key_state>

		if((key.keycode == KEYBOARD_ENTER)
    1eaa:	99 81       	ldd	r25, Y+1	; 0x01
    1eac:	9d 30       	cpi	r25, 0x0D	; 13
    1eae:	19 f4       	brne	.+6      	; 0x1eb6 <play_song_with_input+0x2c>
			&& (key.type == KEYBOARD_RELEASE))
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	82 30       	cpi	r24, 0x02	; 2
    1eb4:	29 f0       	breq	.+10     	; 0x1ec0 <play_song_with_input+0x36>
		{
			break;
		}

		play_song(song, song_length);
    1eb6:	b8 01       	movw	r22, r16
    1eb8:	c7 01       	movw	r24, r14
    1eba:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <play_song>
	}
    1ebe:	f2 cf       	rjmp	.-28     	; 0x1ea4 <play_song_with_input+0x1a>
}
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	1f 91       	pop	r17
    1eca:	0f 91       	pop	r16
    1ecc:	ff 90       	pop	r15
    1ece:	ef 90       	pop	r14
    1ed0:	08 95       	ret

00001ed2 <song_menu>:
static void play_sample_song(void);
static void play_serial(void);


void song_menu(uint8_t song_choice)
{	
    1ed2:	0f 93       	push	r16
    1ed4:	cf 93       	push	r28
    1ed6:	c8 2f       	mov	r28, r24
	gfx_mono_draw_filled_rect(0, 0, 128, 32, GFX_PIXEL_CLR);
    1ed8:	00 e0       	ldi	r16, 0x00	; 0
    1eda:	20 e2       	ldi	r18, 0x20	; 32
    1edc:	40 e8       	ldi	r20, 0x80	; 128
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	02 d8       	rcall	.-4092   	; 0xee8 <gfx_mono_generic_draw_filled_rect>
	gfx_mono_draw_string("Currently Playing: ", 1, 2, &sysfont);
    1ee4:	2e e2       	ldi	r18, 0x2E	; 46
    1ee6:	30 e2       	ldi	r19, 0x20	; 32
    1ee8:	42 e0       	ldi	r20, 0x02	; 2
    1eea:	61 e0       	ldi	r22, 0x01	; 1
    1eec:	8b e4       	ldi	r24, 0x4B	; 75
    1eee:	90 e2       	ldi	r25, 0x20	; 32
    1ef0:	a2 d9       	rcall	.-3260   	; 0x1236 <gfx_mono_draw_string>
	gfx_mono_draw_progmem_string((char PROGMEM_PTR_T)main_menu_strings[song_choice], 1, 10, &sysfont);
    1ef2:	ec 2f       	mov	r30, r28
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	ee 0f       	add	r30, r30
    1ef8:	ff 1f       	adc	r31, r31
    1efa:	ed 5b       	subi	r30, 0xBD	; 189
    1efc:	ff 4d       	sbci	r31, 0xDF	; 223
    1efe:	2e e2       	ldi	r18, 0x2E	; 46
    1f00:	30 e2       	ldi	r19, 0x20	; 32
    1f02:	4a e0       	ldi	r20, 0x0A	; 10
    1f04:	61 e0       	ldi	r22, 0x01	; 1
    1f06:	80 81       	ld	r24, Z
    1f08:	91 81       	ldd	r25, Z+1	; 0x01
    1f0a:	be d9       	rcall	.-3204   	; 0x1288 <gfx_mono_draw_progmem_string>

}
    1f0c:	cf 91       	pop	r28
    1f0e:	0f 91       	pop	r16
    1f10:	08 95       	ret

00001f12 <main>:
		}
	}
}

int main (void)
{
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
    1f16:	1f 92       	push	r1
    1f18:	1f 92       	push	r1
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
		.charlength = USART_CHSIZE_8BIT_gc,
		.paritytype = USART_PMODE_DISABLED_gc,
		.stopbits = false
	};

	sysclk_init();	
    1f1e:	0e 94 bc 04 	call	0x978	; 0x978 <sysclk_init>
	board_init();
    1f22:	7e da       	rcall	.-2820   	; 0x1420 <board_init>
	solenoid_init();
    1f24:	0e 94 ae 02 	call	0x55c	; 0x55c <solenoid_init>
	gfx_mono_init();
    1f28:	0e 94 52 06 	call	0xca4	; 0xca4 <gfx_mono_st7565r_init>
	usart_init_rs232(USART_SERIAL, &SERIAL_OPTIONS);
    1f2c:	65 e3       	ldi	r22, 0x35	; 53
    1f2e:	70 e2       	ldi	r23, 0x20	; 32
    1f30:	80 ea       	ldi	r24, 0xA0	; 160
    1f32:	98 e0       	ldi	r25, 0x08	; 8
    1f34:	35 dc       	rcall	.-1942   	; 0x17a0 <usart_init_rs232>

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    1f36:	80 e1       	ldi	r24, 0x10	; 16
    1f38:	80 93 87 06 	sts	0x0687, r24
		} while (menu_status == GFX_MONO_MENU_EVENT_IDLE);

		switch(menu_status) {
			case 0:
				song_menu(0);
				play_song_with_input(SAMPLE_SONG, SAMPLE_SONG_LENGTH);
    1f3c:	0f 2e       	mov	r0, r31
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	ef 2e       	mov	r14, r31
    1f42:	f0 e2       	ldi	r31, 0x20	; 32
    1f44:	ff 2e       	mov	r15, r31
    1f46:	f0 2d       	mov	r31, r0

	gpio_toggle_pin(NHD_C12832A1Z_BACKLIGHT);

	while(true) 
	{
		gfx_mono_menu_init(&main_menu);
    1f48:	8c e3       	ldi	r24, 0x3C	; 60
    1f4a:	90 e2       	ldi	r25, 0x20	; 32
    1f4c:	cd d8       	rcall	.-3686   	; 0x10e8 <gfx_mono_menu_init>

		do {
			do {
				keyboard_get_key_state(&input);
    1f4e:	ce 01       	movw	r24, r28
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	22 df       	rcall	.-444    	; 0x1d98 <keyboard_get_key_state>
			} while (input.type != KEYBOARD_RELEASE);
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	82 30       	cpi	r24, 0x02	; 2
    1f58:	d1 f7       	brne	.-12     	; 0x1f4e <main+0x3c>

			menu_status = gfx_mono_menu_process_key(&main_menu, input.keycode);
    1f5a:	69 81       	ldd	r22, Y+1	; 0x01
    1f5c:	8c e3       	ldi	r24, 0x3C	; 60
    1f5e:	90 e2       	ldi	r25, 0x20	; 32
    1f60:	db d8       	rcall	.-3658   	; 0x1118 <gfx_mono_menu_process_key>
		} while (menu_status == GFX_MONO_MENU_EVENT_IDLE);
    1f62:	8f 3f       	cpi	r24, 0xFF	; 255
    1f64:	a1 f3       	breq	.-24     	; 0x1f4e <main+0x3c>

		switch(menu_status) {
    1f66:	81 30       	cpi	r24, 0x01	; 1
    1f68:	71 f0       	breq	.+28     	; 0x1f86 <main+0x74>
    1f6a:	28 f0       	brcs	.+10     	; 0x1f76 <main+0x64>
    1f6c:	82 30       	cpi	r24, 0x02	; 2
    1f6e:	91 f0       	breq	.+36     	; 0x1f94 <main+0x82>
    1f70:	83 30       	cpi	r24, 0x03	; 3
    1f72:	b9 f0       	breq	.+46     	; 0x1fa2 <main+0x90>
    1f74:	e9 cf       	rjmp	.-46     	; 0x1f48 <main+0x36>
			case 0:
				song_menu(0);
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	ac df       	rcall	.-168    	; 0x1ed2 <song_menu>
				play_song_with_input(SAMPLE_SONG, SAMPLE_SONG_LENGTH);
    1f7a:	f7 01       	movw	r30, r14
    1f7c:	60 81       	ld	r22, Z
    1f7e:	87 e1       	ldi	r24, 0x17	; 23
    1f80:	90 e2       	ldi	r25, 0x20	; 32
    1f82:	83 df       	rcall	.-250    	; 0x1e8a <play_song_with_input>
				break;
    1f84:	e1 cf       	rjmp	.-62     	; 0x1f48 <main+0x36>
			case 1:
				song_menu(1);
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	a4 df       	rcall	.-184    	; 0x1ed2 <song_menu>
				play_song_with_input(STAIRWAY, 6);
    1f8a:	66 e0       	ldi	r22, 0x06	; 6
    1f8c:	85 e0       	ldi	r24, 0x05	; 5
    1f8e:	90 e2       	ldi	r25, 0x20	; 32
    1f90:	7c df       	rcall	.-264    	; 0x1e8a <play_song_with_input>
				break;
    1f92:	da cf       	rjmp	.-76     	; 0x1f48 <main+0x36>
			case 2:
				song_menu(2);
    1f94:	82 e0       	ldi	r24, 0x02	; 2
    1f96:	9d df       	rcall	.-198    	; 0x1ed2 <song_menu>
				play_song_with_input(MISERLOU, 1);
    1f98:	61 e0       	ldi	r22, 0x01	; 1
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	90 e2       	ldi	r25, 0x20	; 32
    1f9e:	75 df       	rcall	.-278    	; 0x1e8a <play_song_with_input>
				break;
    1fa0:	d3 cf       	rjmp	.-90     	; 0x1f48 <main+0x36>
			case 3:
				song_menu(3);
    1fa2:	83 e0       	ldi	r24, 0x03	; 3
    1fa4:	96 df       	rcall	.-212    	; 0x1ed2 <song_menu>
{
	uint8_t recieved_byte;
	bool canContinue = true;

	while(canContinue) {
		recieved_byte = usart_getchar(USART_SERIAL);
    1fa6:	80 ea       	ldi	r24, 0xA0	; 160
    1fa8:	98 e0       	ldi	r25, 0x08	; 8
    1faa:	df da       	rcall	.-2626   	; 0x156a <usart_getchar>
    1fac:	18 2f       	mov	r17, r24
		usart_putchar(USART_SERIAL, recieved_byte);
    1fae:	68 2f       	mov	r22, r24
    1fb0:	80 ea       	ldi	r24, 0xA0	; 160
    1fb2:	98 e0       	ldi	r25, 0x08	; 8
    1fb4:	d2 da       	rcall	.-2652   	; 0x155a <usart_putchar>
		switch(recieved_byte) {
    1fb6:	81 2f       	mov	r24, r17
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	fc 01       	movw	r30, r24
    1fbc:	f0 97       	sbiw	r30, 0x30	; 48
    1fbe:	e7 30       	cpi	r30, 0x07	; 7
    1fc0:	f1 05       	cpc	r31, r1
    1fc2:	88 f7       	brcc	.-30     	; 0x1fa6 <main+0x94>
    1fc4:	88 27       	eor	r24, r24
    1fc6:	e2 50       	subi	r30, 0x02	; 2
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	8f 4f       	sbci	r24, 0xFF	; 255
    1fcc:	3a c0       	rjmp	.+116    	; 0x2042 <__tablejump2__>
			case '6':
				solenoid_high_low(STRING_SIX);
    1fce:	88 e0       	ldi	r24, 0x08	; 8
    1fd0:	0e 94 bf 02 	call	0x57e	; 0x57e <solenoid_high_low>
    1fd4:	e8 cf       	rjmp	.-48     	; 0x1fa6 <main+0x94>
				break;
			case '5':
				solenoid_high_low(STRING_FIVE);
    1fd6:	89 e0       	ldi	r24, 0x09	; 9
    1fd8:	0e 94 bf 02 	call	0x57e	; 0x57e <solenoid_high_low>
    1fdc:	e4 cf       	rjmp	.-56     	; 0x1fa6 <main+0x94>
				break;
			case '4':
				solenoid_high_low(STRING_FOUR);
    1fde:	8a e0       	ldi	r24, 0x0A	; 10
    1fe0:	0e 94 bf 02 	call	0x57e	; 0x57e <solenoid_high_low>
    1fe4:	e0 cf       	rjmp	.-64     	; 0x1fa6 <main+0x94>
				break;
			case '3':
				solenoid_high_low(STRING_THREE);
    1fe6:	84 e0       	ldi	r24, 0x04	; 4
    1fe8:	0e 94 bf 02 	call	0x57e	; 0x57e <solenoid_high_low>
    1fec:	dc cf       	rjmp	.-72     	; 0x1fa6 <main+0x94>
				break;
			case '2':
				solenoid_high_low(STRING_TWO);
    1fee:	85 e0       	ldi	r24, 0x05	; 5
    1ff0:	0e 94 bf 02 	call	0x57e	; 0x57e <solenoid_high_low>
    1ff4:	d8 cf       	rjmp	.-80     	; 0x1fa6 <main+0x94>
				break;
			case '1':
				solenoid_high_low(STRING_ONE);
    1ff6:	86 e0       	ldi	r24, 0x06	; 6
    1ff8:	0e 94 bf 02 	call	0x57e	; 0x57e <solenoid_high_low>
    1ffc:	d4 cf       	rjmp	.-88     	; 0x1fa6 <main+0x94>

00001ffe <__udivmodsi4>:
    1ffe:	a1 e2       	ldi	r26, 0x21	; 33
    2000:	1a 2e       	mov	r1, r26
    2002:	aa 1b       	sub	r26, r26
    2004:	bb 1b       	sub	r27, r27
    2006:	fd 01       	movw	r30, r26
    2008:	0d c0       	rjmp	.+26     	; 0x2024 <__udivmodsi4_ep>

0000200a <__udivmodsi4_loop>:
    200a:	aa 1f       	adc	r26, r26
    200c:	bb 1f       	adc	r27, r27
    200e:	ee 1f       	adc	r30, r30
    2010:	ff 1f       	adc	r31, r31
    2012:	a2 17       	cp	r26, r18
    2014:	b3 07       	cpc	r27, r19
    2016:	e4 07       	cpc	r30, r20
    2018:	f5 07       	cpc	r31, r21
    201a:	20 f0       	brcs	.+8      	; 0x2024 <__udivmodsi4_ep>
    201c:	a2 1b       	sub	r26, r18
    201e:	b3 0b       	sbc	r27, r19
    2020:	e4 0b       	sbc	r30, r20
    2022:	f5 0b       	sbc	r31, r21

00002024 <__udivmodsi4_ep>:
    2024:	66 1f       	adc	r22, r22
    2026:	77 1f       	adc	r23, r23
    2028:	88 1f       	adc	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	1a 94       	dec	r1
    202e:	69 f7       	brne	.-38     	; 0x200a <__udivmodsi4_loop>
    2030:	60 95       	com	r22
    2032:	70 95       	com	r23
    2034:	80 95       	com	r24
    2036:	90 95       	com	r25
    2038:	9b 01       	movw	r18, r22
    203a:	ac 01       	movw	r20, r24
    203c:	bd 01       	movw	r22, r26
    203e:	cf 01       	movw	r24, r30
    2040:	08 95       	ret

00002042 <__tablejump2__>:
    2042:	ee 0f       	add	r30, r30
    2044:	ff 1f       	adc	r31, r31
    2046:	88 1f       	adc	r24, r24
    2048:	8b bf       	out	0x3b, r24	; 59
    204a:	07 90       	elpm	r0, Z+
    204c:	f6 91       	elpm	r31, Z
    204e:	e0 2d       	mov	r30, r0
    2050:	19 94       	eijmp

00002052 <__umulhisi3>:
    2052:	a2 9f       	mul	r26, r18
    2054:	b0 01       	movw	r22, r0
    2056:	b3 9f       	mul	r27, r19
    2058:	c0 01       	movw	r24, r0
    205a:	a3 9f       	mul	r26, r19
    205c:	70 0d       	add	r23, r0
    205e:	81 1d       	adc	r24, r1
    2060:	11 24       	eor	r1, r1
    2062:	91 1d       	adc	r25, r1
    2064:	b2 9f       	mul	r27, r18
    2066:	70 0d       	add	r23, r0
    2068:	81 1d       	adc	r24, r1
    206a:	11 24       	eor	r1, r1
    206c:	91 1d       	adc	r25, r1
    206e:	08 95       	ret

00002070 <_exit>:
    2070:	f8 94       	cli

00002072 <__stop_program>:
    2072:	ff cf       	rjmp	.-2      	; 0x2072 <__stop_program>
